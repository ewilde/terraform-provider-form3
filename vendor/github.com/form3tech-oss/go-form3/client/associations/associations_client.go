// Code generated by go-swagger; DO NOT EDIT.

package associations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new associations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for associations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteBacsID deletes organisation association for b a c s
*/
func (a *Client) DeleteBacsID(params *DeleteBacsIDParams) (*DeleteBacsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBacsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteBacsID",
		Method:             "DELETE",
		PathPattern:        "/bacs/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBacsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteBacsIDNoContent), nil

}

/*
DeletePayportID deletes service association
*/
func (a *Client) DeletePayportID(params *DeletePayportIDParams) (*DeletePayportIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePayportIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeletePayportID",
		Method:             "DELETE",
		PathPattern:        "/payport/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePayportIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeletePayportIDNoContent), nil

}

/*
DeleteSepainstantID deletes organisation spea instant association
*/
func (a *Client) DeleteSepainstantID(params *DeleteSepainstantIDParams) (*DeleteSepainstantIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSepainstantIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteSepainstantID",
		Method:             "DELETE",
		PathPattern:        "/sepainstant/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSepainstantIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSepainstantIDNoContent), nil

}

/*
DeleteStarlingID deletes organisation association
*/
func (a *Client) DeleteStarlingID(params *DeleteStarlingIDParams) (*DeleteStarlingIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStarlingIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteStarlingID",
		Method:             "DELETE",
		PathPattern:        "/starling/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteStarlingIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteStarlingIDNoContent), nil

}

/*
GetBacs lists all organisation associations for b a c s
*/
func (a *Client) GetBacs(params *GetBacsParams) (*GetBacsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBacsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBacs",
		Method:             "GET",
		PathPattern:        "/bacs",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBacsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBacsOK), nil

}

/*
GetBacsID fetches organisation association for b a c s
*/
func (a *Client) GetBacsID(params *GetBacsIDParams) (*GetBacsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBacsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBacsID",
		Method:             "GET",
		PathPattern:        "/bacs/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBacsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBacsIDOK), nil

}

/*
GetPayport lists all organisation associations
*/
func (a *Client) GetPayport(params *GetPayportParams) (*GetPayportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPayportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPayport",
		Method:             "GET",
		PathPattern:        "/payport",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPayportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPayportOK), nil

}

/*
GetPayportID fetches service association
*/
func (a *Client) GetPayportID(params *GetPayportIDParams) (*GetPayportIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPayportIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPayportID",
		Method:             "GET",
		PathPattern:        "/payport/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPayportIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPayportIDOK), nil

}

/*
GetSepainstant lists all organisation sepa instant associations
*/
func (a *Client) GetSepainstant(params *GetSepainstantParams) (*GetSepainstantOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSepainstantParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSepainstant",
		Method:             "GET",
		PathPattern:        "/sepainstant",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSepainstantReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSepainstantOK), nil

}

/*
GetSepainstantID fetches organisation sepa instant association
*/
func (a *Client) GetSepainstantID(params *GetSepainstantIDParams) (*GetSepainstantIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSepainstantIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSepainstantID",
		Method:             "GET",
		PathPattern:        "/sepainstant/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSepainstantIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSepainstantIDOK), nil

}

/*
GetStarling lists all organisation associations
*/
func (a *Client) GetStarling(params *GetStarlingParams) (*GetStarlingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStarlingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStarling",
		Method:             "GET",
		PathPattern:        "/starling",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStarlingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStarlingOK), nil

}

/*
GetStarlingID fetches organisation association
*/
func (a *Client) GetStarlingID(params *GetStarlingIDParams) (*GetStarlingIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStarlingIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStarlingID",
		Method:             "GET",
		PathPattern:        "/starling/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStarlingIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStarlingIDOK), nil

}

/*
PostBacs creates organisation association for b a c s
*/
func (a *Client) PostBacs(params *PostBacsParams) (*PostBacsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostBacsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostBacs",
		Method:             "POST",
		PathPattern:        "/bacs",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostBacsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostBacsCreated), nil

}

/*
PostPayport creates payport service association
*/
func (a *Client) PostPayport(params *PostPayportParams) (*PostPayportCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPayportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPayport",
		Method:             "POST",
		PathPattern:        "/payport",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPayportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPayportCreated), nil

}

/*
PostSepainstant creates organisation association for sepa instant
*/
func (a *Client) PostSepainstant(params *PostSepainstantParams) (*PostSepainstantCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSepainstantParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSepainstant",
		Method:             "POST",
		PathPattern:        "/sepainstant",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostSepainstantReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostSepainstantCreated), nil

}

/*
PostStarling creates organisation association
*/
func (a *Client) PostStarling(params *PostStarlingParams) (*PostStarlingCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStarlingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostStarling",
		Method:             "POST",
		PathPattern:        "/starling",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostStarlingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostStarlingCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
