// Code generated by go-swagger; DO NOT EDIT.

package associations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/form3tech-oss/terraform-provider-form3/models"
)

// GetSepaddIDReader is a Reader for the GetSepaddID structure.
type GetSepaddIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSepaddIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSepaddIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSepaddIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetSepaddIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSepaddIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSepaddIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGetSepaddIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetSepaddIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSepaddIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetSepaddIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSepaddIDOK creates a GetSepaddIDOK with default headers values
func NewGetSepaddIDOK() *GetSepaddIDOK {
	return &GetSepaddIDOK{}
}

/*GetSepaddIDOK handles this case with default header values.

Associations details
*/
type GetSepaddIDOK struct {
	Payload *models.SepaDDAssociationDetailsResponse
}

func (o *GetSepaddIDOK) Error() string {
	return fmt.Sprintf("[GET /sepadd/{id}][%d] getSepaddIdOK  %+v", 200, o.Payload)
}

func (o *GetSepaddIDOK) GetPayload() *models.SepaDDAssociationDetailsResponse {
	return o.Payload
}

func (o *GetSepaddIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SepaDDAssociationDetailsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSepaddIDBadRequest creates a GetSepaddIDBadRequest with default headers values
func NewGetSepaddIDBadRequest() *GetSepaddIDBadRequest {
	return &GetSepaddIDBadRequest{}
}

/*GetSepaddIDBadRequest handles this case with default header values.

Bad Request
*/
type GetSepaddIDBadRequest struct {
	Payload *models.APIError
}

func (o *GetSepaddIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /sepadd/{id}][%d] getSepaddIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetSepaddIDBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetSepaddIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSepaddIDUnauthorized creates a GetSepaddIDUnauthorized with default headers values
func NewGetSepaddIDUnauthorized() *GetSepaddIDUnauthorized {
	return &GetSepaddIDUnauthorized{}
}

/*GetSepaddIDUnauthorized handles this case with default header values.

Authentication credentials were missing or incorrect
*/
type GetSepaddIDUnauthorized struct {
	Payload *models.APIError
}

func (o *GetSepaddIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /sepadd/{id}][%d] getSepaddIdUnauthorized  %+v", 401, o.Payload)
}

func (o *GetSepaddIDUnauthorized) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetSepaddIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSepaddIDForbidden creates a GetSepaddIDForbidden with default headers values
func NewGetSepaddIDForbidden() *GetSepaddIDForbidden {
	return &GetSepaddIDForbidden{}
}

/*GetSepaddIDForbidden handles this case with default header values.

Forbidden
*/
type GetSepaddIDForbidden struct {
	Payload *models.APIError
}

func (o *GetSepaddIDForbidden) Error() string {
	return fmt.Sprintf("[GET /sepadd/{id}][%d] getSepaddIdForbidden  %+v", 403, o.Payload)
}

func (o *GetSepaddIDForbidden) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetSepaddIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSepaddIDNotFound creates a GetSepaddIDNotFound with default headers values
func NewGetSepaddIDNotFound() *GetSepaddIDNotFound {
	return &GetSepaddIDNotFound{}
}

/*GetSepaddIDNotFound handles this case with default header values.

Record not found
*/
type GetSepaddIDNotFound struct {
	Payload *models.APIError
}

func (o *GetSepaddIDNotFound) Error() string {
	return fmt.Sprintf("[GET /sepadd/{id}][%d] getSepaddIdNotFound  %+v", 404, o.Payload)
}

func (o *GetSepaddIDNotFound) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetSepaddIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSepaddIDConflict creates a GetSepaddIDConflict with default headers values
func NewGetSepaddIDConflict() *GetSepaddIDConflict {
	return &GetSepaddIDConflict{}
}

/*GetSepaddIDConflict handles this case with default header values.

Conflict
*/
type GetSepaddIDConflict struct {
	Payload *models.APIError
}

func (o *GetSepaddIDConflict) Error() string {
	return fmt.Sprintf("[GET /sepadd/{id}][%d] getSepaddIdConflict  %+v", 409, o.Payload)
}

func (o *GetSepaddIDConflict) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetSepaddIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSepaddIDTooManyRequests creates a GetSepaddIDTooManyRequests with default headers values
func NewGetSepaddIDTooManyRequests() *GetSepaddIDTooManyRequests {
	return &GetSepaddIDTooManyRequests{}
}

/*GetSepaddIDTooManyRequests handles this case with default header values.

The request cannot be served due to the applicationâ€™s rate limit
*/
type GetSepaddIDTooManyRequests struct {
	Payload *models.APIError
}

func (o *GetSepaddIDTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /sepadd/{id}][%d] getSepaddIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetSepaddIDTooManyRequests) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetSepaddIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSepaddIDInternalServerError creates a GetSepaddIDInternalServerError with default headers values
func NewGetSepaddIDInternalServerError() *GetSepaddIDInternalServerError {
	return &GetSepaddIDInternalServerError{}
}

/*GetSepaddIDInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetSepaddIDInternalServerError struct {
	Payload *models.APIError
}

func (o *GetSepaddIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /sepadd/{id}][%d] getSepaddIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSepaddIDInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetSepaddIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSepaddIDServiceUnavailable creates a GetSepaddIDServiceUnavailable with default headers values
func NewGetSepaddIDServiceUnavailable() *GetSepaddIDServiceUnavailable {
	return &GetSepaddIDServiceUnavailable{}
}

/*GetSepaddIDServiceUnavailable handles this case with default header values.

The server is up, but overloaded with requests. Try again later.
*/
type GetSepaddIDServiceUnavailable struct {
	Payload *models.APIError
}

func (o *GetSepaddIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /sepadd/{id}][%d] getSepaddIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetSepaddIDServiceUnavailable) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetSepaddIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
