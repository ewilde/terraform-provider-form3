swagger: "2.0"
info:
  version: "0.0.1"
  title: Form3 Corelib data structures.
host: api.form3.tech
schemes:
  - https
basePath: /v1
paths:
  /admins/{user_id}/credentials:
    get:
      summary: Fetch admin credentials for user
      tags:
        - Admins
      x-access:
        - Public
      parameters:
        - name: user_id
          in: path
          description: User Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: List of admin credentials for user
          schema:
            $ref: "#/definitions/UserCredentialListResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    post:
      summary: Generate new admin credentials for a user
      tags:
        - Admins
      x-access:
        - Public
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: user_id
          in: path
          description: User Id
          required: true
          type: string
          format: uuid
      responses:
        201:
          description: Credential creation response
          schema:
            $ref: "#/definitions/CredentialCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /admins/{user_id}/credentials/{client_id}:
    delete:
      summary: Delete admin credential for user
      tags:
        - Admins
      x-access:
        - Public
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: user_id
          in: path
          description: User Id
          required: true
          type: string
          format: uuid
        - name: client_id
          in: path
          description: client id
          required: true
          type: string
      responses:
        204:
          description: Credential deleted
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /units:
    post:
      summary: Create organisation
      tags:
        - Organisations
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: Organisation creation request
          in: body
          schema:
            $ref: "#/definitions/OrganisationCreation"

      responses:
        201:
          description: Organisation creation response
          schema:
            $ref: "#/definitions/OrganisationCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    get:
      summary: List all organisations
      tags:
        - Organisations
      parameters:
        - name: filter[child_organisation_id]
          in: query
          description: Child org id
          required: false
          type: string
          format: uuid

      responses:
        200:
          description: List of organisation details
          schema:
            $ref: "#/definitions/OrganisationDetailsListResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /units/{id}:
    get:
      summary: Fetch organisation
      tags:
        - Organisations
      parameters:
        - name: id
          in: path
          description: Organisation Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Organisation details
          schema:
            $ref: "#/definitions/OrganisationDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    delete:
      summary: Delete organisation
      tags:
        - Organisations
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: id
          in: path
          description: Organisation Id
          required: true
          type: string
          format: uuid
        - name: version
          in: query
          description: Version
          required: true
          type: integer
          minimum: 0
      responses:
        204:
          description: Organisation deleted
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    patch:
      summary: Update organisation
      tags:
        - Organisations
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: id
          in: path
          description: Organisation Id
          required: true
          type: string
          format: uuid
        - name: Organisation update request
          in: body
          schema:
            $ref: "#/definitions/OrganisationUpdate"
      responses:
        200:
          description: Organisation details
          schema:
            $ref: "#/definitions/OrganisationDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /users:
    post:
      summary: Create user
      tags:
        - Users
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: User creation request
          in: body
          schema:
            $ref: "#/definitions/UserCreation"

      responses:
        201:
          description: User creation response
          schema:
            $ref: "#/definitions/UserCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    get:
      summary: List all users
      tags:
        - Users
      parameters:
        - name: page[number]
          in: query
          description: Which page to select
          required: false
          type: integer
          minimum: 0
        - name: page[size]
          in: query
          description: Number of items to select
          required: false
          type: integer
          minimum: 0
          maximum: 1000

      responses:
        200:
          description: List of user details
          schema:
            $ref: "#/definitions/UserDetailsListResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /users/{user_id}:
    get:
      summary: Fetch user
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          description: User Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: User details
          schema:
            $ref: "#/definitions/UserDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    patch:
      summary: Edit user details
      tags:
        - Users
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: user_id
          in: path
          description: User Id
          required: true
          type: string
          format: uuid
        - name: User update request
          in: body
          schema:
            $ref: "#/definitions/UserCreation"

      responses:
        200:
          description: User details
          schema:
            $ref: "#/definitions/UserDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    delete:
      summary: Delete user
      tags:
        - Users
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: user_id
          in: path
          description: User Id
          required: true
          type: string
          format: uuid
        - name: version
          in: query
          description: Version
          required: true
          type: integer
          minimum: 0
      responses:
        204:
          description: User deleted
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /users/{user_id}/aces:
    get:
      summary: Get access control list for user
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          description: User Id
          required: true
          type: string
          format: uuid
        - name: filter[record_type]
          in: query
          description: Record type
          required: false
          type: string
          pattern: ^[A-Za-z]*$
        - name: filter[action]
          in: query
          description: Access action
          required: false
          type: string
          pattern: ^[A-Za-z]*$

      responses:
        200:
          description: List of access control entries for this user
          schema:
            $ref: "#/definitions/AceDetailsListResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /users/{user_id}/roles:
    get:
      summary: Get all roles for user
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          description: User Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: List of roles for user
          schema:
            $ref: "#/definitions/UserRoleListResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /users/{user_id}/credentials:
    get:
      summary: Get all credentials for user
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          description: User Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: List of credentials for user
          schema:
            $ref: "#/definitions/UserCredentialListResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    post:
      summary: Add credentials to user
      tags:
        - Users
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: user_id
          in: path
          description: User Id
          required: true
          type: string
          format: uuid
      responses:
        201:
          description: Credential creation response
          schema:
            $ref: "#/definitions/CredentialCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /users/{user_id}/credentials/{client_id}:
    delete:
      summary: Delete credential for user
      tags:
        - Users
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: user_id
          in: path
          description: User Id
          required: true
          type: string
          format: uuid
        - name: client_id
          in: path
          description: client id
          required: true
          type: string
          format: uuid
      responses:
        204:
          description: Credential deleted
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /users/{user_id}/roles/{role_id}:
    post:
      summary: Add role to user
      tags:
        - Users
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: user_id
          in: path
          description: User Id
          required: true
          type: string
          format: uuid
        - name: role_id
          in: path
          description: Role Id
          required: true
          type: string
          format: uuid
      responses:
        201:
          description: Role set OK
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    delete:
      summary: Remove role from user
      tags:
        - Users
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: user_id
          in: path
          description: User Id
          required: true
          type: string
          format: uuid
        - name: role_id
          in: path
          description: Role Id
          required: true
          type: string
          format: uuid
      responses:
        204:
          description: User role deleted OK
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /payport:
    post:
      summary: Create payport service association
      tags:
        - Associations
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: creation request
          in: body
          schema:
            $ref: "#/definitions/PayportAssociationCreation"

      responses:
        201:
          description: creation response
          schema:
            $ref: "#/definitions/PayportAssociationCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    get:
      summary: List all organisation associations
      tags:
        - Associations
      parameters:
        - name: filter[organisation_id]
          in: query
          description: Organisation id
          required: false
          type: string
          format: uuid

      responses:
        200:
          description: List of associations
          schema:
            $ref: "#/definitions/PayportAssociationDetailsListResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /payport/{id}:
    get:
      summary: Fetch service association
      tags:
        - Associations
      parameters:
        - name: id
          in: path
          description: Association Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Associations details
          schema:
            $ref: "#/definitions/PayportAssociationDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    delete:
      summary: Delete service association
      tags:
        - Associations
      parameters:
        - name: id
          in: path
          description: Association Id
          required: true
          type: string
          format: uuid
        - name: version
          in: query
          description: Version
          required: true
          type: integer
          minimum: 0
      responses:
        204:
          description: Association deleted
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /roles:
    post:
      summary: Create role
      tags:
        - Roles
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: Role creation request
          in: body
          schema:
            $ref: "#/definitions/RoleCreation"

      responses:
        201:
          description: Role creation response
          schema:
            $ref: "#/definitions/RoleCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    get:
      summary: List all roles
      tags:
        - Roles
      parameters:
        - name: page[number]
          in: query
          description: Which page to select
          required: false
          type: integer
          minimum: 0
        - name: page[size]
          in: query
          description: Number of items to select
          required: false
          type: integer
          minimum: 0
          maximum: 1000

      responses:
        200:
          description: List of role details
          schema:
            $ref: "#/definitions/RoleDetailsListResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /roles/{role_id}:
    get:
      summary: Fetch role
      tags:
        - Roles
      parameters:
        - name: role_id
          in: path
          description: Role Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Role details
          schema:
            $ref: "#/definitions/RoleDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    delete:
      summary: Delete role
      tags:
        - Roles
      parameters:
        - name: role_id
          in: path
          description: Role Id
          required: true
          type: string
          format: uuid
        - name: version
          in: query
          description: Version
          required: true
          type: integer
          minimum: 0
      responses:
        204:
          description: Role deleted

  /roles/{role_id}/aces:
    post:
      summary: Create Access Control Entry
      tags:
        - Ace
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: role_id
          in: path
          description: Role Id
          required: true
          type: string
          format: uuid
        - name: Ace creation request
          in: body
          schema:
            $ref: "#/definitions/AceCreation"

      responses:
        201:
          description: Ace creation response
          schema:
            $ref: "#/definitions/AceCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    get:
      summary: List all Access Controls for role
      tags:
        - Ace
      parameters:
        - name: role_id
          in: path
          description: Role Id
          required: true
          type: string
          format: uuid

      responses:
        200:
          description: List of Ace details
          schema:
            $ref: "#/definitions/AceDetailsListResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /roles/{role_id}/aces/{ace_id}:
    get:
      summary: Fetch Access Control Entry
      tags:
        - Ace
      parameters:
        - name: role_id
          in: path
          description: Role Id
          required: true
          type: string
          format: uuid
        - name: ace_id
          in: path
          description: Ace Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Ace details
          schema:
            $ref: "#/definitions/AceDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    delete:
      summary: Delete Access Control Entry
      tags:
        - Ace
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: role_id
          in: path
          description: Role Id
          required: true
          type: string
          format: uuid
        - name: ace_id
          in: path
          description: Ace Id
          required: true
          type: string
          format: uuid
      responses:
        204:
          description: Ace deleted OK

  /subscriptions:
    post:
      summary: Create subscription
      tags:
        - Subscriptions
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: Subscription creation request
          in: body
          schema:
            $ref: "#/definitions/SubscriptionCreation"

      responses:
        201:
          description: Subscription creation response
          schema:
            $ref: "#/definitions/SubscriptionCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    get:
      summary: List all subscriptions
      parameters:
        - name: page[number]
          in: query
          description: Which page to select
          required: false
          type: integer
          minimum: 0
        - name: page[size]
          in: query
          description: Number of items to select
          required: false
          type: integer
          minimum: 0
          maximum: 1000
        - name: filter[event_type]
          in: query
          description: Filter by event type
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      tags:
        - Subscriptions

      responses:
        200:
          description: List of subscription details
          schema:
            $ref: "#/definitions/SubscriptionDetailsListResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /subscriptions/{id}:
    get:
      summary: Fetch subscription
      tags:
        - Subscriptions
      parameters:
        - name: id
          in: path
          description: Subscription Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Subscription details
          schema:
            $ref: "#/definitions/SubscriptionDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    patch:
      summary: Edit subscription details
      tags:
        - Subscriptions
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: id
          in: path
          description: Subscription Id
          required: true
          type: string
          format: uuid
        - name: Subscription update request
          in: body
          schema:
            $ref: "#/definitions/SubscriptionCreation"

      responses:
        200:
          description: Subscription details
          schema:
            $ref: "#/definitions/SubscriptionDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    delete:
      summary: Deletes a subscription
      tags:
        - Subscriptions
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: id
          in: path
          description: Subscription Id
          required: true
          type: string
          format: uuid
        - name: version
          in: query
          description: Version
          required: true
          type: integer
          minimum: 0
      responses:
        204:
          description: Subscription deleted OK. No body content will be returned
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /starling:
    post:
      summary: Create organisation association
      tags:
        - Associations
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: creation request
          in: body
          schema:
            $ref: "#/definitions/AssociationCreation"

      responses:
        201:
          description: creation response
          schema:
            $ref: "#/definitions/AssociationCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    get:
      summary: List all organisation associations
      tags:
        - Associations
      parameters:
        - name: filter[organisation_id]
          in: query
          description: Organisation id
          required: false
          type: string
          format: uuid

      responses:
        200:
          description: List of associations
          schema:
            $ref: "#/definitions/AssociationDetailsListResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /starling/{id}:
    get:
      summary: Fetch organisation association
      tags:
        - Associations
      parameters:
        - name: id
          in: path
          description: Association Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Associations details
          schema:
            $ref: "#/definitions/AssociationDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    delete:
      summary: Delete organisation association
      tags:
        - Associations
      parameters:
        - name: id
          in: path
          description: Association Id
          required: true
          type: string
          format: uuid
        - name: version
          in: query
          description: Version
          required: true
          type: integer
          minimum: 0
      responses:
        204:
          description: Association deleted
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"
  #organisation api - end

  #account api -start
  /accounts:
    post:
      summary: Create account
      tags:
        - Accounts
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: Account creation request
          in: body
          schema:
            $ref: "#/definitions/AccountCreation"

      responses:
        201:
          description: Account creation response
          schema:
            $ref: "#/definitions/AccountCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    get:
      summary: List accounts
      tags:
        - Accounts
      parameters:
        - name: page[number]
          in: query
          description: Which page to select
          required: false
          type: integer
          minimum: 0
        - name: page[size]
          in: query
          description: Number of items to select
          required: false
          type: integer
          minimum: 0
          maximum: 1000
        - name: filter[organisation_id]
          in: query
          description: Filter by organisation id
          required: false
          type: array
          items:
            type: string
            format: uuid
          collectionFormat: csv
        - name: filter[bank_id_code]
          in: query
          description: Filter by type of bank id e.g. "GBDSC"
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
        - name: filter[bank_id]
          in: query
          description: Filter by bank id e.g. sort code or bic
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
        - name: filter[account_number]
          in: query
          description: Filter by account number
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
        - name: filter[country]
          in: query
          description: Filter by country e.g. FR,GB
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
        - name: filter[customer_id]
          in: query
          description: Filter by customer_id
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
        - name: filter[iban]
          in: query
          description: Filter by IBAN
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv

      responses:
        200:
          description: List of account details
          schema:
            $ref: "#/definitions/AccountDetailsListResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /accounts/{id}:
    get:
      summary: Fetch account
      tags:
        - Accounts
      parameters:
        - name: id
          in: path
          description: Account Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Account details
          schema:
            $ref: "#/definitions/AccountDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    delete:
      summary: Delete account
      tags:
        - Accounts
      parameters:
        - name: id
          in: path
          description: Account Id
          required: true
          type: string
          format: uuid
        - name: version
          in: query
          description: Version
          required: true
          type: integer
          minimum: 0
      responses:
        204:
          description: Account deleted
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  #account_routing api -start
  /account_routings:
    get:
      summary: List account routings
      tags:
        - AccountRoutings
      x-access:
        - Public
      parameters:
        - name: page[number]
          in: query
          description: Which page to select
          required: false
          type: string
        - name: page[size]
          in: query
          description: Number of items to select
          required: false
          type: integer
          minimum: 0
          maximum: 1000
        - name: filter[organisation_id]
          in: query
          description: Filter by organisation id
          required: false
          type: array
          items:
            type: string
            format: uuid
          collectionFormat: csv

      responses:
        200:
          description: List of account routing details
          schema:
            $ref: "#/definitions/AccountRoutingDetailsListResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    post:
      summary: Create an account routing entry
      tags:
        - AccountRoutings
      x-access:
        - Public
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: Account routing creation request
          in: body
          schema:
            $ref: "#/definitions/AccountRoutingCreation"

      responses:
        201:
          description: Account routing creation response success
          schema:
            $ref: "#/definitions/AccountRoutingCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /account_routings/{id}:
    delete:
      summary: Delete account routing
      x-access:
        - Public
      tags:
        - AccountRoutings
      parameters:
        - name: id
          in: path
          description: Account Routing Id
          required: true
          type: string
          format: uuid
        - name: version
          in: query
          description: Version
          required: true
          type: integer
          minimum: 0
      responses:
        204:
          description: Account Routing deleted
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    get:
      summary: Fetch account routing
      x-access:
        - Public
      tags:
        - AccountRoutings
      parameters:
        - name: id
          in: path
          description: Account Routing Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Account Routing details
          schema:
            $ref: "#/definitions/AccountRoutingDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"
  # account_routing api end

  /bankids:
    post:
      summary: Create bank id
      tags:
        - Accounts
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: BankId creation request
          in: body
          schema:
            $ref: "#/definitions/BankIdCreation"

      responses:
        201:
          description: BankId creation response
          schema:
            $ref: "#/definitions/BankIdCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    get:
      summary: List bankIds
      tags:
        - Accounts
      x-access:
        - Private
      parameters:
        - name: page[number]
          in: query
          description: Which page to select
          required: false
          type: string
        - name: page[size]
          in: query
          description: Number of items to select
          required: false
          type: integer
          minimum: 0
          maximum: 1000
        - name: filter[organisation_id]
          in: query
          description: Filter by organisation id
          required: false
          type: array
          items:
            type: string
            format: uuid
          collectionFormat: csv
        - name: filter[bank_id_code]
          in: query
          description: Filter by type of bank id e.g. "GBDSC"
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
        - name: filter[bank_id]
          in: query
          description: Filter by bank id e.g. sort code or bic
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
        - name: filter[country]
          in: query
          description: Filter by country e.g. FR,GB
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        200:
          description: List of bankId details
          schema:
            $ref: "#/definitions/BankIdDetailsListResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /bankids/{id}:
    get:
      summary: Fetch bankId
      tags:
        - Accounts
      parameters:
        - name: id
          in: path
          description: Bank Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: BankId details
          schema:
            $ref: "#/definitions/BankIdDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    delete:
      summary: Delete bankId
      tags:
        - Accounts
      parameters:
        - name: id
          in: path
          description: BankId Id
          required: true
          type: string
          format: uuid
        - name: version
          in: query
          description: Version
          required: true
          type: integer
          minimum: 0
      responses:
        204:
          description: BankId deleted
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /bics:
    post:
      summary: Create BIC
      tags:
        - Accounts
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: Bic creation request
          in: body
          schema:
            $ref: "#/definitions/BicCreation"

      responses:
        201:
          description: Bic creation response
          schema:
            $ref: "#/definitions/BicCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    get:
      summary: List bics
      tags:
        - Accounts
      x-access:
        - Private
      parameters:
        - name: page[number]
          in: query
          description: Which page to select
          required: false
          type: string
        - name: page[size]
          in: query
          description: Number of items to select
          required: false
          type: integer
          minimum: 0
          maximum: 1000
        - name: filter[bic]
          in: query
          description: Filter by specific bic
          required: false
          type: string
      responses:
        200:
          description: List of bic details
          schema:
            $ref: "#/definitions/BicDetailsListResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /bics/{id}:
    get:
      summary: Fetch Bic
      tags:
        - Accounts
      parameters:
        - name: id
          in: path
          description: Bic Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Bic details
          schema:
            $ref: "#/definitions/BicDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    delete:
      summary: Delete BIC
      tags:
        - Accounts
      parameters:
        - name: id
          in: path
          description: Bic Id
          required: true
          type: string
          format: uuid
        - name: version
          in: query
          description: Version
          required: true
          type: integer
          minimum: 0
      responses:
        204:
          description: Bic deleted
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /accountconfigurations:
    post:
      summary: Create configuration
      tags:
        - Accounts
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: AccountConfiguration creation request
          in: body
          schema:
            $ref: "#/definitions/AccountConfigurationCreation"

      responses:
        201:
          description: AccountConfiguration creation response
          schema:
            $ref: "#/definitions/AccountConfigurationCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    get:
      summary: List configurations
      tags:
        - Accounts
      parameters:
        - name: page[number]
          in: query
          description: Which page to select
          required: false
          type: integer
          minimum: 0
        - name: page[size]
          in: query
          description: Number of items to select
          required: false
          type: integer
          minimum: 0
          maximum: 1000

      responses:
        200:
          description: List of configuration details
          schema:
            $ref: "#/definitions/AccountConfigurationDetailsListResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /accountconfigurations/{id}:
    get:
      summary: Fetch AccountConfiguration
      tags:
        - Accounts
      parameters:
        - name: id
          in: path
          description: AccountConfiguration Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: AccountConfiguration details
          schema:
            $ref: "#/definitions/AccountConfigurationDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    delete:
      summary: Delete config
      tags:
        - Accounts
      parameters:
        - name: id
          in: path
          description: AccountConfiguration Id
          required: true
          type: string
          format: uuid
        - name: version
          in: query
          description: Version
          required: true
          type: integer
          minimum: 0
      responses:
        204:
          description: AccountConfiguration deleted
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    patch:
      summary: Amend config
      tags:
        - Accounts
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: id
          in: path
          description: Configuration Id
          required: true
          type: string
          format: uuid
        - name: config amend request
          in: body
          schema:
            $ref: "#/definitions/ConfigurationAmendment"
      responses:
        200:
          description: Configuration updated
          schema:
            $ref: "#/definitions/AccountConfigurationDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"
  #account api -end

  /limits:
    post:
      summary: Create a limit
      tags:
        - Limits
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: Limit creation request
          in: body
          schema:
            $ref: "#/definitions/LimitCreation"
      responses:
        201:
          description: Limit creation response
          schema:
            $ref: "#/definitions/LimitCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    get:
      summary: List limits
      tags:
        - Limits
      parameters:
        - name: page[number]
          in: query
          description: Which page to select
          required: false
          type: string
          minimum: 0
          pattern: "$[A-z0-9]{4}^"
        - name: page[size]
          in: query
          description: Number of items to select
          required: false
          type: integer
          minimum: 0
          maximum: 1000
        - name: filter[organisation_id]
          in: query
          description: Filter by organisation id
          required: false
          type: array
          items:
            type: string
            format: uuid
          collectionFormat: csv
      responses:
        200:
          description: List of limit details
          schema:
            $ref: "#/definitions/LimitDetailsListResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /limits/{id}:
    get:
      summary: Fetch limit
      tags:
        - Limits
      parameters:
        - name: id
          in: path
          description: limit Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Limit details
          schema:
            $ref: "#/definitions/LimitDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    patch:
      summary: Amend limit
      tags:
        - Limits
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: id
          in: path
          description: Limit Id
          required: true
          type: string
          format: uuid
        - name: Limit amend request
          in: body
          schema:
            $ref: "#/definitions/LimitAmendment"
      responses:
        200:
          description: Limit updated
          schema:
            $ref: "#/definitions/LimitDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    delete:
      summary: Delete limit
      tags:
        - Limits
      parameters:
        - name: id
          in: path
          description: Limit Id
          required: true
          type: string
          format: uuid
        - name: version
          in: query
          description: Version
          required: true
          type: integer
          minimum: 0
      responses:
        204:
          description: Limit deleted
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /bacs:
    post:
      summary: Create organisation association for BACS
      tags:
        - Associations
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: creation request
          in: body
          schema:
            $ref: "#/definitions/BacsAssociationCreation"

      responses:
        201:
          description: creation response
          schema:
            $ref: "#/definitions/BacsAssociationCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    get:
      summary: List all organisation associations for BACS
      tags:
        - Associations
      parameters:
        - name: filter[organisation_id]
          in: query
          description: Organisation id
          required: false
          type: string
          format: uuid

      responses:
        200:
          description: List of associations for BACS
          schema:
            $ref: "#/definitions/BacsAssociationDetailsListResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /bacs/{id}:
    get:
      summary: Fetch organisation association for BACS
      tags:
        - Associations
      parameters:
        - name: id
          in: path
          description: Association Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Associations details for BACS
          schema:
            $ref: "#/definitions/BacsAssociationDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    delete:
      summary: Delete organisation association for BACS
      tags:
        - Associations
      parameters:
        - name: id
          in: path
          description: Association Id
          required: true
          type: string
          format: uuid
        - name: version
          in: query
          description: Version
          required: true
          type: integer
          minimum: 0
      responses:
        204:
          description: Association deleted
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /vocalinkreport:
    post:
      summary: Create organisation association
      tags:
        - Associations
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: creation request
          in: body
          schema:
            $ref: "#/definitions/VocalinkReportAssociationCreation"

      responses:
        201:
          description: creation response
          schema:
            $ref: "#/definitions/VocalinkReportAssociationCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    get:
      summary: List all organisation associations
      tags:
        - Associations
      parameters:
        - name: filter[organisation_id]
          in: query
          description: Organisation id
          required: false
          type: array
          items:
            type: string
            format: uuid

      responses:
        200:
          description: List of associations
          schema:
            $ref: "#/definitions/VocalinkReportAssociationDetailsListResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /vocalinkreport/{id}:
    get:
      summary: Fetch organisation association
      tags:
        - Associations
      parameters:
        - name: id
          in: path
          description: Association Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Associations details
          schema:
            $ref: "#/definitions/VocalinkReportAssociationDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    delete:
      summary: Delete organisation association
      tags:
        - Associations
      parameters:
        - name: id
          in: path
          description: Association Id
          required: true
          type: string
          format: uuid
        - name: version
          in: query
          description: Version
          required: true
          type: integer
          minimum: 0
      responses:
        204:
          description: Association deleted
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /keys:
    post:
      summary: Create Key
      tags:
        - System
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: Key creation request
          in: body
          schema:
            $ref: "#/definitions/KeyCreation"
      responses:
        201:
          description: creation response
          schema:
            $ref: "#/definitions/KeyCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    get:
      summary: List all Keys
      tags:
        - System
      responses:
        200:
          description: List of Keys
          schema:
            $ref: "#/definitions/KeyDetailsListResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /keys/{key_id}:
    get:
      summary: Fetch Key
      tags:
        - System
      parameters:
        - name: key_id
          in: path
          description: Key Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Key details
          schema:
            $ref: "#/definitions/KeyDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    delete:
      summary: Delete Key
      tags:
        - System
      parameters:
        - name: key_id
          in: path
          description: Key Id
          required: true
          type: string
          format: uuid
        - name: version
          in: query
          description: Version
          required: true
          type: integer
          minimum: 0
      responses:
        204:
          description: Key deleted
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /keys/{key_id}/certificates:
    post:
      summary: Create certificate
      tags:
        - System
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: key_id
          in: path
          description: Key Id
          required: true
          type: string
          format: uuid
        - name: certificate creation request
          in: body
          schema:
            $ref: "#/definitions/CertificateCreation"
      responses:
        201:
          description: creation response
          schema:
            $ref: "#/definitions/CertificateCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    get:
      summary: List all certificates
      tags:
        - System
      parameters:
        - name: key_id
          in: path
          description: Key Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: List of certificates
          schema:
            $ref: "#/definitions/CertificateDetailsListResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /keys/{key_id}/certificates/{certificate_id}:
    get:
      summary: Fetch certificate
      tags:
        - System
      parameters:
        - name: key_id
          in: path
          description: Key Id
          required: true
          type: string
          format: uuid
        - name: certificate_id
          in: path
          description: Certificate Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Certificate details
          schema:
            $ref: "#/definitions/CertificateDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    delete:
      summary: Delete certificate
      tags:
        - System
      parameters:
        - name: key_id
          in: path
          description: Key Id
          required: true
          type: string
          format: uuid
        - name: certificate_id
          in: path
          description: Certificate Id
          required: true
          type: string
          format: uuid
        - name: version
          in: query
          description: Version
          required: true
          type: integer
          minimum: 0
      responses:
        204:
          description: Certificate deleted
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /confirmation-of-payee:
    post:
      summary: Create organisation association with confirmation of payee
      tags:
        - Associations
      consumes:
        - application/vnd.api+json
        - application/json
      produces:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: creation request
          in: body
          schema:
            $ref: "#/definitions/CoPAssociationCreation"
      responses:
        201:
          description: creation response
          schema:
            $ref: "#/definitions/CoPAssociationCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    get:
      summary: List all organisation associations
      tags:
        - Associations
      parameters:
        - name: filter[organisation_id]
          in: query
          description: Organisation id
          required: false
          type: array
          items:
            type: string
            format: uuid

      responses:
        200:
          description: List of associations
          schema:
            $ref: "#/definitions/CoPAssociationDetailsListResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /confirmation-of-payee/{id}:
    get:
      summary: Fetch organisation association
      tags:
        - Associations
      parameters:
        - name: id
          in: path
          description: Association Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Associations details
          schema:
            $ref: "#/definitions/CoPAssociationDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    delete:
      summary: Delete organisation association
      tags:
        - Associations
      parameters:
        - name: id
          in: path
          description: Association Id
          required: true
          type: string
          format: uuid
        - name: version
          in: query
          description: Version
          required: true
          type: integer
          minimum: 0
      responses:
        204:
          description: Association deleted
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /lhv:
    post:
      summary: Create organisation association for lhv
      tags:
        - Associations
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: creation request
          in: body
          schema:
            $ref: "#/definitions/LhvAssociationCreation"
      responses:
        201:
          description: creation response
          schema:
            $ref: "#/definitions/LhvAssociationCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    get:
      summary: List all organisation lhv associations
      tags:
        - Associations
      parameters:
        - name: filter[organisation_id]
          in: query
          description: Organisation id
          required: false
          type: array
          items:
            type: string
            format: uuid
      responses:
        200:
          description: List of associations
          schema:
            $ref: "#/definitions/LhvAssociationDetailsListResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /lhv/{associationId}:
    get:
      summary: Fetch organisation lhv association
      tags:
        - Associations
      parameters:
        - name: associationId
          in: path
          description: Association Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Associations details
          schema:
            $ref: "#/definitions/LhvAssociationDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    patch:
      summary: Patch organisation lhv association
      tags:
        - Associations
      parameters:
        - name: associationId
          in: path
          description: Association Id
          required: true
          type: string
          format: uuid
        - name: payload
          in: body
          description: LHV Association Patch payload
          required: true
          schema:
            $ref: "#/definitions/LhvAssociationPatch"
      responses:
        200:
          description: Associations details
          schema:
            $ref: "#/definitions/LhvAssociationDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    delete:
      summary: Delete organisation lhv association
      tags:
        - Associations
      parameters:
        - name: associationId
          in: path
          description: Association Id
          required: true
          type: string
          format: uuid
        - name: version
          in: query
          description: Version
          required: true
          type: integer
          minimum: 0
      responses:
        204:
          description: Association deleted
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /lhv/{associationId}/master_accounts:
    parameters:
      - name: associationId
        in: path
        description: Association Id
        required: true
        type: string
        format: uuid
    get:
      summary: List master accounts
      tags:
        - Associations
      responses:
        200:
          description: List of configuration details
          schema:
            $ref: "#/definitions/LhvMasterAccountListResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    post:
      summary: Create organisation association master account
      tags:
        - Associations
      parameters:
        - name: creation request
          in: body
          schema:
            $ref: "#/definitions/LhvMasterAccountCreation"
      responses:
        201:
          description: creation response
          schema:
            $ref: "#/definitions/LhvMasterAccountResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /lhv/{associationId}/master_accounts/{masterAccountId}:
    parameters:
      - name: associationId
        in: path
        description: Association Id
        required: true
        type: string
        format: uuid
      - name: masterAccountId
        in: path
        description: Master Account Id
        required: true
        type: string
        format: uuid

    get:
      summary: Fetch Master Account
      tags:
        - Associations
      responses:
        200:
          description: Master Account details
          schema:
            $ref: "#/definitions/LhvMasterAccountResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    delete:
      summary: Delete organisation association master account
      tags:
        - Associations
      parameters:
        - name: version
          in: query
          description: Version
          required: true
          type: integer
          minimum: 0
      responses:
        204:
          description: Association master account deleted
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /lhv/{associationId}/agency_synchronisation:
    parameters:
      - name: associationId
        in: path
        description: Association Id
        required: true
        type: string
        format: uuid
    get:
      summary: List LHV agency synchronisation details
      tags:
        - Associations
      responses:
        200:
          description: List of LHV agency synchronisation details
          schema:
            $ref: "#/definitions/LhvAgencySynchronisationListResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    post:
      summary: Create LHV organisation association agency synchronisation details
      tags:
        - Associations
      parameters:
        - name: creation request
          in: body
          schema:
            $ref: "#/definitions/LhvAgencySynchronisationCreation"
      responses:
        201:
          description: creation response
          schema:
            $ref: "#/definitions/LhvAgencySynchronisationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"


  /associations/{associationId}/agency_synchronisation/{agencySynchronisationId}:
    parameters:
      - name: associationId
        in: path
        description: Association Id
        required: true
        type: string
        format: uuid
      - name: agencySynchronisationId
        in: path
        description: Agency synchronisation details Id
        required: true
        type: string
        format: uuid
    get:
      summary: Fetch LHV Agency synchronisation details
      tags:
        - Associations
      responses:
        200:
          description: LHV Agency synchronisation details
          schema:
            $ref: "#/definitions/LhvAgencySynchronisationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    delete:
      summary: Delete LHV organisation association agency synchronisation details
      tags:
        - Associations
      parameters:
        - name: version
          in: query
          description: Version
          required: true
          type: integer
          minimum: 0
      responses:
        204:
          description: LHV Association agency synchronisation details deleted
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /sepa-liquidity:
    post:
      summary: Create organisation association for sepa liquidity
      tags:
        - Associations
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: creation request
          in: body
          schema:
            $ref: "#/definitions/SepaLiquidityAssociationCreation"
      responses:
        201:
          description: creation response
          schema:
            $ref: "#/definitions/SepaLiquidityAssociationCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    get:
      summary: List all organisation sepa liquidity associations
      tags:
        - Associations
      parameters:
        - name: filter[organisation_id]
          in: query
          description: Organisation id
          required: false
          type: array
          items:
            type: string
            format: uuid
      responses:
        200:
          description: List of associations
          schema:
            $ref: "#/definitions/SepaLiquidityAssociationDetailsListResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"



  /sepa-liquidity/{id}:
    get:
      summary: Fetch organisation sepa liquidity association
      tags:
        - Associations
      parameters:
        - name: id
          in: path
          description: Association Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Associations details
          schema:
            $ref: "#/definitions/SepaLiquidityAssociationDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    delete:
      summary: Delete organisation sepa liquidity association
      tags:
        - Associations
      parameters:
        - name: id
          in: path
          description: Association Id
          required: true
          type: string
          format: uuid
        - name: version
          in: query
          description: Version
          required: true
          type: integer
          minimum: 0
      responses:
        204:
          description: Association deleted
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /products:
    post:
      summary: Create product association
      tags:
        - Associations
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: creation request
          in: body
          schema:
            $ref: "#/definitions/ProductsAssociationCreation"
      responses:
        201:
          description: creation response
          schema:
            $ref: "#/definitions/ProductsAssociationCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    get:
      summary: List all product associations
      tags:
        - Associations
      parameters:
        - name: filter[organisation_id]
          in: query
          description: Organisation id
          required: false
          type: array
          items:
            type: string
            format: uuid
      responses:
        200:
          description: List of associations
          schema:
            $ref: "#/definitions/ProductsAssociationDetailsListResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /products/{id}:
    get:
      summary: Fetch product association
      tags:
        - Associations
      parameters:
        - name: id
          in: path
          description: Association Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Associations details
          schema:
            $ref: "#/definitions/ProductsAssociationDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    delete:
      summary: Delete product association
      tags:
        - Associations
      parameters:
        - name: id
          in: path
          description: Association Id
          required: true
          type: string
          format: uuid
        - name: version
          in: query
          description: Version
          required: true
          type: integer
          minimum: 0
      responses:
        204:
          description: Association deleted
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /sepasct:
    post:
      summary: Create organisation association for sepa sct
      tags:
        - Associations
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: creation request
          in: body
          schema:
            $ref: "#/definitions/SepaSctAssociationCreation"
      responses:
        201:
          description: creation response
          schema:
            $ref: "#/definitions/SepaSctAssociationCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    get:
      summary: List all organisation sepa sct associations
      tags:
        - Associations
      parameters:
        - name: filter[organisation_id]
          in: query
          description: Organisation id
          required: false
          type: array
          items:
            type: string
            format: uuid
      responses:
        200:
          description: List of associations
          schema:
            $ref: "#/definitions/SepaSctAssociationDetailsListResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /sepasct/{id}:
    get:
      summary: Fetch organisation sepa sct association
      tags:
        - Associations
      parameters:
        - name: id
          in: path
          description: Association Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Associations details
          schema:
            $ref: "#/definitions/SepaSctAssociationDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    delete:
      summary: Delete organisation spea sct association
      tags:
        - Associations
      parameters:
        - name: id
          in: path
          description: Association Id
          required: true
          type: string
          format: uuid
        - name: version
          in: query
          description: Version
          required: true
          type: integer
          minimum: 0
      responses:
        204:
          description: Association deleted
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /gocardless:
    post:
      summary: Create organisation association for GoCardless gateway
      tags:
        - Associations
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: creation request
          in: body
          schema:
            $ref: "#/definitions/GocardlessAssociationCreation"
      responses:
        201:
          description: creation response
          schema:
            $ref: "#/definitions/GocardlessAssociationCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    get:
      summary: List all organisation gocardless gateway associations
      tags:
        - Associations
      parameters:
        - name: filter[organisation_id]
          in: query
          description: Organisation id
          required: false
          type: array
          items:
            type: string
            format: uuid
      responses:
        200:
          description: List of gocardless associations
          schema:
            $ref: "#/definitions/GocardlessAssociationListResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /gocardless/{id}:
    get:
      summary: Fetch organisation gocardless gateway association
      tags:
        - Associations
      parameters:
        - name: id
          in: path
          description: Association Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Associations details
          schema:
            $ref: "#/definitions/GocardlessAssociationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    delete:
      summary: Delete gocardless gateway association
      tags:
        - Associations
      parameters:
        - name: id
          in: path
          description: Association Id
          required: true
          type: string
          format: uuid
        - name: version
          in: query
          description: Version
          required: true
          type: integer
          minimum: 0
      responses:
        204:
          description: association deleted successfully
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    patch:
      summary: Patch GoCardless association by id
      tags:
        - Associations
      parameters:
        - name: id
          in: path
          description: Association Id
          required: true
          type: string
          format: uuid
        - name: version
          in: query
          description: Version
          required: true
          type: integer
          minimum: 0
        - name: patchBody
          in: body
          schema:
            $ref: "#/definitions/GocardlessAssociationAmendment"
      responses:
        200:
          description: Association updated successfully
          schema:
            $ref: "#/definitions/GocardlessAssociationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /sepainstant:
    post:
      summary: Create organisation association for sepa instant
      x-access:
        - Private
      tags:
        - Associations
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: creation request
          in: body
          schema:
            $ref: "#/definitions/SepaInstantAssociationCreation"

      responses:
        201:
          description: creation response
          schema:
            $ref: "#/definitions/SepaInstantAssociationCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    get:
      summary: List all organisation sepa instant associations
      x-access:
        - Private
      tags:
        - Associations
      parameters:
        - name: filter[organisation_id]
          in: query
          description: Organisation id
          required: false
          type: array
          items:
            type: string
            format: uuid

      responses:
        200:
          description: List of associations
          schema:
            $ref: "#/definitions/SepaInstantAssociationDetailsListResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /sepainstant/{id}:
    get:
      summary: Fetch organisation sepa instant association
      x-access:
        - Private
      tags:
        - Associations
      parameters:
        - name: id
          in: path
          description: Association Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Associations details
          schema:
            $ref: "#/definitions/SepaInstantAssociationDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    patch:
      summary: Update sepa instant association
      x-access:
        - Private
      tags:
        - Associations
      parameters:
        - name: id
          in: path
          description: Association Id
          required: true
          type: string
          format: uuid
        - name: version
          in: query
          description: Version
          required: true
          type: integer
          minimum: 0
        - name: payload
          in: body
          description: Association Patch payload
          required: true
          schema:
            $ref: "#/definitions/SepaInstantAssociationPatch"
      responses:
        200:
          description: Associations details
          schema:
            $ref: "#/definitions/SepaInstantAssociationDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    delete:
      summary: Delete organisation spea instant association
      x-access:
        - Private
      tags:
        - Associations
      parameters:
        - name: id
          in: path
          description: Association Id
          required: true
          type: string
          format: uuid
        - name: version
          in: query
          description: Version
          required: true
          type: integer
          minimum: 0
      responses:
        204:
          description: Association deleted
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  #paymentapi - start
  /payments:
    post:
      summary: Create payment
      tags:
        - Payments
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: Payment creation request
          in: body
          schema:
            $ref: "#/definitions/PaymentCreation"

      responses:
        201:
          description: Payment creation response
          schema:
            $ref: "#/definitions/PaymentCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    get:
      summary: List payments
      tags:
        - Payments
      x-access:
        - Public
      parameters:
        - name: page[number]
          in: query
          description: Which page to select
          required: false
          type: string
          minimum: 0
          pattern: "$[A-z0-9]{4}^"
        - name: page[size]
          in: query
          description: Number of items to select
          required: false
          type: integer
          minimum: 0
          maximum: 1000
        - name: filter[organisation_id]
          in: query
          description: Filter by organisation id
          required: false
          type: array
          items:
            type: string
            format: uuid
        - name: filter[debtor_party.account_number]
          in: query
          required: false
          type: string
        - name: filter[debtor_party.bank_id]
          in: query
          required: false
          type: string
        - name: filter[beneficiary_party.account_number]
          in: query
          required: false
          type: string
        - name: filter[beneficiary_party.bank_id]
          in: query
          required: false
          type: string
        - name: filter[currency]
          in: query
          required: false
          type: string
        - name: filter[scheme_transaction_id]
          in: query
          required: false
          type: string
        - name: filter[payment_scheme]
          in: query
          required: false
          type: string
        - name: filter[payment_type]
          in: query
          required: false
          type: string
        - name: filter[processing_date_from]
          in: query
          required: false
          type: string
          format: date
        - name: filter[processing_date_to]
          in: query
          required: false
          type: string
          format: date
        - name: filter[unique_scheme_id]
          in: query
          required: false
          type: string
        - name: filter[amount]
          in: query
          required: false
          type: string
        - name: filter[reference]
          in: query
          required: false
          type: string
        - name: filter[submission.submission_date_from]
          in: query
          required: false
          type: string
          format: date-time
        - name: filter[submission.submission_date_to]
          in: query
          required: false
          type: string
          format: date-time
        - name: filter[submission.status]
          in: query
          description: Filter by submission status
          required: false
          type: string
        - name: filter[submission.scheme_status_code]
          description: Filter by submission scheme status code
          in: query
          required: false
          type: string
        - name: filter[admission.admission_date_from]
          in: query
          required: false
          type: string
          format: date-time
        - name: filter[admission.admission_date_to]
          in: query
          required: false
          type: string
          format: date-time
        - name: filter[admission.status]
          in: query
          description: Filter by admission status
          required: false
          type: string
        - name: filter[admission.scheme_status_code]
          description: Filter by admission scheme status code
          in: query
          required: false
          type: string

      responses:
        200:
          description: List of payment details
          schema:
            $ref: "#/definitions/PaymentDetailsListResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /payments/{id}/admissions:
    post:
      summary: create admission
      tags:
        - Payments
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: id
          in: path
          description: Payment Id
          required: true
          type: string
          format: uuid
        - name: Admission creation request
          in: body
          schema:
            $ref: "#/definitions/PaymentAdmissionCreation"

      responses:
        201:
          description: Admission creation response
          schema:
            $ref: "#/definitions/PaymentAdmissionCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /payments/{id}/admissions/{admissionId}:
    get:
      summary: Fetch admission
      tags:
        - Payments
      parameters:
        - name: id
          in: path
          description: Payment Id
          required: true
          type: string
          format: uuid
        - name: admissionId
          in: path
          description: Admission Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Admission details
          schema:
            $ref: "#/definitions/PaymentAdmissionDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /payments/{id}/submissions:
    post:
      summary: create submission
      tags:
        - Payments
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: id
          in: path
          description: Payment Id
          required: true
          type: string
          format: uuid
        - name: Submission creation request
          in: body
          schema:
            $ref: "#/definitions/PaymentSubmissionCreation"

      responses:
        201:
          description: Submission creation response
          schema:
            $ref: "#/definitions/PaymentSubmissionCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /payments/{id}/submissions/{submissionId}:
    get:
      summary: Fetch submission
      tags:
        - Payments
      parameters:
        - name: id
          in: path
          description: Payment Id
          required: true
          type: string
          format: uuid
        - name: submissionId
          in: path
          description: Submission Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Submission details
          schema:
            $ref: "#/definitions/PaymentSubmissionDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    patch:
      summary: Update submission
      tags:
        - Payments
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: id
          in: path
          description: Payment Id
          required: true
          type: string
          format: uuid
        - name: submissionId
          in: path
          description: Submission Id
          required: true
          type: string
          format: uuid
        - name: Submission update request
          in: body
          schema:
            $ref: "#/definitions/PaymentSubmissionAmendment"

      responses:
        200:
          description: Submission update response
          schema:
            $ref: "#/definitions/PaymentSubmissionDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /payments/{id}/submissions/{submissionId}/validations:
    post:
      summary: Create payment submission validation
      tags:
        - Payments
      parameters:
        - name: id
          in: path
          description: Payment Id
          required: true
          type: string
          format: uuid
        - name: submissionId
          in: path
          description: Submission Id
          required: true
          type: string
          format: uuid
        - name: Payment submission validation request
          in: body
          schema:
            $ref: "#/definitions/PaymentSubmissionValidationCreation"
      responses:
        201:
          description: Payment submission validation creation response
          schema:
            $ref: "#/definitions/PaymentSubmissionValidationCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /payments/{id}/returns:
    post:
      summary: Create return
      tags:
        - Payments
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: id
          in: path
          description: Payment Id
          required: true
          type: string
          format: uuid
        - name: Return creation request
          in: body
          schema:
            $ref: "#/definitions/ReturnCreation"

      responses:
        201:
          description: Return creation response
          schema:
            $ref: "#/definitions/ReturnCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /payments/{id}/returns/{returnId}:
    get:
      summary: Fetch return
      tags:
        - Payments
      parameters:
        - name: id
          in: path
          description: Payment Id
          required: true
          type: string
          format: uuid
        - name: returnId
          in: path
          description: Return Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Return details
          schema:
            $ref: "#/definitions/ReturnDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /payments/{id}/returns/{returnId}/admissions:
    post:
      summary: create return admission
      tags:
        - Payments
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: id
          in: path
          description: Payment Id
          required: true
          type: string
          format: uuid
        - name: returnId
          in: path
          description: Return Id
          required: true
          type: string
          format: uuid
        - name: Return admission creation request
          in: body
          schema:
            $ref: "#/definitions/ReturnAdmissionCreation"

      responses:
        201:
          description: Return admission creation response
          schema:
            $ref: "#/definitions/ReturnAdmissionCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /payments/{id}/returns/{returnId}/admissions/{admissionId}:
    get:
      summary: Fetch return admission
      tags:
        - Payments
      parameters:
        - name: id
          in: path
          description: Payment Id
          required: true
          type: string
          format: uuid
        - name: returnId
          in: path
          description: Return Id
          required: true
          type: string
          format: uuid
        - name: admissionId
          in: path
          description: Admission Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Return admission details
          schema:
            $ref: "#/definitions/ReturnAdmissionDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /payments/{id}/returns/{returnId}/submissions:
    post:
      summary: create return submission
      tags:
        - Payments
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: id
          in: path
          description: Payment Id
          required: true
          type: string
          format: uuid
        - name: returnId
          in: path
          description: Return Id
          required: true
          type: string
          format: uuid
        - name: Return submission creation request
          in: body
          schema:
            $ref: "#/definitions/ReturnSubmissionCreation"

      responses:
        201:
          description: Return submission creation response
          schema:
            $ref: "#/definitions/ReturnSubmissionCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /payments/{id}/returns/{returnId}/submissions/{submissionId}:
    get:
      summary: Fetch return submission
      tags:
        - Payments
      parameters:
        - name: id
          in: path
          description: Payment Id
          required: true
          type: string
          format: uuid
        - name: returnId
          in: path
          description: Return Id
          required: true
          type: string
          format: uuid
        - name: submissionId
          in: path
          description: Submission Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Return submission details
          schema:
            $ref: "#/definitions/ReturnSubmissionDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    patch:
      summary: Update return submission
      tags:
        - Payments
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: id
          in: path
          description: Payment Id
          required: true
          type: string
          format: uuid
        - name: returnId
          in: path
          description: Return Id
          required: true
          type: string
          format: uuid
        - name: submissionId
          in: path
          description: Submission Id
          required: true
          type: string
          format: uuid
        - name: Return submission update request
          in: body
          schema:
            $ref: "#/definitions/ReturnSubmissionAmendment"

      responses:
        200:
          description: Return submission update response
          schema:
            $ref: "#/definitions/ReturnSubmissionDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  ? /payments/{id}/returns/{returnId}/submissions/{returnSubmissionId}/validations
  : post:
      summary: Create return submission validation
      tags:
        - Payments
      parameters:
        - name: id
          in: path
          description: Payment Id
          required: true
          type: string
          format: uuid
        - name: returnId
          in: path
          description: Return Id
          required: true
          type: string
          format: uuid
        - name: returnSubmissionId
          in: path
          description: Return Submission Id
          required: true
          type: string
          format: uuid
        - name: Return submission validation request
          in: body
          schema:
            $ref: "#/definitions/ReturnSubmissionValidationCreation"
      responses:
        201:
          description: Return submission validation creation response
          schema:
            $ref: "#/definitions/ReturnSubmissionValidationCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /payments/{id}/returns/{returnId}/reversals:
    post:
      summary: Create return reversal
      tags:
        - Payments
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: id
          in: path
          description: Payment Id
          required: true
          type: string
          format: uuid
        - name: returnId
          in: path
          description: Return Id
          required: true
          type: string
          format: uuid
        - name: Return reversal creation request
          in: body
          schema:
            $ref: "#/definitions/ReturnReversalCreation"

      responses:
        201:
          description: Reversal creation response
          schema:
            $ref: "#/definitions/ReturnReversalCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /payments/{id}/returns/{returnId}/reversals/{reversalId}:
    get:
      summary: Fetch return reversal
      tags:
        - Payments
      parameters:
        - name: id
          in: path
          description: Payment Id
          required: true
          type: string
          format: uuid
        - name: returnId
          in: path
          description: Return Id
          required: true
          type: string
          format: uuid
        - name: reversalId
          in: path
          description: Reversal Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Return reversal details
          schema:
            $ref: "#/definitions/ReturnReversalDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /payments/{id}/returns/{returnId}/reversals/{reversalId}/admissions:
    post:
      summary: create return reversal admission
      tags:
        - Payments
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: id
          in: path
          description: Payment Id
          required: true
          type: string
          format: uuid
        - name: returnId
          in: path
          description: Return Id
          required: true
          type: string
          format: uuid
        - name: reversalId
          in: path
          description: Reversal Id
          required: true
          type: string
          format: uuid
        - name: Return reversal admission creation request
          in: body
          schema:
            $ref: "#/definitions/ReturnReversalAdmissionCreation"

      responses:
        201:
          description: Return reversal admission creation response
          schema:
            $ref: "#/definitions/ReturnReversalAdmissionCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  ? /payments/{id}/returns/{returnId}/reversals/{reversalId}/admissions/{admissionId}
  : get:
      summary: Fetch return reversal admission
      tags:
        - Payments
      parameters:
        - name: id
          in: path
          description: Payment Id
          required: true
          type: string
          format: uuid
        - name: returnId
          in: path
          description: Return Id
          required: true
          type: string
          format: uuid
        - name: reversalId
          in: path
          description: Reversal Id
          required: true
          type: string
          format: uuid
        - name: admissionId
          in: path
          description: Admission Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Return reversal admission details
          schema:
            $ref: "#/definitions/ReturnReversalAdmissionDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /payments/{id}/reversals:
    post:
      summary: Create reversal
      tags:
        - Payments
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: id
          in: path
          description: Payment Id
          required: true
          type: string
          format: uuid
        - name: Reversal creation request
          in: body
          schema:
            $ref: "#/definitions/ReversalCreation"

      responses:
        201:
          description: Reversal creation response
          schema:
            $ref: "#/definitions/ReversalCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /payments/{id}/reversals/{reversalId}:
    get:
      summary: Fetch reversal
      tags:
        - Payments
      parameters:
        - name: id
          in: path
          description: Payment Id
          required: true
          type: string
          format: uuid
        - name: reversalId
          in: path
          description: Reversal Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Reversal details
          schema:
            $ref: "#/definitions/ReversalDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /payments/{id}/reversals/{reversalId}/admissions:
    post:
      summary: create reversal admission
      tags:
        - Payments
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: id
          in: path
          description: Payment Id
          required: true
          type: string
          format: uuid
        - name: reversalId
          in: path
          description: Reversal Id
          required: true
          type: string
          format: uuid
        - name: Reversal admission creation request
          in: body
          schema:
            $ref: "#/definitions/ReversalAdmissionCreation"

      responses:
        201:
          description: Reversal admission creation response
          schema:
            $ref: "#/definitions/ReversalAdmissionCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /payments/{id}/reversals/{reversalId}/admissions/{admissionId}:
    get:
      summary: Fetch reversal admission
      tags:
        - Payments
      parameters:
        - name: id
          in: path
          description: Payment Id
          required: true
          type: string
          format: uuid
        - name: reversalId
          in: path
          description: Reversal Id
          required: true
          type: string
          format: uuid
        - name: admissionId
          in: path
          description: Admission Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Reversal admission details
          schema:
            $ref: "#/definitions/ReversalAdmissionDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /positions:
    get:
      summary: List Positions
      tags:
        - Payments
      responses:
        200:
          description: List of position details
          schema:
            $ref: "#/definitions/PositionDetailsListResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /paymentdefaults:
    post:
      summary: Create the default settings for a payment
      tags:
        - PaymentDefaults
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: Default configuration
          in: body
          schema:
            $ref: "#/definitions/PaymentDefaultsCreate"
      responses:
        201:
          description: Default settings created
          schema:
            $ref: "#/definitions/PaymentDefaultsCreateResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    get:
      summary: List default settings for payments
      tags:
        - PaymentDefaults
      parameters:
        - name: page[number]
          in: query
          description: Which page to select
          required: false
          type: string
          minimum: 0
          pattern: "$[A-z0-9]{4}^"
        - name: page[size]
          in: query
          description: Number of items to select
          required: false
          type: integer
          minimum: 0
          maximum: 1000
        - name: filter[organisation_id]
          in: query
          description: Filter by organisation id
          required: false
          type: array
          items:
            type: string
            format: uuid
          collectionFormat: csv
      responses:
        200:
          description: List of payment defaults
          schema:
            $ref: "#/definitions/PaymentDefaultsListResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /paymentdefaults/{id}:
    get:
      summary: Fetch payment defaults
      tags:
        - PaymentDefaults
      parameters:
        - name: id
          in: path
          description: Payment defaults Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Payment default details
          schema:
            $ref: "#/definitions/PaymentDefaultsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    patch:
      summary: Update payment defaults
      tags:
        - PaymentDefaults
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: id
          in: path
          description: Payment defaults Id
          required: true
          type: string
          format: uuid
        - name: Defaults update request
          in: body
          schema:
            $ref: "#/definitions/PaymentDefaultsAmendment"
      responses:
        200:
          description: Defaults update response
          schema:
            $ref: "#/definitions/PaymentDefaultsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    delete:
      summary: Delete payment defaults
      tags:
        - PaymentDefaults
      parameters:
        - name: id
          in: path
          description: Limit Id
          required: true
          type: string
          format: uuid
        - name: version
          in: query
          description: Version
          required: true
          type: integer
          minimum: 0
      responses:
        204:
          description: Payment defaults deleted
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"
  #paymentapi - end

  #directdebit-api - start

  /directdebits:
    get:
      summary: List direct debits
      tags:
        - DirectDebits
      x-access:
        - Public
      parameters:
        - name: page[number]
          in: query
          description: Which page to select
          required: false
          type: string
          minimum: 0
          pattern: "$[A-z0-9]{4}^"
        - name: page[size]
          in: query
          description: Number of items to select
          required: false
          type: integer
          minimum: 0
          maximum: 1000
        - name: filter[organisation_id]
          in: query
          description: Filter by organisation id
          required: false
          type: array
          items:
            type: string
            format: uuid
        - name: filter[debtor_party.account_number]
          in: query
          required: false
          type: string
        - name: filter[debtor_party.bank_id]
          in: query
          required: false
          type: string
        - name: filter[beneficiary_party.account_number]
          in: query
          required: false
          type: string
        - name: filter[beneficiary_party.bank_id]
          in: query
          required: false
          type: string
        - name: filter[currency]
          in: query
          required: false
          type: string
        - name: filter[payment_scheme]
          in: query
          required: false
          type: string
        - name: filter[payment_type]
          in: query
          required: false
          type: string
        - name: filter[processing_date_from]
          in: query
          required: false
          type: string
          format: date
        - name: filter[processing_date_to]
          in: query
          required: false
          type: string
          format: date
        - name: filter[clearing_id]
          in: query
          required: false
          type: string
        - name: filter[admission.admission_date_from]
          in: query
          required: false
          type: string
          format: date-time
        - name: filter[admission.admission_date_to]
          in: query
          required: false
          type: string
          format: date-time
        - name: filter[admission.status]
          in: query
          description: Filter by admission status
          required: false
          type: string
        - name: filter[admission.scheme_status_code]
          description: Filter by admission scheme status code
          in: query
          required: false
          type: string
        - name: filter[amount]
          description: Filter by amount
          in: query
          required: false
          type: string
        - name: filter[reference]
          description: Filter by reference
          in: query
          required: false
          type: string
        - name: filter[unique_scheme_id]
          description: Filter by unique scheme id
          in: query
          required: false
          type: string
      responses:
        200:
          description: List of direct debit details
          schema:
            $ref: "#/definitions/DirectDebitDetailsListResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"
  #directdebit-api - end

  #mandate-api - start

  /mandates:
    get:
      summary: List mandates
      tags:
        - Mandates
      x-access:
        - Public
      parameters:
        - name: page[number]
          in: query
          description: Which page to select
          required: false
          type: string
          minimum: 0
          pattern: "$[A-z0-9]{4}^"
        - name: page[size]
          in: query
          description: Number of items to select
          required: false
          type: integer
          minimum: 0
          maximum: 1000
        - name: filter[organisation_id]
          in: query
          description: Filter by organisation id
          required: false
          type: array
          items:
            type: string
            format: uuid
        - name: filter[debtor_party.account_number]
          in: query
          required: false
          type: string
        - name: filter[debtor_party.bank_id]
          in: query
          required: false
          type: string
        - name: filter[beneficiary_party.account_number]
          in: query
          required: false
          type: string
        - name: filter[beneficiary_party.bank_id]
          in: query
          required: false
          type: string
        - name: filter[currency]
          in: query
          required: false
          type: string
        - name: filter[payment_scheme]
          in: query
          required: false
          type: string
        - name: filter[payment_type]
          in: query
          required: false
          type: string
        - name: filter[processing_date_from]
          in: query
          required: false
          type: string
          format: date
        - name: filter[processing_date_to]
          in: query
          required: false
          type: string
          format: date
        - name: filter[scheme_processing_date_from]
          in: query
          required: false
          type: string
          format: date
        - name: filter[scheme_processing_date_to]
          in: query
          required: false
          type: string
          format: date
        - name: filter[clearing_id]
          in: query
          required: false
          type: string
        - name: filter[admission.admission_date_from]
          in: query
          required: false
          type: string
          format: date-time
        - name: filter[admission.admission_date_to]
          in: query
          required: false
          type: string
          format: date-time
        - name: filter[admission.status]
          in: query
          description: Filter by admission status
          required: false
          type: string
        - name: filter[admission.scheme_status_code]
          description: Filter by admission scheme status code
          in: query
          required: false
          type: string
        - name: filter[amount]
          description: Filter by amount
          in: query
          required: false
          type: string
        - name: filter[reference]
          description: Filter by reference
          in: query
          required: false
          type: string
        - name: filter[unique_scheme_id]
          description: Filter by unique scheme id
          in: query
          required: false
          type: string
        - name: filter[all_versions]
          description: Include old versions of mandates
          in: query
          required: false
          type: boolean
        - name: filter[submission.submission_date_from]
          in: query
          required: false
          type: string
          format: date-time
        - name: filter[submission.submission_date_to]
          in: query
          required: false
          type: string
          format: date-time
      responses:
        200:
          description: List of mandates details
          schema:
            $ref: "#/definitions/MandateDetailsListResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"
  #mandate-api - end

  #public-key - start

  /users/{user_id}/credentials/public_key:
    get:
      summary: Fetch public key credentials
      tags:
        - Users
      x-access:
        - Public
      parameters:
        - name: user_id
          in: path
          description: User Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: List of public keys for user
          schema:
            $ref: "#/definitions/UserPublicKeyListResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    post:
      summary: Generate new public key credential for a user
      tags:
        - Users
      x-access:
        - Public
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: user_id
          in: path
          description: User Id
          required: true
          type: string
          format: uuid
        - in: body
          name: PublicKey
          description: The public key to create.
          schema:
            $ref: "#/definitions/PublicKey"

      responses:
        201:
          description: Signature Credential creation response
          schema:
            $ref: "#/definitions/PublicKeyCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /users/{user_id}/credentials/public_key/{public_key_id}:
    get:
      summary: Fetch public key credential
      tags:
        - Users
      x-access:
        - Public
      parameters:
        - name: user_id
          in: path
          description: User Id
          required: true
          type: string
          format: uuid
        - name: public_key_id
          in: path
          description: public_key_id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Public key data
          schema:
            $ref: "#/definitions/PublicKey"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    delete:
      summary: Delete public key credential for user
      tags:
        - Users
      x-access:
        - Public
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: user_id
          in: path
          description: User Id
          required: true
          type: string
          format: uuid
        - name: public_key_id
          in: path
          description: public_key_id
          required: true
          type: string
          format: uuid
      responses:
        204:
          description: Public key deleted
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"
  #public-key - end

  #credentials-sso - start

  /users/{user_id}/credentials/sso:
    post:
      summary: Create new sso credential for a user
      tags:
        - Users
      x-access:
        - Public
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: user_id
          in: path
          description: User Id
          required: true
          type: string
          format: uuid
        - in: body
          name: SsoUserCreation
          description: The sso user to create.
          schema:
            $ref: "#/definitions/SsoUserCreation"

      responses:
        201:
          description: Sso user created
          schema:
            $ref: "#/definitions/SsoUserCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /users/{user_id}/credentials/sso/{sso_user_id}:
    get:
      summary: Fetch sso credential
      tags:
        - Users
      x-access:
        - Public
      parameters:
        - name: user_id
          in: path
          description: User Id
          required: true
          type: string
          format: uuid
        - name: sso_user_id
          in: path
          description: Sso user id
          required: true
          type: string
      responses:
        200:
          description: Sso user data
          schema:
            $ref: "#/definitions/SsoUserDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    delete:
      summary: Delete sso user credential
      tags:
        - Users
      x-access:
        - Public
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: user_id
          in: path
          description: User Id
          required: true
          type: string
          format: uuid
        - name: sso_user_id
          in: path
          description: Sso user id
          required: true
          type: string
      responses:
        204:
          description: Sso user creadential deleted
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"
  #credentials-sso - end

  #signing_key start
  /platform/security/signing_keys:
    post:
      summary: Create a Signing Key pair
      tags:
        - platformsecurityapi
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - in: body
          name: data
          schema:
            $ref: "#/definitions/SigningKeysCreation"
      responses:
        201:
          description: creation response
          schema:
            $ref: "#/definitions/SigningKeysResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"
  /platform/security/signing_keys/{signingkey_id}:
    get:
      summary: Fetch a Signing Key
      tags:
        - platformsecurityapi
      x-access:
        - Public
      parameters:
        - name: signingkey_id
          in: path
          description: Signing Key ID
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: signing key response
          schema:
            $ref: "#/definitions/SigningKeysResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"
  #signing_key end

  #reconciliation_service start
  /reconciliation:
    post:
      summary: Create organisation association for reconciliation service
      tags:
        - Associations
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: creation request
          in: body
          schema:
            $ref: "#/definitions/ReconciliationAssociationCreation"
      responses:
        201:
          description: creation response
          schema:
            $ref: "#/definitions/ReconciliationAssociationDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"
    get:
      summary: List all organisation reconcilation service associations
      tags:
        - Associations
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: filter[organisation_id]
          in: query
          description: Organisation id
          required: false
          type: array
          items:
            type: string
            format: uuid
      responses:
        200:
          description: List of associations
          schema:
            $ref: "#/definitions/ReconciliationAssociationDetailsListResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"
  /reconciliation/{associationId}:
    parameters:
      - name: associationId
        in: path
        description: Association id
        required: true
        type: string
        format: uuid
    get:
      summary: Fetch organisation reconciliation service association
      tags:
        - Associations
      consumes:
        - application/vnd.api+json
        - application/json
      responses:
        200:
          description: Associations details
          schema:
            $ref: "#/definitions/ReconciliationAssociationDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"
    delete:
      summary: Delete organisation reconciliation service association
      tags:
        - Associations
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: version
          in: query
          description: Version
          required: true
          type: integer
          minimum: 0
      responses:
        204:
          description: Association deleted
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"
  #reconciliation_service stop

  /sepadd:
    post:
      summary: Create organisation association for sepa dd
      tags:
        - Associations
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: creation request
          in: body
          schema:
            $ref: "#/definitions/SepaDDAssociationCreation"
      responses:
        201:
          description: creation response
          schema:
            $ref: "#/definitions/SepaDDAssociationCreationResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    get:
      summary: List all organisation sepa dd associations
      tags:
        - Associations
      parameters:
        - name: filter[organisation_id]
          in: query
          description: Organisation id
          required: false
          type: array
          items:
            type: string
            format: uuid
      responses:
        200:
          description: List of associations
          schema:
            $ref: "#/definitions/SepaDDAssociationDetailsListResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

  /sepadd/{id}:
    get:
      summary: Fetch organisation sepa dd association
      tags:
        - Associations
      parameters:
        - name: id
          in: path
          description: Association Id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Associations details
          schema:
            $ref: "#/definitions/SepaDDAssociationDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    delete:
      summary: Delete organisation spea dd association
      tags:
        - Associations
      parameters:
        - name: id
          in: path
          description: Association Id
          required: true
          type: string
          format: uuid
        - name: version
          in: query
          description: Version
          required: true
          type: integer
          minimum: 0
      responses:
        204:
          description: Association deleted
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

    patch:
      summary: Update organisation association for sepa dd
      tags:
        - Associations
      consumes:
        - application/vnd.api+json
        - application/json
      parameters:
        - name: id
          in: path
          description: Association Id
          required: true
          type: string
          format: uuid
        - name: update request
          in: body
          schema:
            $ref: "#/definitions/SepaDDAssociationPatch"
      responses:
        200:
          description: creation response
          schema:
            $ref: "#/definitions/SepaDDAssociationDetailsResponse"
        400:
          $ref: "#/responses/400BadRequest"
        401:
          $ref: "#/responses/401Unauthorized"
        403:
          $ref: "#/responses/403Forbidden"
        404:
          $ref: "#/responses/404NotFound"
        409:
          $ref: "#/responses/409Conflict"
        429:
          $ref: "#/responses/429TooManyRequests"
        500:
          $ref: "#/responses/500InternalServerError"
        503:
          $ref: "#/responses/503ServiceUnavailable"

definitions:
  ApiError:
    type: object
    additionalProperties: true
    properties:
      error_message:
        type: string
      error_code:
        type: string
        format: uuid

  Links:
    type: object
    properties:
      self:
        type: string
      first:
        type: string
      prev:
        type: string
      next:
        type: string
      last:
        type: string

  Self:
    type: object
    properties:
      self:
        type: string

  RecordCount:
    type: object
    properties:
      count:
        type: integer

  #Ace
  Ace:
    type: object
    properties:
      type:
        type: string
        pattern: ^[A-Za-z]*$
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        type: object
        properties:
          role_id:
            type: string
            format: uuid
          action:
            type: string
            pattern: ^[A-Za-z]*$
          record_type:
            type: string
            pattern: ^[A-Za-z]*$
          filter:
            type: string

  AceDetailsListResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/Ace"
      links:
        $ref: "#/definitions/Links"

  #Versioning, Audit and Approval
  #===

  ApprovalRequest:
    type: object
    properties:
      type:
        type: string
        pattern: ^[A-Za-z]*$
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        type: object
        properties:
          record_type:
            type: string
            pattern: ^[A-Za-z]*$
          record_id:
            type: string
            format: uuid
          record_orgid:
            type: string
            format: uuid
          record_version:
            type: integer
            minimum: 0
          action:
            type: string
            pattern: ^[A-Za-z]*$
          status:
            type: string
            pattern: ^[A-Za-z]*$
          actioned_by:
            type: string
            format: uuid
          action_time:
            type: string
            format: "date-time"
            x-nullable: true
          before_data:
            type: object
          after_data:
            type: object

  ApprovalDetailsListResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/ApprovalRequest"
      links:
        $ref: "#/definitions/Links"

  AuditEntry:
    type: object
    properties:
      type:
        type: string
        pattern: ^[A-Za-z]*$
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        type: object
        properties:
          record_type:
            type: string
            pattern: ^[A-Za-z]*$
          record_id:
            type: string
            format: uuid
          actioned_by:
            type: string
            format: uuid
          action_time:
            type: string
            format: "date-time"
            x-nullable: true
          description:
            type: string
            pattern: ^[A-Za-z0-9 .,@:]*$
          before_data:
            type: object
          after_data:
            type: object

  SubscriptionAttributes:
    type: object
    properties:
      callback_uri:
        type: string
        pattern: ^[A-Za-z0-9 .,@:\/-_]*$
      callback_transport:
        type: string
        enum:
          - http
          - email
          - queue
      user_id:
        type: string
        format: uuid
        readOnly: true
      record_type:
        type: string
        pattern: ^[A-Za-z_-]*$
      event_type:
        type: string
        pattern: ^[A-Za-z_-]*$
      deactivated:
        type: boolean

  #Organisation records
  #===
  #These reflect Form³, customers on the platform, and their subentities
  Organisation:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        $ref: "#/definitions/OrganisationAttributes"

  OrganisationAttributes:
    type: object
    properties:
      name:
        type: string

  OrganisationCreation:
    type: object
    properties:
      data:
        $ref: "#/definitions/Organisation"

  OrganisationUpdate:
    type: object
    properties:
      data:
        $ref: "#/definitions/Organisation"

  OrganisationCreationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/Organisation"
      links:
        $ref: "#/definitions/Links"

  OrganisationDetailsResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/Organisation"
      links:
        $ref: "#/definitions/Links"

  OrganisationDetailsListResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/Organisation"
      links:
        $ref: "#/definitions/Links"

  #Security info
  #===
  #User, role and security entries for individual users on the platform

  #User records
  User:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        type: object
        properties:
          username:
            type: string
            pattern: ^[A-Za-z0-9-+@.]*$
          email:
            type: string
            pattern: ^[A-Za-z0-9-+@.]*$
          role_ids:
            type: array
            items:
              type: string
              format: uuid

  UserCreation:
    type: object
    properties:
      data:
        $ref: "#/definitions/User"

  UserCreationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/User"
      links:
        $ref: "#/definitions/Links"

  UserDetailsResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/User"
      links:
        $ref: "#/definitions/Links"

  UserDetailsListResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/User"
      links:
        $ref: "#/definitions/Links"

  #Roles
  Role:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        $ref: "#/definitions/RoleAttributes"

  RoleAttributes:
    type: object
    properties:
      name:
        type: string
      parent_role_id:
        type: string
        format: uuid
        x-nullable: true

  RoleCreation:
    type: object
    properties:
      data:
        $ref: "#/definitions/Role"

  RoleCreationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/Role"
      links:
        $ref: "#/definitions/Links"

  RoleDetailsResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/Role"
      links:
        $ref: "#/definitions/Links"

  RoleDetailsListResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/Role"
      links:
        $ref: "#/definitions/Links"

  #Credential
  Credential:
    type: object
    properties:
      client_id:
        type: string
        format: uuid

  CredentialSecret:
    type: object
    properties:
      client_id:
        type: string
        format: uuid
      client_secret:
        type: string

  CredentialCreationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/CredentialSecret"
      links:
        $ref: "#/definitions/Links"

  UserCredentialListResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/Credential"
      links:
        $ref: "#/definitions/Links"

  #Ace
  AceCreation:
    type: object
    properties:
      data:
        $ref: "#/definitions/Ace"

  AceCreationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/Ace"
      links:
        $ref: "#/definitions/Links"

  AceDetailsResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/Ace"
      links:
        $ref: "#/definitions/Links"

  UserRoleListResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/Role"
      links:
        $ref: "#/definitions/Links"

  Subscription:
    type: object
    properties:
      type:
        type: string
        pattern: ^[A-Za-z]*$
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      created_on:
        type: string
        format: "date-time"
        x-nullable: true
      modified_on:
        type: string
        format: "date-time"
        x-nullable: true
      attributes:
        $ref: "#/definitions/SubscriptionAttributes"

  SubscriptionCreation:
    type: object
    properties:
      data:
        $ref: "#/definitions/Subscription"

  SubscriptionCreationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/Subscription"
      links:
        $ref: "#/definitions/Links"

  SubscriptionDetailsResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/Subscription"
      links:
        $ref: "#/definitions/Links"

  SubscriptionDetailsListResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/Subscription"
      links:
        $ref: "#/definitions/Links"

  #Organisation->Associations

  Association:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        $ref: "#/definitions/AssociationAttributes"

  NewAssociation:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        $ref: "#/definitions/NewAssociationAttributes"

  NewAssociationAttributes:
    type: object
    properties:
      starling_account_name:
        type: string

  AssociationAttributes:
    type: object
    properties:
      starling_account_uid:
        type: string
        format: uuid
      starling_account_name:
        type: string

  AssociationCreation:
    type: object
    properties:
      data:
        $ref: "#/definitions/NewAssociation"

  AssociationCreationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/Association"
      links:
        $ref: "#/definitions/Links"

  AssociationDetailsResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/Association"
      links:
        $ref: "#/definitions/Links"

  AssociationDetailsListResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/Association"
      links:
        $ref: "#/definitions/Links"
  # account api - start
  Account:
    type: object
    required:
      - id
      - organisation_id
      - attributes
    properties:
      type:
        type: string
        pattern: ^[A-Za-z]*$
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        $ref: "#/definitions/AccountAttributes"

  AccountAttributes:
    type: object
    required:
      - country
    properties:
      country:
        type: string
        pattern: ^[A-Z]{2}$
      base_currency:
        type: string
        pattern: ^[A-Z]{3}$
      bank_id:
        type: string
        pattern: ^[A-Z0-9]{0,16}$
      bank_id_code:
        type: string
        pattern: ^[A-Z]{0,16}$
      account_number:
        type: string
        pattern: ^[A-Z0-9]{0,64}$
      customer_id:
        type: string
        pattern: ^[a-zA-Z0-9-$@., ]{0,256}$
      iban:
        type: string
        pattern: ^[A-Z]{2}[0-9]{2}[A-Z0-9]{0,64}$
      bic:
        type: string
        pattern: ^([A-Z]{6}[A-Z0-9]{2}|[A-Z]{6}[A-Z0-9]{5})$

  AccountRouting:
    type: object
    x-access:
      - Public
    required:
      - id
      - organisation_id
      - attributes
    properties:
      type:
        type: string
        pattern: ^[A-Za-z_]*$
        description: "Name of the resource type"
        example: "account_routings"
      id:
        type: string
        format: uuid
        example: "7826c3cb-d6fd-41d0-b187-dc23ba928772"
        description: "Unique resource ID"
      version:
        type: integer
        minimum: 0
        description: "Version number"
        example: 0
      organisation_id:
        type: string
        format: uuid
        example: "ee2fb143-6dfe-4787-b183-ca8ddd4164d2"
        description: "Unique ID of the organisation this resource is created by"
      attributes:
        $ref: "#/definitions/AccountRoutingAttributes"

  AccountRoutingAttributes:
    type: object
    x-access:
      - Public
    required:
      - match
      - priority
      - account_generator
      - account_provisioner
    properties:
      match:
        type: string
      priority:
        type: integer
        description: "highest that match is selected first. Must be greater or equal than 0"
        example: 0
      account_generator:
        type: string
        description: "Service name used to generate the account number"
        example: "accountapi"
        enum:
          - accountapi
          - lhv-gateway
      account_provisioner:
        type: string
        description: "Service name used to provision the account"
        example: "accountapi"
        enum:
          - accountapi
          - lhv-gateway
          - starlinggateway

  AccountRoutingDetailsListResponse:
    type: object
    x-access:
      - Public
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/AccountRouting"
      links:
        $ref: "#/definitions/Links"

  AccountRoutingCreation:
    type: object
    x-access:
      - Public
    properties:
      data:
        $ref: "#/definitions/AccountRouting"

  AccountRoutingDetailsResponse:
    type: object
    x-access:
      - Public
    properties:
      data:
        $ref: "#/definitions/AccountRouting"
      links:
        $ref: "#/definitions/Links"

  AccountCreation:
    type: object
    properties:
      data:
        $ref: "#/definitions/Account"

  AccountCreationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/Account"
      links:
        $ref: "#/definitions/Links"

  AccountRoutingCreationResponse:
    type: object
    x-access:
      - Public
    properties:
      data:
        $ref: "#/definitions/AccountRouting"
      links:
        $ref: "#/definitions/Links"

  AccountDetailsResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/Account"
      links:
        $ref: "#/definitions/Links"

  AccountDetailsListResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/Account"
      links:
        $ref: "#/definitions/Links"

  BankId:
    type: object
    properties:
      type:
        type: string
        pattern: ^[A-Za-z]*$
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        $ref: "#/definitions/BankIdAttributes"

  BankIdAttributes:
    type: object
    properties:
      country:
        type: string
        pattern: ^[A-Z]{2}$
      bank_id:
        type: string
        pattern: ^[A-Z0-9]{0,16}$
      bank_id_code:
        type: string
        pattern: ^[A-Z]{0,16}$

  BankIdCreation:
    type: object
    properties:
      data:
        $ref: "#/definitions/BankId"

  BankIdCreationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/BankId"
      links:
        $ref: "#/definitions/Links"

  BankIdDetailsResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/BankId"
      links:
        $ref: "#/definitions/Links"

  BankIdDetailsListResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/BankId"
      links:
        $ref: "#/definitions/Links"

  Bic:
    type: object
    properties:
      type:
        type: string
        pattern: ^[A-Za-z]*$
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        $ref: "#/definitions/BicAttributes"

  BicAttributes:
    type: object
    properties:
      bic:
        type: string
        pattern: ^([A-Z]{6}[A-Z0-9]{2}|[A-Z]{6}[A-Z0-9]{5})$

  BicCreation:
    type: object
    properties:
      data:
        $ref: "#/definitions/Bic"

  BicCreationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/Bic"
      links:
        $ref: "#/definitions/Links"

  BicDetailsResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/Bic"
      links:
        $ref: "#/definitions/Links"

  BicDetailsListResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/Bic"
      links:
        $ref: "#/definitions/Links"

  AccountConfiguration:
    type: object
    properties:
      type:
        type: string
        pattern: ^account_configurations$
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        $ref: "#/definitions/AccountConfigurationAttributes"

  AccountConfigurationAttributes:
    type: object
    properties:
      account_generation_enabled:
        type: boolean
      account_generation_configuration:
        type: array
        items:
          type: object
          $ref: "#/definitions/AccountGenerationConfiguration"

  AccountGenerationConfiguration:
    type: object
    properties:
      country:
        type: string
      mod_check_enabled:
        type: boolean
        x-nullable: true
      bank_id:
        type: string
      bic:
        type: string
      base_currency:
        type: string
      valid_account_ranges:
        type: array
        items:
          $ref: "#/definitions/AccountGenerationConfigurationValidAccountRangesItems"

  AccountGenerationConfigurationValidAccountRangesItems:
    type: object
    properties:
      minimum:
        type: integer
        format: int64
      maximum:
        type: integer
        format: int64

  AccountConfigurationCreation:
    type: object
    properties:
      data:
        $ref: "#/definitions/AccountConfiguration"

  AccountConfigurationCreationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/AccountConfiguration"
      links:
        $ref: "#/definitions/Links"

  AccountConfigurationDetailsResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/AccountConfiguration"
      links:
        $ref: "#/definitions/Links"

  AccountConfigurationDetailsListResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/AccountConfiguration"
      links:
        $ref: "#/definitions/Links"

  ConfigurationAmendment:
    type: object
    properties:
      data:
        $ref: "#/definitions/AccountConfiguration"
  # account api - end

  PayportAssociation:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        $ref: "#/definitions/PayportAssociationAttributes"

  PayportAssociationAttributes:
    type: object
    properties:
      participant_id:
        type: string
      participant_type:
        $ref: "#/definitions/PayportParticipantType"
      customer_sending_fps_institution:
        type: string
      sponsor_bank_id:
        type: string
      sponsor_account_number:
        type: string

  PayportParticipantType:
    type: string
    enum:
      - settling
      - non_settling

  PayportAssociationCreation:
    type: object
    properties:
      data:
        $ref: "#/definitions/PayportAssociation"

  PayportAssociationCreationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/PayportAssociation"
      links:
        $ref: "#/definitions/Links"

  PayportAssociationDetailsResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/PayportAssociation"
      links:
        $ref: "#/definitions/Links"

  PayportAssociationDetailsListResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/PayportAssociation"
      links:
        $ref: "#/definitions/Links"

  ResourceType:
    type: string
    enum:
      - payport_associations
      - limits
      - bacs_associations
      - confirmation_of_payee_associations
      - sepadd_associations

  LimitCreation:
    type: object
    properties:
      data:
        $ref: "#/definitions/Limit"

  LimitCreationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/Limit"

  LimitDetailsListResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/Limit"
      links:
        $ref: "#/definitions/Links"
      meta:
        $ref: "#/definitions/RecordCount"

  LimitDetailsResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/Limit"

  LimitAmendment:
    type: object
    properties:
      data:
        $ref: "#/definitions/Limit"

  Limit:
    type: object
    properties:
      type:
        type: string
        pattern: ^[A-Za-z_]*$
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        type: object
        properties:
          gateway:
            type: string
            pattern: ^[A-Za-z_\-]*$
          scheme:
            type: string
            pattern: ^[A-Za-z_\-]*$
          amount:
            type: string
            pattern: ^[0-9.]{0,20}$
          settlement_cycle_type:
            $ref: "#/definitions/SettlementCycleType"

  SettlementCycleType:
    type: string
    enum:
      - daily
      - per_scheme

  BacsAssociation:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        $ref: "#/definitions/BacsAssociationAttributes"
      relationships:
        $ref: "#/definitions/BacsAssociationRelationships"

  BacsNewAssociation:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        $ref: "#/definitions/BacsAssociationAttributes"
      relationships:
        $ref: "#/definitions/BacsAssociationRelationships"

  BacsAssociationAttributes:
    type: object
    properties:
      service_user_number:
        type: string
        pattern: ^[0-9A-Z]{6}$
      account_number:
        type: string
        pattern: ^[0-9]{8}$
      sorting_code:
        type: string
        pattern: ^[0-9]{6}$
      account_type:
        type: integer
        x-nullable: true
      bank_code:
        type: string
        pattern: ^[0-9A-Z]{4}$
      centre_number:
        type: string
        pattern: ^[0-9A-Z]{2}$
      test_file_submission:
        x-nullable: true
        type: boolean
      allowed_service_user_numbers:
        type: array
        items:
          $ref: '#/definitions/BacsAllowedServiceUserNumber'

  BacsAllowedServiceUserNumber:
    type: object
    properties:
      service_user_number:
        type: string
        pattern: ^[0-9A-Z]{6}$
      sorting_code:
        type: string
        pattern: ^[0-9]{0,6}$

  BacsAssociationRelationships:
    type: object
    properties:
      input_certificate:
        $ref: "#/definitions/BacsAssociationCertificateRelationship"
      output_certificate:
        $ref: "#/definitions/BacsAssociationCertificateRelationship"
      messaging_certificate:
        $ref: "#/definitions/BacsAssociationCertificateRelationship"

  BacsAssociationCertificateRelationship:
    type: object
    properties:
      data:
        type: object
        properties:
          type:
            type: string
          key_id:
            type: string
            format: uuid
          certificate_id:
            type: string
            format: uuid
          tsu_number:
            type: string
            pattern: ^[0-9A-Z]{6}$

  BacsAssociationCreation:
    type: object
    properties:
      data:
        $ref: "#/definitions/BacsNewAssociation"

  BacsAssociationCreationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/BacsAssociation"
      links:
        $ref: "#/definitions/Links"

  BacsAssociationDetailsResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/BacsAssociation"
      links:
        $ref: "#/definitions/Links"

  BacsAssociationDetailsListResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/BacsAssociation"
      links:
        $ref: "#/definitions/Links"

  VocalinkReportAssociation:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        $ref: "#/definitions/VocalinkReportAssociationAttributes"
      relationships:
        $ref: "#/definitions/VocalinkReportAssociationRelationships"

  NewVocalinkReportAssociation:
    type: object
    required:
      - id
      - organisation_id
      - relationships
    properties:
      type:
        type: string
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        $ref: "#/definitions/VocalinkReportAssociationAttributes"
      relationships:
        $ref: "#/definitions/VocalinkReportAssociationRelationships"

  VocalinkReportAssociationRelationships:
    type: object
    properties:
      bacs_member_certificate:
        $ref: "#/definitions/VocalinkReportAssociationCertificateRelationship"
      bacs_service_user_certificate:
        $ref: "#/definitions/VocalinkReportAssociationCertificateRelationship"
      fps_member_certificate:
        $ref: "#/definitions/VocalinkReportAssociationCertificateRelationship"

  VocalinkReportAssociationCertificateRelationship:
    type: object
    properties:
      data:
        type: object
        properties:
          type:
            type: string
          key_id:
            type: string
            format: uuid
          certificate_id:
            type: string
            format: uuid

  VocalinkReportAssociationAttributes:
    type: object
    properties:
      bacs_service_user_number:
        type: string

  VocalinkReportAssociationCreation:
    type: object
    properties:
      data:
        $ref: "#/definitions/NewVocalinkReportAssociation"

  VocalinkReportAssociationCreationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/VocalinkReportAssociation"
      links:
        $ref: "#/definitions/Links"

  VocalinkReportAssociationDetailsResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/VocalinkReportAssociation"
      links:
        $ref: "#/definitions/Links"

  VocalinkReportAssociationDetailsListResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/VocalinkReportAssociation"
      links:
        $ref: "#/definitions/Links"

  KeyCreation:
    type: object
    properties:
      data:
        $ref: "#/definitions/Key"

  KeyCreationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/Key"
      links:
        $ref: "#/definitions/Links"

  KeyDetailsResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/Key"
      links:
        $ref: "#/definitions/Links"

  KeyDetailsListResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/Key"
      links:
        $ref: "#/definitions/Links"

  Key:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        $ref: "#/definitions/KeyAttributes"

  KeyType:
    type: string
    enum: &KeyType
      - RSA
      - EC
      - AES
      - 3DES

  CurveType:
    type: string
    enum: &CurveType
      - PRIME256V1
      - SECP256R1
      - SECP384R1
      - SECP256K1

  KeyAttributes:
    type: object
    properties:
      type:
        type: string
        enum: *KeyType
        default: RSA
      curve:
        type: string
        enum: *CurveType
      subject:
        type: string
      private_key:
        type: string
      public_key:
        type: string
      description:
        type: string
      certificate_signing_request:
        type: string

  CertificateCreation:
    type: object
    properties:
      data:
        $ref: "#/definitions/Certificate"

  CertificateCreationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/Certificate"
      links:
        $ref: "#/definitions/Links"

  CertificateDetailsResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/Certificate"
      links:
        $ref: "#/definitions/Links"

  CertificateDetailsListResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/Certificate"
      links:
        $ref: "#/definitions/Links"

  Certificate:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        $ref: "#/definitions/CertificateAttributes"

  CertificateAttributes:
    type: object
    required:
      - certificate
    properties:
      certificate:
        type: string
      subject:
        type: string
      issuing_certificates:
        type: array
        items:
          type: string
      expires:
        type: string
        format: date-time

  SepaInstantAssociation:
    type: object
    x-access:
      - Private
    properties:
      type:
        type: string
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        $ref: "#/definitions/SepaInstantAssociationAttributes"
      relationships:
        $ref: "#/definitions/SepaInstantAssociationRelationships"

  NewSepaInstantAssociation:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        $ref: "#/definitions/SepaInstantAssociationAttributes"
      relationships:
        $ref: "#/definitions/SepaInstantAssociationRelationships"

  UpdateSepaInstantAssociation:
    type: object
    required:
      - id
      - type
      - organisation_id
      - attributes
    properties:
      id:
        type: string
        format: uuid
        x-nullable: false
      type:
        type: string
        enum:
          - sepainstant_associations
        x-nullable: false
      version:
        type: integer
        minimum: 0
        x-nullable: false
      organisation_id:
        type: string
        format: uuid
        x-nullable: false
      attributes:
        $ref: "#/definitions/UpdateSepaInstantAssociationAttributes"

  SepaInstantAssociationAttributes:
    type: object
    x-access:
      - Private
    properties:
      business_user_dn:
        type: string
      transport_profile_id:
        type: string
      bic:
        type: string
      simulator_only:
        x-nullable: true
        type: boolean
      disable_outbound_payments:
        x-nullable: true
        type: boolean

  UpdateSepaInstantAssociationAttributes:
    properties:
      disable_outbound_payments:
        x-nullable: true
        type: boolean

  SepaInstantAssociationRelationships:
    type: object
    x-nullable: true
    properties:
      sponsor:
        type: object
        x-nullable: false
        properties:
          data:
            $ref: "#/definitions/SepaInstantAssociationReference"

  SepaInstantAssociationReference:
    type: object
    x-nullable: false
    required:
      - id
      - type
    properties:
      id:
        x-nullable: false
        type: string
        format: uuid
      type:
        x-nullable: false
        type: string
        enum:
          - sepainstant_associations

  SepaInstantAssociationCreation:
    type: object
    properties:
      data:
        $ref: "#/definitions/NewSepaInstantAssociation"

  SepaInstantAssociationPatch:
    type: object
    properties:
      data:
        $ref: "#/definitions/UpdateSepaInstantAssociation"

  SepaInstantAssociationCreationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/SepaInstantAssociation"
      links:
        $ref: "#/definitions/Links"

  SepaInstantAssociationDetailsResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/SepaInstantAssociation"
      links:
        $ref: "#/definitions/Links"

  SepaInstantAssociationDetailsListResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/SepaInstantAssociation"
      links:
        $ref: "#/definitions/Links"

  SepaSctAssociation:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        $ref: "#/definitions/SepaSctAssociationAttributes"

  NewSepaSctAssociation:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        $ref: "#/definitions/SepaSctAssociationAttributes"

  SepaSctAssociationAttributes:
    type: object
    properties:
      bic:
        type: string
      businessUser:
        type: string
      receiverBusinessUser:
        type: string

  SepaSctAssociationCreation:
    type: object
    properties:
      data:
        $ref: "#/definitions/NewSepaSctAssociation"

  SepaSctAssociationCreationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/SepaSctAssociation"
      links:
        $ref: "#/definitions/Links"

  SepaSctAssociationDetailsResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/SepaSctAssociation"
      links:
        $ref: "#/definitions/Links"

  SepaSctAssociationDetailsListResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/SepaSctAssociation"
      links:
        $ref: "#/definitions/Links"

  ProductsAssociation:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        $ref: "#/definitions/ProductsAssociationAttributes"

  NewProductsAssociation:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        $ref: "#/definitions/ProductsAssociationAttributes"

  ProductsAssociationAttributes:
    type: object
    properties:
      product:
        type: string
      provider:
        type: string

  ProductsAssociationCreation:
    type: object
    properties:
      data:
        $ref: "#/definitions/NewProductsAssociation"

  ProductsAssociationCreationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/ProductsAssociation"
      links:
        $ref: "#/definitions/Links"

  ProductsAssociationDetailsResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/ProductsAssociation"
      links:
        $ref: "#/definitions/Links"

  ProductsAssociationDetailsListResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/ProductsAssociation"
      links:
        $ref: "#/definitions/Links"

  GocardlessAssociation:
    type: object
    properties:
      id:
        type: string
        format: uuid
      organisation_id:
        type: string
        format: uuid
      type:
        type: string
      version:
        type: integer
        minimum: 0
      attributes:
        $ref: "#/definitions/GocardlessAssociationAttributes"

  NewGocardlessAssociation:
    type: object
    properties:
      id:
        type: string
        format: uuid
      organisation_id:
        type: string
        format: uuid
      type:
        type: string
      attributes:
        $ref: "#/definitions/GocardlessAssociationAttributes"

  GocardlessAssociationAttributes:
    type: object
    properties:
      schemes:
        type: array
        items:
          type: string

  GocardlessAssociationPatchAttributes:
    type: object
    properties:
      third_party_organisation_id:
        type: string
        x-nullable: true
      schemes:
        type: array
        items:
          type: string
        x-nullable: true/

  GocardlessAssociationCreation:
    type: object
    properties:
      data:
        $ref: "#/definitions/NewGocardlessAssociation"

  GocardlessAssociationCreationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/GocardlessAssociation"

  GocardlessAssociationAmendment:
    type: object
    properties:
      data:
        $ref: "#/definitions/GocardlessAssociationUpdate"

  GocardlessAssociationUpdate:
    type: object
    properties:
      attributes:
        $ref: "#/definitions/GocardlessAssociationPatchAttributes"

  GocardlessAssociationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/GocardlessAssociation"

  GocardlessAssociationListResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/GocardlessAssociation"

  LhvAssociation:
    type: object
    properties:
      type:
        type: string
        x-nullable: false
        description: "Name of the resource type"
        enum:
          - lhvgateway_associations
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        $ref: "#/definitions/LhvAssociationAttributes"

  LhvAssociationWithRelationships:
    allOf:
      - $ref: "#/definitions/LhvAssociation"
      - type: object
        properties:
          relationships:
            $ref: "#/definitions/LhvMasterAccountRelationship"

  NewLhvAssociation:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        $ref: "#/definitions/LhvAssociationAttributes"

  LhvAssociationAttributes:
    type: object
    required:
      - name
      - client_code
      - client_country
    properties:
      name:
        type: string
        x-nullable: false
        minLength: 1
      client_code:
        type: string
        x-nullable: false
        minLength: 1
      client_country:
        type: string
        x-nullable: false
        minLength: 1
      use_simulator:
        type: boolean
        x-nullable: false
        default: false

  LhvUpdateAssociation:
    type: object
    required:
      - id
      - version
      - type
      - organisation_id
      - attributes
    properties:
      id:
        type: string
        format: uuid
        x-nullable: false
      type:
        type: string
        x-nullable: false
      version:
        type: integer
        minimum: 0
        x-nullable: true
      organisation_id:
        type: string
        format: uuid
        x-nullable: false
      attributes:
        $ref: "#/definitions/LhvUpdateAssociationAttributes"

  LhvUpdateAssociationAttributes:
    properties:
      name:
        type: string
        minLength: 1
      client_code:
        type: string
        minLength: 1
      client_country:
        type: string
        minLength: 1
      use_simulator:
        type: boolean
        x-nullable: true

  LhvAssociationCreation:
    type: object
    properties:
      data:
        $ref: "#/definitions/NewLhvAssociation"

  LhvAssociationPatch:
    type: object
    properties:
      data:
        $ref: "#/definitions/LhvUpdateAssociation"

  LhvAssociationCreationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/LhvAssociation"
      links:
        $ref: "#/definitions/Links"

  LhvAssociationDetailsResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/LhvAssociationWithRelationships"
      links:
        $ref: "#/definitions/Links"

  LhvAssociationDetailsListResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/LhvAssociation"
      links:
        $ref: "#/definitions/Links"

  LhvMasterAccountRelationship:
    type: object
    properties:
      master_accounts:
        type: object
        properties:
          data:
            type: array
            items:
              $ref: "#/definitions/LhvMasterAccount"

  LhvMasterAccountListResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/LhvMasterAccount"
      links:
        $ref: "#/definitions/Links"

  LhvMasterAccountResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/LhvMasterAccount"
      links:
        $ref: "#/definitions/Links"

  LhvMasterAccountCreation:
    type: object
    properties:
      data:
        $ref: "#/definitions/LhvMasterAccount"

  LhvMasterAccount:
    type: object
    required:
      - id
      - type
      - version
      - attributes
      - organisation_id
    properties:
      id:
        type: string
        x-nullable: false
        format: uuid
      type:
        type: string
        x-nullable: false
        description: "Name of the resource type"
        enum:
          - lhvgateway_master_accounts
      version:
        type: integer
        x-nullable: false
        default: 0
      organisation_id:
        format: uuid
        x-nullable: false
        type: string
      created_on:
        type: string
        format: date-time
        readOnly: true
      modified_on:
        type: string
        format: date-time
        readOnly: true
      attributes:
        $ref: "#/definitions/LhvMasterAccountAttributes"

  LhvMasterAccountAttributes:
    type: object
    required:
      - iban
      - bic
      - country
    x-nullable: false
    properties:
      iban:
        type: string
        x-nullable: false
        pattern: ^[A-Z]{2}[0-9]{2}[A-Z0-9]{0,64}$
        description: "master account iban."
        example: "GB11NWBK40030041426819"
      bic:
        type: string
        x-nullable: false
        pattern: ^([A-Z]{6}[A-Z0-9]{2}|[A-Z]{6}[A-Z0-9]{5})$
        description: "SWIFT BIC in either 8 or 11 character format"
        example: "NWBKGB22"
      country:
        type: string
        x-nullable: false
        pattern: ^[A-Z]{2}$
        example: "GB"
      bank_id:
        type: string
        x-nullable: false
        pattern: ^[A-Z0-9]{0,16}$
        description: "Local country bank identifier. In the UK this is the sort code."
        example: "400300"
      requires_direct_account:
        type: boolean
        default: false
        description: "requires a direct account preprovisioned under LHV organisation."

  LhvAgencySynchronisation:
    type: object
    x-access:
      - Private
    required:
      - id
      - type
      - version
      - attributes
      - organisation_id
    properties:
      id:
        type: string
        x-nullable: false
        format: uuid
      type:
        type: string
        x-nullable: false
        description: "Name of the resource type"
        enum:
          - lhvgateway_agency_synchronisation
      version:
        type: integer
        minimum: 0
      organisation_id:
        format: uuid
        x-nullable: false
        type: string
      created_on:
        type: string
        format: date-time
        readOnly: true
      modified_on:
        type: string
        format: date-time
        readOnly: true
      attributes:
        $ref: "#/definitions/LhvAgencySynchronisationAttributes"

  LhvAgencySynchronisationAttributes:
    type: object
    x-access:
      - Private
    required:
      - country
      - bic
      - bank_id
    x-nullable: false
    properties:
      country:
        type: string
        x-nullable: false
        pattern: ^[A-Z]{2}$
        example: "GB"
      bic:
        type: string
        x-nullable: false
        pattern: ^[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]$
        description: "SWIFT BIC in either 8 character format"
        example: "NWBKGB22"
      bank_id:
        type: array
        uniqueItems: true
        minItems: 1
        items:
          type: string
          x-nullable: false
          pattern: ^[0-9]{4}([0-9]{2})?$
          description: "Local country bank identifier. In the UK this is the sort code."
          example: "400300"

  LhvAgencySynchronisationListResponse:
    type: object
    x-access:
      - Private
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/LhvAgencySynchronisation'
      links:
        $ref: '#/definitions/Links'

  LhvAgencySynchronisationCreation:
    type: object
    x-access:
      - Private
    properties:
      data:
        $ref: '#/definitions/LhvAgencySynchronisation'

  LhvAgencySynchronisationResponse:
    type: object
    properties:
      data:
        $ref: '#/definitions/LhvAgencySynchronisation'
      links:
        $ref: '#/definitions/Links'


  SepaReconciliationAssociation:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        $ref: "#/definitions/SepaReconciliationAssociationAttributes"
      relationships:
        $ref: "#/definitions/SepaReconciliationAssociationRelationships"

  NewSepaReconciliationAssociation:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        $ref: "#/definitions/SepaReconciliationAssociationAttributes"
      relationships:
        $ref: "#/definitions/SepaReconciliationAssociationRelationships"

  SepaReconciliationAssociationAttributes:
    type: object
    required:
      - technical_bic
      - reconciliation_bic
      - reconciliation_iban
      - address
      - name
    properties:
      technical_bic:
        type: string
        x-nullable: false
        minLength: 1
      reconciliation_bic:
        type: string
        x-nullable: false
        minLength: 1
      reconciliation_iban:
        type: string
        x-nullable: false
        minLength: 1
      address:
        type: object
        x-nullable: false
        required:
          - street
          - building_number
          - city
          - country
        properties:
          street:
            type: string
            x-nullable: false
            minLength: 1
            maxLength: 70
          building_number:
            type: string
            x-nullable: false
            minLength: 1
            maxLength: 16
          city:
            type: string
            x-nullable: false
            minLength: 1
            maxLength: 35
          country:
            type: string
            x-nullable: false
            minLength: 1
            maxLength: 70
      name:
        type: string
        x-nullable: false
        minLength: 1

  SepaReconciliationAssociationRelationships:
    type: object
    properties:
      sponsor:
        type: object
        x-nullable: false
        required:
          - data
        properties:
          data:
            x-nullable: false
            $ref: "#/definitions/SepaReconciliationRelationshipData"

  SepaReconciliationRelationshipData:
    type: object
    x-nullable: false
    required:
      - id
      - type
    properties:
      id:
        x-nullable: false
        type: string
        format: uuid
      type:
        x-nullable: false
        type: string
        enum:
          - separeconciliation_associations

  SepaReconciliationAssociationCreation:
    type: object
    properties:
      data:
        $ref: "#/definitions/NewSepaReconciliationAssociation"

  SepaReconciliationAssociationCreationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/SepaReconciliationAssociation"
      links:
        $ref: "#/definitions/Links"

  SepaReconciliationAssociationDetailsResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/SepaReconciliationAssociation"
      links:
        $ref: "#/definitions/Links"

  SepaReconciliationAssociationDetailsListResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/SepaReconciliationAssociation"
      links:
        $ref: "#/definitions/Links"

  SepaLiquidityAssociation:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        $ref: "#/definitions/SepaLiquidityAssociationAttributes"
      relationships:
        $ref: "#/definitions/SepaLiquidityAssociationRelationships"

  NewSepaLiquidityAssociation:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        $ref: "#/definitions/SepaLiquidityAssociationAttributes"
      relationships:
        $ref: "#/definitions/SepaLiquidityAssociationRelationships"

  SepaLiquidityAssociationAttributes:
    type: object
    required:
      - settlement_iban
      - address
      - name
    properties:
      technical_bic:
        x-nullable: false
        type: string
      sponsored_bics:
        x-nullable: false
        type: array
        uniqueItems: true
        items:
          minItems: 1
          type: string
      settlement_bic:
        x-nullable: false
        type: string
      settlement_iban:
        type: string
        x-nullable: false
        minLength: 1
      address:
        x-nullable: false
        $ref: "#/definitions/SepaLiquidityAddress"
      name:
        type: string
        x-nullable: false
        minLength: 1

  SepaLiquidityAddress:
    x-nullable: false
    required:
      - street
      - building_number
      - city
      - country
    properties:
      street:
        x-nullable: false
        type: string
        minLength: 1
        maxLength: 70
      building_number:
        x-nullable: false
        type: string
        minLength: 1
        maxLength: 16
      city:
        x-nullable: false
        type: string
        minLength: 1
        maxLength: 35
      country:
        type: string
        x-nullable: false
        minLength: 1
        maxLength: 70

  SepaLiquidityAssociationRelationships:
    type: object
    properties:
      sponsor:
        type: object
        x-nullable: false
        required:
          - data
        properties:
          data:
            x-nullable: false
            $ref: "#/definitions/SepaLiquidityRelationshipData"

  SepaLiquidityRelationshipData:
    type: object
    x-nullable: false
    required:
      - id
      - type
    properties:
      id:
        x-nullable: false
        type: string
        format: uuid
      type:
        x-nullable: false
        type: string
        enum:
          - sepaliquidity_associations

  SepaLiquidityAssociationCreation:
    type: object
    properties:
      data:
        $ref: "#/definitions/NewSepaLiquidityAssociation"

  SepaLiquidityAssociationCreationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/SepaLiquidityAssociation"
      links:
        $ref: "#/definitions/Links"

  SepaLiquidityAssociationDetailsResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/SepaLiquidityAssociation"
      links:
        $ref: "#/definitions/Links"

  SepaLiquidityAssociationDetailsListResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/SepaLiquidityAssociation"
      links:
        $ref: "#/definitions/Links"

  # paymentapi - start

  Payment:
    type: object
    x-access:
      - Public
    required:
      - id
      - organisation_id
      - attributes
    properties:
      type:
        type: string
        description: "Name of the resource type"
        example: "payments"
        pattern: ^[A-Za-z_]*$
      id:
        type: string
        format: uuid
        example: "7826c3cb-d6fd-41d0-b187-dc23ba928772"
        description: "Unique resource ID"
      version:
        type: integer
        description: "Version number"
        example: 0
        minimum: 0
      organisation_id:
        type: string
        format: uuid
        example: "ee2fb143-6dfe-4787-b183-ca8ddd4164d2"
        description: "Unique ID of the organisation this resource is created by"
      attributes:
        type: object
        properties:
          amount:
            type: string
            pattern: ^[0-9.]{0,20}$
            description: "Amount of money moved between the instructing agent and instructed agent"
            x-description:
              fps: "Format uses decimal point. Maximum two decimals, value must be > 0. Maximum value `250000.00`."
              bacs: "Field8, automatically converted to pence when submitted to Bacs. Maximum value `20000000.00`."
              sepa: "Interbank settlement amount, must have 2 decimal places. Maximum value 15000.00."
              swift: "Field 32A: Interbank Settled Amount (15). No maximum value."
            x-availability:
              post:
                fps: "required"
                bacs: "required"
                sepa: "required"
              get:
                fps: "always"
                bacs: "always"
                sepa: "always"
            example: "10.00"
          batch_booking_indicator:
            type: string
          batch_id:
            type: string
          batch_type:
            type: string
          beneficiary_party:
            type: object
            properties:
              account_name:
                type: string
                description: "Name of beneficiary as given with account"
                x-length: 40
                x-description:
                  bacs: "Field11"
                  swift: "Field 59A: Beneficiary customer name and address (140)"
                x-availability:
                  post:
                    fps: "required"
                    bacs: "required"
                    swift: "required"
                  get:
                    fps: "sometimes"
                    bacs: "sometimes"
                    swift: "sometimes"
                example: "James Bond"
              account_number:
                type: string
                description: "Beneficiary account number"
                x-length: 34
                x-description:
                  bacs: "Field2"
                  swift: "Field 59A: Beneficiary customer, Account Component (34)"
                  sepa: "Must be in IBAN format"
                x-availability:
                  post:
                    fps: "required"
                    bacs: "required"
                    sepa: "required"
                    swift: "required"
                  get:
                    fps: "always"
                    bacs: "always"
                    sepa: "always"
                    swift: "always"
                example: "71268996"
              account_number_code:
                $ref: "#/definitions/AccountNumberCode"
              account_type:
                type: integer
                description: "The type of the account given with `beneficiary_party.account_number`. Single digit number. Only required if requested by the beneficiary party. Defaults to 0."
                x-description:
                  fps: "Single digit number. Only required if requested by the beneficiary party. Defaults to 0."
                  bacs: "Field3 (Defaults to 0)"
                x-availability:
                  post:
                    fps: "optional"
                    bacs: "optional"
                example: 0
              account_with:
                $ref: "#/definitions/BeneficiaryDebtorAccountHoldingEntity"
              address:
                x-omitempty: true
                type: array
                description: "Beneficiary address"
                x-description:
                  swift: "Field 59A: Beneficiary customer name and address (140)"
                  sepa: "Max 2 lines of 70 text"
                x-availability:
                  post:
                    fps: "optional"
                    sepa: "optional"
                    swift: "optional"
                  get:
                    fps: "sometimes"
                    sepa: "sometimes"
                    swift: "sometimes"
                example: ["1 Clarence Mew", "Horsforth", "Leeds Ls18 4EP"]
                items:
                  type: string
              birth_date:
                x-nullable: true
                type: string
                format: date
                description: "Beneficiary birth date. Formatted according to ISO 8601 format: YYYY-MM-DD"
                x-description:
                  sepa: "If a Creditor Identification is used then either `beneficiary_party.organisation_identification` can be present or date and place of birth can be present but not both"
                x-availability:
                  post:
                    sepa: "optional"
                  get:
                    sepa: "sometimes"
                example: "1977-02-28"
              birth_city:
                type: string
                description: "Beneficiary birth city"
                x-length: 35
                x-description:
                  sepa: "If a Creditor Identification is used then either `beneficiary_party.organisation_identification` can be present or date and place of birth can be present but not both"
                x-availability:
                  post:
                    sepa: "optional"
                  get:
                    sepa: "sometimes"
                example: "PARIS"
              birth_country:
                type: string
                description: "Beneficiary birth country, ISO 3166 format country code"
                x-length: 2
                x-description:
                  sepa: "If a Creditor Identification is used then either `beneficiary_party.organisation_identification` can be present or date and place of birth can be present but not both"
                x-availability:
                  post:
                    sepa: "optional"
                  get:
                    sepa: "sometimes"
                example: "FR"
              birth_province:
                type: string
                description: "Beneficiary birth province"
                x-length: 35
                x-description:
                  sepa: "If a Creditor Identification is used then either `beneficiary_party.organisation_identification` can be present or date and place of birth can be present but not both"
                x-availability:
                  post:
                    sepa: "optional"
                  get:
                    sepa: "sometimes"
                example: "NORTHSIDE"
              country:
                type: string
                description: "Country of the beneficiary address, ISO 3166 format country code"
                x-length: 2
                x-availability:
                  post:
                    sepa: "optional"
                  get:
                    sepa: "sometimes"
                example: "DE"
              name:
                type: string
                description: "Beneficiary name"
                x-length: 70
                x-description:
                  swift: "Field 59A: Beneficiary customer name and address (140)"
                x-availability:
                  post:
                    fps: "optional"
                    swift: "optional"
                    sepa: "required"
                  get:
                    fps: "sometimes"
                    swift: "sometimes"
                    sepa: "always"
                example: "James Bond"
              organisation_identification:
                type: string
                description: "Organisation identification of a beneficiary, used in the case that the beneficiary is an organisation and not a private person"
                x-length: 35
                x-description:
                  sepa: "The Identification can either be a BIC, BEI or Other Identification"
                x-availability:
                  post:
                    sepa: "optional"
                  get:
                    sepa: "sometimes"
                example: "ID1234656"
              organisation_identification_code:
                type: string
                description: "The code that specifies the type of `organisation_identification`"
                x-length: 4
                x-description:
                  sepa: "If `beneficiary_party.organisation_identification` is specified, must be either `BIC`, `BEI`, or `Other`"
                x-availability:
                  post:
                    sepa: "conditional"
                  get:
                    sepa: "sometimes"
                example: "BIC"
              organisation_identification_issuer:
                type: string
                description: "Issuer of the organisation identification"
                x-length: 35
                x-description:
                  sepa: "May only be present if `beneficary_party.organisation_identification_code` is `Other`"
                x-availability:
                  post:
                    sepa: "optional"
                  get:
                    sepa: "sometimes"
                example: "BANK"
              telephone_number:
                type: string
                x-length: 16
                description: "Beneficiary phone number"
                example: "+447921123987"
          category_purpose_coded:
            type: string
            description: "Category purpose in a coded form. Specifies the high level purpose of the instruction. Cannot be used at the same time as `category_purpose`."
            x-length: 4
            x-description:
              bacs: "The purpose of the payment using ISO code"
              sepa: "The codes used must be part of the ISO 20022 ExternalCategoryPurpose1Code list"
            x-availability:
              post:
                bacs: "optional"
                sepa: "optional"
              get:
                bacs: "sometimes"
                sepa: "sometimes"
            example:
          category_purpose:
            type: string
            description: "Category purpose in proprietary form. Specifies the high level purpose of the instruction. Cannot be used at the same time as `category_purpose_coded`."
            x-length: 35
            x-description:
              bacs: "Indicates the purpose of the payment"
            x-availability:
              post:
                bacs: "optional"
                sepa: "optional"
              get:
                bacs: "sometimes"
                sepa: "sometimes"
            example:
          charges_information:
            x-omitempty: true
            $ref: "#/definitions/ChargesInformation"
          clearing_id:
            type: string
            description: "Unique identifier for organisations collecting payments"
            x-length: 6
            x-description:
              bacs: "Bacs Service User Number (6 numeric digits). VOL1/Field7 HDR1/Field 3 EOF1/Field 3"
            x-availability:
              post:
                bacs: "required"
              get:
                bacs: "always"
            example:
          currency:
            type: string
            description: "Currency of the transaction amount. Currency code as defined in [ISO 4217](http://www.iso.org/iso/home/standards/currency_codes.htm)"
            x-length: 3
            x-description:
              bacs: "Field 32A: Digits 7-9"
              sepa: "Must be `EUR`"
            x-availability:
              post:
                fps: "required"
                bacs: "required"
                swift: "required"
                sepa: "required"
              get:
                fps: "always"
                bacs: "always"
                swift: "always"
                sepa: "always"
            example: "EUR"
          debtor_party:
            type: object
            properties:
              account_name:
                type: string
                description: "Name of debtor as given with account"
                x-length: 40
                x-description:
                  bacs: "Field9"
                  swift: "Field 50A: Ordering customer name and address (140)"
                x-availability:
                  post:
                    fps: "required"
                    bacs: "required"
                    swift: "required"
                  get:
                    fps: "always"
                    bacs: "always"
                    swift: "always"
                example: "Jane Bond"
              account_number:
                type: string
                description: "Debtor account number. Allows upper case and numeric characters."
                x-length: 34
                x-description:
                  bacs: "Field6"
                  swift: "Field 50A: Ordering customer Account Component (34)"
                  sepa: "Must be in IBAN format."
                x-availability:
                  post:
                    fps: "required"
                    bacs: "required"
                    swift: "required"
                    sepa: "required"
                  get:
                    fps: "always"
                    bacs: "always"
                    swift: "always"
                    sepa: "always"
                example: "12345678"
              account_number_code:
                $ref: "#/definitions/AccountNumberCode"
              account_with:
                $ref: "#/definitions/BeneficiaryDebtorAccountHoldingEntity"
              address:
                x-omitempty: true
                type: array
                description: "Debtor address"
                x-description:
                  swift: "Field 50A: Ordering customer name and address (140)"
                  sepa: "Max 2 lines of 70 text."
                x-availability:
                  post:
                    fps: "optional"
                    swift: "optional"
                    sepa: "optional"
                  get:
                    fps: "sometimes"
                    swift: "sometimes"
                    sepa: "sometimes"
                example: ["63 St Mary Axe", "London", "EC3A 8AA"]
                items:
                  type: string
              birth_date:
                x-nullable: true
                type: string
                format: date
                description: "Debtor birth date. Formatted according to ISO 8601 format: YYYY-MM-DD"
                x-description:
                  sepa: "If a Debtor Identification is used then either `debtor_party.organisation_identification` or date and place of birth can be present but not both"
                x-availability:
                  post:
                    sepa: "optional"
                  get:
                    sepa: "optional"
                example: "1973-01-31"
              birth_city:
                type: string
                description: "Debtor birth city"
                x-length: 35
                x-description:
                  sepa: "If a Debtor Identification is used then either `debtor_party.organisation_identification` or date and place of birth can be present but not both"
                x-availability:
                  post:
                    sepa: "optional"
                  get:
                    sepa: "sometimes"
                example: "PARIS"
              birth_country:
                type: string
                description: "Debtor birth country. ISO 3166 format country code"
                x-length: 2
                x-description:
                  sepa: "If a Debtor Identification is used then either `debtor_party.organisation_identification` or date and place of birth can be present but not both"
                x-availability:
                  post:
                    sepa: "optional"
                  get:
                    sepa: "sometimes"
                example: "FR"
              birth_province:
                type: string
                description: "Debtor birth province"
                x-length: 35
                x-description:
                  sepa: "If a Debtor Identification is used then either `debtor_party.organisation_identification` or date and place of birth can be present but not both"
                x-availability:
                  post:
                    sepa: "optional"
                  get:
                    sepa: "sometimes"
                example: "SOUTH SIDE"
              country:
                type: string
                description: Country of debtor address. ISO 3166 format country code"
                x-length: 2
                x-availability:
                  post:
                    sepa: "optional"
                  get:
                    sepa: "sometimes"
                example: "GB"
              customer_id:
                type: string
                description: "SWIFT BIC for ordering customer, either BIC8 or BIC11"
                x-length: 11
                x-description:
                  swift: "Field 50A"
                x-availability:
                  post:
                    swift: "optional"
                  get:
                    swift: "sometimes"
                example: "BARCGB22"
              customer_id_code:
                type: string
                description: "Code for `customer_id`"
                x-length: 5
                x-availability:
                  post:
                    swift: "optional"
                  get:
                    swift: "sometimes"
                example: "SWBIC"
              name:
                type: string
                description: "Debtor name"
                x-length: 70
                x-description:
                  swift: "Field 50A: Ordering customer name and address (140)"
                x-availability:
                  post:
                    fps: "optional"
                    swift: "optional"
                    sepa: "required"
                  get:
                    fps: "sometimes"
                    swift: "sometimes"
                    sepa: "always"
                example: "Norman Smith"
              organisation_identification:
                type: string
                description: "Organisation identification of a debtor, in the case that the debtor is an organisation and not a private person"
                x-length: 35
                x-description:
                  sepa: "The Identification can either be a BIC, BEI or Other Identification"
                x-availability:
                  post:
                    sepa: "optional"
                  get:
                    sepa: "sometimes"
                example: "ID1234656"
              organisation_identification_code:
                type: string
                description: "The code that specifies the type of `organisation_identification`"
                x-length: 4
                x-description:
                  sepa: "If `debtor_party.organisation_identification` is specified, must be either `BIC`, `BEI`, or `Other`"
                x-availability:
                  post:
                    sepa: "conditional"
                  get:
                    sepa: "sometimes"
                example: "BIC"
              organisation_identification_issuer:
                type: string
                description: "Issuer of the `organisation_identification`"
                x-length: 35
                x-description:
                  sepa: "May only be present if `debtor_party.organisation_identification_code` is `Other`"
                x-availability:
                  post:
                    sepa: "optional"
                  get:
                    sepa: "sometimes"
                example: "BANK"
          end_to_end_reference:
            type: string
            description: "Unique identification, as assigned by the initiating party, to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain."
            x-length: 35
            x-description:
              swift: "Field70: Remittance Information after /ROC/ code (31)"
              sepa: "In the event that no reference was given, `NOTPROVIDED` must be used."
            x-availability:
              post:
                fps: "optional"
                swift: "optional"
                sepa: "required"
              get:
                fps: "sometimes"
                swift: "sometimes"
                sepa: "always"
            example: "PAYMENT REF: 20094"
          file_number:
            type: string
          fx:
            type: object
            properties:
              contract_reference:
                type: string
                description: "Reference to the foreign exchange contract associated with the transaction"
                x-length: 35
                x-availability:
                  post:
                    fps: "optional"
                    swift: "optional"
                  get:
                    fps: "sometimes"
                    swift: "sometimes"
                example: "FXCONTRACT/REF/123567"
              exchange_rate:
                type: string
                description: "Factor used to convert an amount from the instructed currency into the transaction currency: i.e. to convert the `fx.original_amount`, expressed in the `fx.original_currency`, to `amount` specified in `currency`. Decimal value, represented as a string, maximum length 12. Must be > 0."
                x-description:
                  swift: "Field 36 Exchange Rate (12)"
                  sepa: "If the instructed currency is not `EUR`: `fx.exchange_rate`, `fx.original_amount` and `fx.original_currency` must be provided"
                x-availability:
                  post:
                    fps: "optional"
                    swift: "optional"
                    sepa: "conditional"
                  get:
                    fps: "sometimes"
                    swift: "sometimes"
                    sepa: "sometimes"
                example: "0.13343"
              original_amount:
                type: string
                description: "Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as instructed by the initiating party. Decimal value. Must be > 0."
                x-description:
                  swift: "Field 33B: Currency/instructed amount (18)"
                  sepa: "If the instructed currency is not `EUR`: `fx.exchange_rate`, `fx.original_amount` and `fx.original_currency` must be provided."
                x-availability:
                  post:
                    fps: "optional"
                    swift: "optional"
                    sepa: "conditional"
                  get:
                    fps: "sometimes"
                    swift: "sometimes"
                    sepa: "sometimes"
                example: "100.00"
              original_currency:
                type: string
                description: "Currency of `orginal_amount`. Currency code as defined in ISO 4217."
                x-length: 3
                x-description:
                  swift: "Field 33B: Currency/instructed amount (18)"
                  sepa: "If the instructed currency is not `EUR`: `fx.exchange_rate`, `fx.original_amount` and `fx.original_currency` must be provided."
                x-availability:
                  post:
                    fps: "optional"
                    swift: "optional"
                    sepa: "conditional"
                  get:
                    fps: "sometimes"
                    swift: "sometimes"
                    sepa: "sometimes"
                example: "EUR"
          instruction_id:
            type: string
            description: "Unique identification, as assigned by the initiating party to unambigiously identify the transaction. This identification is an point-to-point reference and is passed on, unchanged, throughout the entire chain. Cannot includ leading, trailing or internal spaces."
            x-length: 35
            x-description:
              sepa: "Cannot include leading, trailing or internal spaces"
            x-availability:
              post:
                sepa: "optional"
              get:
                sepa: "sometimes"
            example: "ID1245799"
          intermediary_bank:
            $ref: "#/definitions/IntermediaryBankAccountHoldingEntity"
          numeric_reference:
            type: string
            description: "Numeric reference field, see scheme specific descriptions for usage"
            x-length: 4
            x-description:
              bacs: "Field7: Reference field used for UK tax info and Bacs Returns"
            x-availability:
              post:
                fps: "optional"
                bacs: "optional"
              get:
                fps: "sometimes"
                bacs: "sometimes"
            example:
          payment_acceptance_datetime:
            type: string
            format: "date-time"
            x-nullable: true
            description: "Timestamp of when the payment instruction meets the set processing conditions. Format: YYYY-MM-DDThh:mm:ss:mmm+hh:mm"
            example: "2017-09-30T12:36:02.123+01:00"
          scheme_transaction_id:
            type: string
            description: "Unique identification, as assigned by the first instructing agent, to unambiguously identify the transaction that is passed on, unchanged, throughout the entire interbank chain."
            example: "123456789012345678"
            x-length: 35
            x-description:
              fps: "Corresponds to the Transaction Reference Number (TRN)"
              swift: "Field 20: Senders Reference (20)"
              sepa: "Cannot include leading, trailing or internal spaces"
            x-availability:
              post:
                fps: "optional"
                swift: "required"
                sepa: "required"
              get:
                fps: "sometimes"
                swift: "always"
                sepa: "always"
          unique_scheme_id:
            type: string
            description: "The scheme-specific unique transaction ID. Populated by the scheme."
            example: "L5W48NDWYW7JV9MRO71020180301826040011"
            x-length: 42
            x-description:
              fps: "Corresponds to the FPID, only present for incoming payments or after payment has been submitted to the scheme."
            x-availability:
              get:
                fps: "sometimes"
          payment_purpose:
            type: string
            description: "Purpose of the payment in a proprietary form"
            example: "X"
            x-length: 35
            x-description:
              fps: "FPS Procedures do not mandate any values for the use of this field"
              swift: "Field 26T: Transaction Type (3)"
            x-availability:
              post:
                fps: "optional"
                swift: "optional"
                sepa: "optional"
              get:
                fps: "sometimes"
                swift: "sometimes"
                sepa: "sometimes"
          payment_purpose_coded:
            type: string
            description: "Purpose of the payment in a coded form"
            x-length: 4
            x-description:
              sepa: "The codes used must be part of the ISO 20022 ExternalPurpose1Code list."
            x-availability:
              post:
                sepa: "optional"
              get:
                sepa: "sometimes"
          payment_scheme:
            type: string
            description: "Clearing infrastructure through which the payment instruction is to be processed. Default for given organisation ID is used if left empty. Has to be a valid [scheme identifier](http://draft-api-docs.form3.tech/api.html#enumerations-schemes)."
            example: "FPS"
            x-description:
              fps: "`FPS` or empty if default for organisation is `FPS`"
              bacs: "`BACS` or empty if default for organisation is `BACS`"
              sepa: "`SEPAINSTANT` or empty if default for organisation is `SEPAINSTANT`"
            x-availability:
              post:
                fps: "optional"
                bacs: "optional"
                sepa: "optional"
                swift: "optional"
              get:
                fps: "sometimes"
                bacs: "sometimes"
                sepa: "sometimes"
                swift: "sometimes"
          payment_type:
            type: string
          processing_date:
            type: string
            format: date
            description: "Date on which the payment is to be debited from the debtor account. Formatted according to ISO 8601 format: YYYY-MM-DD."
            example: "2015-02-12"
            x-description:
              fps: "Must be within +/- 1 day of today"
              bacs: "Field12 +/- one working day"
              swift: "Field 32A: Digits 1-6"
              sepa: "Must be within +/- 1 day of today"
            x-availability:
              post:
                fps: "required"
                bacs: "optional"
                swift: "optional"
                sepa: "required"
              get:
                fps: "always"
                bacs: "always"
                swift: "always"
                sepa: "always"
          scheme_processing_date:
            type: string
            description: "Date on which the payment is processed by the scheme. Only used if different from `processing_date`."
            example: "2015-02-12"
            x-description:
              bacs: "Field12. Usually day 2 of the Bacs cycle, only populated on incoming payments."
            x-availability:
              post:
                bacs: "optional"
              get:
                bacs: "sometimes"
            format: date
          receivers_correspondent:
            $ref: "#/definitions/ReceiversCorrespondentAccountHoldingEntity"
          reference:
            type: string
            description: "Payment reference for beneficiary use"
            example: "rent for oct"
            x-length: 18
            x-description:
              fps: "Short reference information associated with the payment. The beneficiary bank must pass on this information to beneficiary. 18 characters max, must match ^[A-Za-z0-9 /&#92;-]{1,18}$."
              bacs: "Field10"
              swift: "Field 70: Remittance Information after /RFB/ code (31)"
            x-availability:
              post:
                fps: "required"
                bacs: "required"
                swift: "required"
              get:
                fps: "always"
                bacs: "always"
                swift: "always"
          regulatory_reporting:
            type: string
            description: "Regulatory reporting information"
            example: "May be required for some foreign originated payments"
            x-length: 105
            x-description:
              swift: "Field 77B: Regulatory Reporting (105)"
            x-availability:
              post:
                fps: "optional"
                swift: "optional"
              get:
                fps: "sometimes"
                swift: "sometimes"
          reimbursement:
            $ref: "#/definitions/ReimbursementAccountHoldingEntity"
          remittance_information:
            type: string
            description: "Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts receivable system provided by the debtor for the beneficiary."
            example: "Additional remittance information over and above reference information"
            x-length: 140
            x-description:
              fps: "Longer reference information associated with the payment."
              swift: "Field 70: Remittance Information (140 less /RFB/ or /ROC/ elements if present)"
              sepa: "Either the structured remittance information `structured_reference` or unstructured `remittance_information` may be present but not both."
            x-availability:
              post:
                fps: "optional"
                swift: "optional"
                sepa: "conditional"
              get:
                fps: "sometimes"
                swift: "sometimes"
                sepa: "sometimes"
          scheme_payment_sub_type:
            description: "The scheme specific payment [sub type](http://api-docs.form3.tech/api.html#enumerations-scheme-specific-payment-sub-types)"
            example: "TelephoneBanking"
            type: string
            x-description:
              fps: "Either `TelephoneBanking`, `InternetBanking`, `BranchInstruction`, `Letter`, `Email` or `MobilePaymentsService`"
            x-availability:
              post:
                fps: "optional"
              get:
                fps: "sometimes"
          scheme_payment_type:
            description: "The [scheme-specific payment type](#enumerations-scheme-payment-types)"
            example: "ImmediatePayment"
            type: string
            x-description:
              fps: "Either `ImmediatePayment`, `ForwardDatedPayment` or `StandingOrder`"
              bacs: "Has to be valid payment type for Bacs Direct Credit"
            x-availability:
              post:
                fps: "required"
                bacs: "required"
              get:
                fps: "always"
                bacs: "always"
          senders_correspondent:
            $ref: "#/definitions/SendersCorrespondentAccountHoldingEntity"
          structured_reference:
            type: object
            properties:
              issuer:
                type: string
                description: "Issuer of remittance reference"
                example:
                x-length: 35
                x-description:
                  sepa: "Either the structured remittance information `structured_reference` or unstructured `remittance_information` may be present but not both. Mandatory if `SCOR` is used in the remittance data proprietary code."
                x-availability:
                  post:
                    sepa: "conditional"
                  get:
                    sepa: "sometimes"
              reference:
                description: "Unique reference to unambiguously refer to the payment originated by the creditor, this reference enables reconciliation by the creditor upon receipt of the amount of money."
                example:
                x-length: 35
                x-description:
                  sepa: "Either the structured remittance information `structured_reference` or unstructured `remittance_information` may be present but not both."
                x-availability:
                  post:
                    sepa: "conditional"
                  get:
                    sepa: "sometimes"
                type: string
          swift:
            type: object
            properties:
              bank_operation_code:
                type: string
                description: "SWIFT service level"
                x-length: 4
                x-description:
                  swift: "Field 23B: Bank Operation Code (`SSTD`, `SPAY`, `SPRI`, `CRED`)"
                x-availability:
                  post:
                    swift: "optional"
                  get:
                    swift: "sometimes"
                example: "CRED"
              header:
                type: object
                properties:
                  destination:
                    type: string
                    description: "Destination SWIFT logical terminal address. Complete 12-character SWIFT destination, including BIC (x8), logical terminal code (x1) and branch code (x)."
                    example: "MIDLGB22XABC"
                    x-length: 12
                    x-description:
                      swift: "Basic Header Block"
                    x-availability:
                      post:
                        swift: "optional"
                      get:
                        swift: "sometimes"
                  message_type:
                    type: string
                    description: "The message type of the SWIFT payment, has to match `[A-Z]{2}[0-9]{3}`. Currently `MT103` is the only supported value"
                    example: "MT103"
                    x-length: 5
                    x-description:
                      swift: "Application Header Block"
                    x-availability:
                      post:
                        swift: "optional"
                      get:
                        swift: "sometimes"
                  priority:
                    type: string
                    description: "SWIFT priority. Either `Normal` or `Priority`."
                    example: "Priority"
                    x-length: 8
                    x-description:
                      swift: "Application Header Block"
                    x-availability:
                      post:
                        swift: "optional"
                      get:
                        swift: "sometimes"
                  recipient:
                    type: string
                    description: "The destination SWIFT BIC for SWIFT MT messages being sent by Form3 client to SWIFT. Formatted as BIC8 or BIC11."
                    example:
                    x-length: 8
                    x-description:
                      swift: "Application Header Block"
                    x-availability:
                      post:
                        swift: "optional"
                      get:
                        swift: "sometimes"
                  source:
                    type: string
                    description: "The source SWIFT BIC for SWIFT MT messages being received by Form3 client from SWIFT. Formatted as BIC8 or BIC11."
                    example:
                    x-length: 8
                    x-description:
                      swift: "Application Header Block"
                    x-availability:
                      post:
                        swift: "optional"
                      get:
                        swift: "sometimes"
                  user_reference:
                    type: string
                    description: "Message User Reference (MUR) value, which can be up to 16 characters, and will be returned in the ACK"
                    example:
                    x-length: 16
                    x-description:
                      swift: "User Header Block"
                    x-availability:
                      post:
                        swift: "optional"
                      get:
                        swift: "sometimes"
              instruction_code:
                type: string
                description: "A SWIFT instruction code"
                example: "INTC"
                x-length: 35
                x-description:
                  swift: "Field 23E"
                x-availability:
                  post:
                    swift: "optional"
                  get:
                    swift: "sometimes"
              sender_receiver_information:
                type: string
                description: "This field specifies additional information for the Receiver or other party specified."
                example: "/INS/ABNANL2A"
                x-length: 210
                x-description:
                  swift: "Field 72 Line 1 /RETN/, Line 2 value follows Payment Return Code. Unless bilaterally agreed otherwise between the Sender and the Receiver, one of the following codes must be used in Code, placed between slashes (`/`):<br>- ACC Account with institution<br>- INS Instructing institution<br>- INT Intermediary institution<br>- REC Receiver"
                x-availability:
                  post:
                    swift: "optional"
                  get:
                    swift: "sometimes"
              time_indication:
                type: string
                description: "This repetitive field specifies one or several time indication(s) related to the processing of the payment instruction."
                example: "/CLSTIME/0915+0200"
                x-description:
                  swift: "Field 13C: Time Indication"
                x-availability:
                  post:
                    swift: "optional"
                  get:
                    swift: "sometimes"
          ultimate_beneficiary:
            $ref: "#/definitions/UltimateEntity"
          ultimate_debtor:
            $ref: "#/definitions/UltimateEntity"
      relationships:
        $ref: "#/definitions/PaymentRelationships"

  PaymentRelationships:
    type: object
    x-access:
      - Public
    properties:
      payment_submission:
        type: object
        description: "The payment submission resource related to the payment"
        properties:
          data:
            type: array
            items:
              $ref: "#/definitions/PaymentSubmission"
      payment_return:
        type: object
        description: "The payment return resource related to the payment"
        properties:
          data:
            type: array
            items:
              $ref: "#/definitions/ReturnPayment"
      payment_admission:
        type: object
        description: "The payment admission resource related to the payment"
        properties:
          data:
            type: array
            items:
              $ref: "#/definitions/PaymentAdmission"
      payment_reversal:
        type: object
        description: "The payment reversal resource related to the payment"
        properties:
          data:
            type: array
            items:
              $ref: "#/definitions/ReversalPayment"

  BeneficiaryDebtorAccountHoldingEntity:
    x-access:
      - Public
    type: object
    properties:
      bank_address:
        x-omitempty: true
        type: array
        description: Financial institution address
        x-description:
          swift: Field 57B
        x-availability:
          post:
            swift: "optional"
          get:
            swift: "sometimes"
        example:
          [
            "Liverpool Customer Service Centre",
            "Stevenson Way",
            "Wavertree",
            "L13 1NW",
          ]
        items:
          type: string
      bank_id:
        description: "Financial institution identification"
        x-length: 11
        x-description:
          bacs: "Field1"
          sepa: "Must be a BIC"
          swift: "Field 57A: BIC Component (11)"
        x-availability:
          post:
            fps: "required"
            bacs: "required"
            swift: "required"
            sepa: "required"
          get:
            fps: "always"
            bacs: "always"
            swift: "always"
            sepa: "always"
        example: "333333"
        type: string
      bank_id_code:
        $ref: "#/definitions/BankIdCode"
      bank_name:
        type: string
        description: "Financial institution name"
        x-length: 35
        x-description:
          swift: "Field 57D"
        x-availability:
          post:
            swift: "optional"
          get:
            swift: "sometimes"
        example: "NATIONAL WESTMINSTER BANK PLC"
      bank_party_id:
        type: string
        description: "Identifier of the financial institution which services the account"
        x-length: 35
        x-description:
          swift: "Field 57A/57B/57D"
        x-availability:
          post:
            swift: "optional"
          get:
            swift: "sometimes"
        example: "//AT12345"

  IntermediaryBankAccountHoldingEntity:
    x-access:
      - Public
    type: object
    properties:
      bank_address:
        x-omitempty: true
        type: array
        description: Financial institution address
        x-description:
          swift: Field 56B
        x-availability:
          post:
            swift: "optional"
          get:
            swift: "sometimes"
        example:
          [
            "Liverpool Customer Service Centre",
            "Stevenson Way",
            "Wavertree",
            "L13 1NW",
          ]
        items:
          type: string
      bank_id:
        description: "Financial institution identification"
        x-length: 11
        x-description:
          swift: "Field 56A"
        x-availability:
          post:
            swift: "optional"
          get:
            swift: "sometimes"
        example: "333333"
        type: string
      bank_id_code:
        $ref: "#/definitions/BankIdCode"
      bank_name:
        type: string
        description: "Financial institution name"
        x-length: 35
        x-description:
          swift: "Field 56D"
        x-availability:
          post:
            swift: "optional"
          get:
            swift: "sometimes"
        example: "XYZ BANK PLC"
      bank_party_id:
        type: string
        description: "Identifier of the financial institution which services the account"
        x-length: 37
        x-description:
          swift: "Field 56A/56B/56D"
        x-availability:
          post:
            swift: "optional"
          get:
            swift: "sometimes"
        example: "//AT12345"

  ReceiversCorrespondentAccountHoldingEntity:
    x-access:
      - Public
    type: object
    properties:
      bank_address:
        x-omitempty: true
        type: array
        description: "Receiver's correspondent's address"
        x-length: 140
        x-description:
          swift: Field 54B
        x-availability:
          post:
            swift: "optional"
          get:
            swift: "sometimes"
        example:
          [
            "Liverpool Customer Service Centre",
            "Stevenson Way",
            "Wavertree",
            "L13 1NW",
          ]
        items:
          type: string
      bank_id:
        description: "SWIFT BIC for receiver's correspondent"
        x-length: 11
        x-description:
          swift: "Field 54A, must be BIC8 or BIC11"
        x-availability:
          post:
            swift: "optional"
          get:
            swift: "sometimes"
        example: "333333"
        type: string
      bank_id_code:
        $ref: "#/definitions/BankIdCode"
      bank_name:
        type: string
        description: "Receiver's correspondent's name"
        x-length: 35
        x-description:
          swift: "Field 54D"
        x-availability:
          post:
            swift: "optional"
          get:
            swift: "sometimes"
        example: "XYZ BANK PLC"
      bank_party_id:
        type: string
        description: "Reciever's correspondent party identifier"
        x-length: 37
        x-description:
          swift: "Field 54A/54B/54D"
        x-availability:
          post:
            swift: "optional"
          get:
            swift: "sometimes"
        example: "//AT12345"

  SendersCorrespondentAccountHoldingEntity:
    x-access:
      - Public
    type: object
    properties:
      bank_address:
        x-omitempty: true
        type: array
        description: "Sender's correspondent's address"
        x-description:
          swift: Field 53B
        x-availability:
          post:
            swift: "optional"
          get:
            swift: "sometimes"
        example:
          [
            "Liverpool Customer Service Centre",
            "Stevenson Way",
            "Wavertree",
            "L13 1NW",
          ]
        items:
          type: string
      bank_id:
        description: "SWIFT BIC for sender's correspondent"
        x-length: 11
        x-description:
          swift: "Field 53A"
        x-availability:
          post:
            swift: "optional"
          get:
            swift: "sometimes"
        example: "333333"
        type: string
      bank_id_code:
        $ref: "#/definitions/BankIdCode"
      bank_name:
        type: string
        description: "Sender's correspondent's name"
        x-length: 35
        x-description:
          swift: "Field 53D"
        x-availability:
          post:
            swift: "optional"
          get:
            swift: "sometimes"
        example: "XYZ BANK PLC"
      bank_party_id:
        type: string
        description: "Identifier of the financial institution which services the account"
        x-length: 37
        x-description:
          swift: "Field 53A/53B/53D"
        x-availability:
          post:
            swift: "optional"
          get:
            swift: "sometimes"
        example: "//AT12345"

  ReimbursementAccountHoldingEntity:
    x-access:
      - Public
    type: object
    properties:
      bank_address:
        x-omitempty: true
        type: array
        description: "Third party reimbursement institution address"
        x-description:
          swift: Field 55B
        x-availability:
          post:
            swift: "optional"
          get:
            swift: "sometimes"
        example:
          [
            "Liverpool Customer Service Centre",
            "Stevenson Way",
            "Wavertree",
            "L13 1NW",
          ]
        items:
          type: string
      bank_id:
        description: "Identification of third party reimbursement institution"
        x-length: 11
        x-description:
          swift: "Field 55A, must be BIC8 or BIC11"
        x-availability:
          post:
            swift: "optional"
          get:
            swift: "sometimes"
        example: "333333"
        type: string
      bank_id_code:
        $ref: "#/definitions/BankIdCode"
      bank_name:
        type: string
        description: "Third party reimbursement institution name"
        x-length: 35
        x-description:
          swift: "Field 55D"
        x-availability:
          post:
            swift: "optional"
          get:
            swift: "sometimes"
        example: "NATIONAL WESTMINSTER BANK PLC"
      bank_party_id:
        type: string
        description: "Third party reimbursement institution identifier"
        x-length: 37
        x-description:
          swift: "Field 55A/55B/55D"
        x-availability:
          post:
            swift: "optional"
          get:
            swift: "sometimes"
        example: "//AT12345"

  AccountHoldingEntity:
    x-access:
      - Public
    type: object
    properties:
      bank_address:
        x-omitempty: true
        type: array
        description: Financial institution address
        x-description:
          swift: Field 57B
        x-availability:
          post:
            swift: "optional"
          get:
            swift: "sometimes"
        example:
          [
            "Liverpool Customer Service Centre",
            "Stevenson Way",
            "Wavertree",
            "L13 1NW",
          ]
        items:
          type: string
      bank_id:
        description: "Financial institution identification"
        x-description:
          bacs: "Field1"
          sepa: "Must be a BIC"
          swift: "Field 57A: BIC Component (11)"
        x-availability:
          post:
            fps: "required"
            bacs: "required"
            swift: "required"
            sepa: "required"
          get:
            fps: "always"
            bacs: "always"
            swift: "always"
            sepa: "always"
        example: "333333"
        type: string
      bank_id_code:
        $ref: "#/definitions/BankIdCode"
      bank_name:
        type: string
        description: "Financial institution name"
        x-description:
          swift: "Field 57D"
        x-availability:
          post:
            swift: "optional"
          get:
            swift: "sometimes"
        example: "NATIONAL WESTMINSTER BANK PLC"
      bank_party_id:
        type: string
        description: "Identifier of the financial institution which services the account"
        x-description:
          swift: "Field 57A/57B/57D"
        x-availability:
          post:
            swift: "optional"
          get:
            swift: "sometimes"
        example: "//AT12345"

  AccountNumberCode:
    type: string
    enum:
      - IBAN
      - BBAN

  BankIdCode:
    type: string
    enum:
      - SWBIC
      - GBDSC
      - BE
      - FR
      - DEBLZ
      - GRBIC
      - ITNCC
      - PLKNR
      - PTNCC
      - ESNCC
      - CHBCC

  UltimateEntity:
    type: object
    properties:
      name:
        type: string
      country:
        type: string
      address:
        type: string
      organisation_identification:
        type: string
      organisation_identification_code:
        type: string
      organisation_identification_issuer:
        type: string
      birth_date:
        type: string
        format: date
      birth_city:
        type: string
      birth_country:
        type: string
      birth_province:
        type: string

  ReturnPayment:
    type: object
    required:
      - id
      - organisation_id
    properties:
      type:
        type: string
        pattern: ^[A-Za-z_]*$
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        type: object
        properties:
          amount:
            type: string
            pattern: ^[0-9.]{0,20}$
          currency:
            type: string
          return_code:
            type: string
          scheme_transaction_id:
            type: string
          limit_breach_start_datetime:
            type: string
            format: "date-time"
            readOnly: true
          limit_breach_end_datetime:
            type: string
            format: "date-time"
            readOnly: true
      relationships:
        type: object
        properties:
          payment:
            $ref: "#/definitions/RelationshipLinks"
          return_admission:
            $ref: "#/definitions/RelationshipLinks"
          return_submission:
            $ref: "#/definitions/RelationshipLinks"

  ReversalPayment:
    type: object
    required:
      - id
      - organisation_id
    properties:
      type:
        type: string
        pattern: ^[A-Za-z_]*$
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        type: object
      relationships:
        type: object
        properties:
          payment:
            $ref: "#/definitions/RelationshipLinks"
          reversal_admission:
            $ref: "#/definitions/RelationshipLinks"

  ReversalReturn:
    type: object
    required:
      - id
      - organisation_id
    properties:
      type:
        type: string
        pattern: ^[A-Za-z_]*$
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        type: object
      relationships:
        type: object
        properties:
          payment_return:
            $ref: "#/definitions/RelationshipLinks"
          return_reversal_admission:
            $ref: "#/definitions/RelationshipLinks"

  NewPaymentSubmission:
    type: object
    required:
      - id
      - organisation_id
    properties:
      type:
        type: string
        pattern: ^[A-Za-z_]*$
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      relationships:
        type: object
        properties:
          validations:
            $ref: "#/definitions/RelationshipLinks"

  PaymentSubmission:
    type: object
    required:
      - id
      - organisation_id
    properties:
      type:
        type: string
        pattern: ^[A-Za-z_]*$
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        type: object
        properties:
          status:
            $ref: "#/definitions/PaymentSubmissionStatus"
          scheme_status_code:
            type: string
          status_reason:
            type: string
          submission_datetime:
            type: string
            format: "date-time"
            readOnly: true
          settlement_date:
            type: string
            format: "date"
          settlement_cycle:
            type: integer
            minimum: 0
          redirected_bank_id:
            type: string
          redirected_account_number:
            type: string
          limit_breach_start_datetime:
            type: string
            format: "date-time"
            readOnly: true
          limit_breach_end_datetime:
            type: string
            format: "date-time"
            readOnly: true
          transaction_start_datetime:
            type: string
            format: "date-time"
            readOnly: true
      relationships:
        $ref: "#/definitions/PaymentSubmissionRelationships"

  PaymentSubmissionRelationships:
    type: object
    properties:
      payment:
        $ref: "#/definitions/RelationshipLinks"
      validations:
        $ref: "#/definitions/RelationshipLinks"

  PaymentAdmission:
    type: object
    required:
      - id
      - organisation_id
    properties:
      type:
        type: string
        pattern: ^[A-Za-z_]*$
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        type: object
        properties:
          status:
            $ref: "#/definitions/PaymentAdmissionStatus"
          scheme_status_code:
            type: string
          status_reason:
            $ref: "#/definitions/PaymentAdmissionStatusReason"
          admission_datetime:
            type: string
            format: "date-time"
            readOnly: true
          settlement_date:
            type: string
            format: "date"
          settlement_cycle:
            type: integer
            minimum: 0
      relationships:
        type: object
        properties:
          payment:
            $ref: "#/definitions/RelationshipLinks"

  NewPaymentAdmission:
    type: object
    required:
      - id
      - organisation_id
    properties:
      type:
        type: string
        pattern: ^[A-Za-z_]*$
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        type: object
        properties:
          scheme_status_code:
            type: string
          admission_datetime:
            type: string
            format: "date-time"
            readOnly: true
          settlement_date:
            type: string
            format: "date"
          settlement_cycle:
            type: integer
            minimum: 0
          source_gateway:
            type: string

  NewReturnSubmission:
    type: object
    required:
      - id
      - organisation_id
    properties:
      type:
        type: string
        pattern: ^[A-Za-z_]*$
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      relationships:
        $ref: "#/definitions/ReturnSubmissionRelationships"

  ReturnSubmission:
    type: object
    required:
      - id
      - organisation_id
    properties:
      type:
        type: string
        pattern: ^[A-Za-z_]*$
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        type: object
        properties:
          scheme_status_code:
            type: string
          status_reason:
            type: string
          submission_datetime:
            type: string
            format: "date-time"
            readOnly: true
          settlement_date:
            type: string
            format: "date"
          settlement_cycle:
            type: integer
            minimum: 0
          status:
            $ref: "#/definitions/ReturnSubmissionStatus"
          redirected_bank_id:
            type: string
          redirected_account_number:
            type: string
          limit_breach_start_datetime:
            type: string
            format: "date-time"
            readOnly: true
          limit_breach_end_datetime:
            type: string
            format: "date-time"
            readOnly: true
          transaction_start_datetime:
            type: string
            format: "date-time"
            readOnly: true
      relationships:
        $ref: "#/definitions/ReturnSubmissionRelationships"

  ReturnSubmissionRelationships:
    type: object
    properties:
      payment_return:
        $ref: "#/definitions/RelationshipLinks"
      validations:
        $ref: "#/definitions/RelationshipLinks"

  ReturnAdmission:
    type: object
    required:
      - id
      - organisation_id
    properties:
      type:
        type: string
        pattern: ^[A-Za-z_]*$
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        type: object
        properties:
          scheme_status_code:
            type: string
          status_reason:
            type: string
          admission_datetime:
            type: string
            format: "date-time"
            readOnly: true
          settlement_date:
            type: string
            format: "date"
          settlement_cycle:
            type: integer
            minimum: 0
          status:
            $ref: "#/definitions/ReturnAdmissionStatus"
      relationships:
        $ref: "#/definitions/ReturnAdmissionRelationships"

  ReturnAdmissionRelationships:
    type: object
    properties:
      payment_return:
        $ref: "#/definitions/RelationshipLinks"
      validations:
        $ref: "#/definitions/RelationshipLinks"

  NewReturnAdmission:
    type: object
    required:
      - id
      - organisation_id
    properties:
      type:
        type: string
        pattern: ^[A-Za-z_]*$
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        type: object
        properties:
          scheme_status_code:
            type: string
          status_reason:
            type: string
          settlement_date:
            type: string
            format: "date"
          settlement_cycle:
            type: integer
            minimum: 0
          source_gateway:
            type: string
      relationships:
        type: object
        properties:
          validations:
            $ref: "#/definitions/RelationshipLinks"

  ReversalAdmission:
    type: object
    required:
      - id
      - organisation_id
    properties:
      type:
        type: string
        pattern: ^[A-Za-z_]*$
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        type: object
        properties:
          scheme_status_code:
            type: string
          source_gateway:
            type: string
      relationships:
        type: object
        properties:
          reversal:
            $ref: "#/definitions/RelationshipLinks"

  ReturnReversalAdmission:
    type: object
    required:
      - id
      - organisation_id
    properties:
      type:
        type: string
        pattern: ^[A-Za-z_]*$
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        type: object
        properties:
          source_gateway:
            type: string
          scheme_status_code:
            type: string
      relationships:
        type: object
        properties:
          payment_return_reversal:
            $ref: "#/definitions/RelationshipLinks"

  PaymentSubmissionValidation:
    type: object
    required:
      - id
      - organisation_id
    properties:
      type:
        type: string
        pattern: ^[A-Za-z_]*$
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        type: object
        properties:
          source:
            $ref: "#/definitions/ValidationSource"
          status:
            $ref: "#/definitions/ValidationStatus"
          response:
            type: string

  ReturnSubmissionValidation:
    type: object
    required:
      - id
      - organisation_id
    properties:
      type:
        type: string
        pattern: ^[A-Za-z_]*$
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        type: object
        properties:
          source:
            $ref: "#/definitions/ValidationSource"
          status:
            $ref: "#/definitions/ValidationStatus"
          response:
            type: string

  PaymentCreation:
    type: object
    properties:
      data:
        $ref: "#/definitions/Payment"

  ReturnCreation:
    type: object
    properties:
      data:
        $ref: "#/definitions/ReturnPayment"

  ReversalCreation:
    type: object
    properties:
      data:
        $ref: "#/definitions/ReversalPayment"

  ReturnReversalCreation:
    type: object
    properties:
      data:
        $ref: "#/definitions/ReversalReturn"

  PaymentAdmissionCreation:
    type: object
    properties:
      data:
        $ref: "#/definitions/NewPaymentAdmission"

  PaymentSubmissionCreation:
    type: object
    properties:
      data:
        $ref: "#/definitions/NewPaymentSubmission"

  ReturnSubmissionCreation:
    type: object
    properties:
      data:
        $ref: "#/definitions/NewReturnSubmission"

  ReturnAdmissionCreation:
    type: object
    properties:
      data:
        $ref: "#/definitions/NewReturnAdmission"

  ReversalAdmissionCreation:
    type: object
    properties:
      data:
        $ref: "#/definitions/ReversalAdmission"

  ReturnReversalAdmissionCreation:
    type: object
    properties:
      data:
        $ref: "#/definitions/ReturnReversalAdmission"

  PaymentAmendment:
    type: object
    properties:
      data:
        $ref: "#/definitions/Payment"

  PaymentSubmissionAmendment:
    type: object
    properties:
      data:
        $ref: "#/definitions/PaymentSubmission"

  ReturnSubmissionAmendment:
    type: object
    properties:
      data:
        $ref: "#/definitions/ReturnSubmission"

  PaymentCreationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/Payment"
      links:
        $ref: "#/definitions/Links"

  ReturnCreationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/ReturnPayment"
      links:
        $ref: "#/definitions/Links"

  ReversalCreationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/ReversalPayment"
      links:
        $ref: "#/definitions/Links"

  ReturnReversalCreationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/ReversalReturn"
      links:
        $ref: "#/definitions/Links"

  PaymentDetailsResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/Payment"
      links:
        $ref: "#/definitions/Links"

  ReturnDetailsResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/ReturnPayment"
      links:
        $ref: "#/definitions/Links"

  ReversalDetailsResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/ReversalPayment"
      links:
        $ref: "#/definitions/Links"

  ReturnReversalDetailsResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/ReversalReturn"
      links:
        $ref: "#/definitions/Links"

  PaymentDetailsListResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/Payment"
      links:
        $ref: "#/definitions/Links"

  PaymentAdmissionCreationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/PaymentAdmission"
      links:
        $ref: "#/definitions/Links"

  PaymentSubmissionCreationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/PaymentSubmission"
      links:
        $ref: "#/definitions/Links"

  ReturnSubmissionCreationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/ReturnSubmission"
      links:
        $ref: "#/definitions/Links"

  ReturnAdmissionCreationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/ReturnAdmission"
      links:
        $ref: "#/definitions/Links"

  ReversalAdmissionCreationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/ReversalAdmission"
      links:
        $ref: "#/definitions/Links"

  ReturnReversalAdmissionCreationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/ReturnReversalAdmission"
      links:
        $ref: "#/definitions/Links"

  PaymentAdmissionDetailsResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/PaymentAdmission"
      links:
        $ref: "#/definitions/Links"

  PaymentSubmissionDetailsResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/PaymentSubmission"
      links:
        $ref: "#/definitions/Links"

  ReturnSubmissionDetailsResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/ReturnSubmission"
      links:
        $ref: "#/definitions/Links"

  ReturnAdmissionDetailsResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/ReturnAdmission"
      links:
        $ref: "#/definitions/Links"

  ReversalAdmissionDetailsResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/ReversalAdmission"
      links:
        $ref: "#/definitions/Links"

  ReturnReversalAdmissionDetailsResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/ReturnReversalAdmission"
      links:
        $ref: "#/definitions/Links"

  PaymentSubmissionDetailsListResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/PaymentSubmission"
      links:
        $ref: "#/definitions/Links"

  PaymentSubmissionValidationCreation:
    type: object
    properties:
      data:
        $ref: "#/definitions/PaymentSubmissionValidation"

  ReturnSubmissionValidationCreation:
    type: object
    properties:
      data:
        $ref: "#/definitions/ReturnSubmissionValidation"

  PaymentSubmissionValidationCreationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/PaymentSubmissionValidation"

  ReturnSubmissionValidationCreationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/ReturnSubmissionValidation"

  RelationshipLinks:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/RelationshipData"

  PaymentSubmittedEvent:
    type: object
    properties:
      payment_submission:
        $ref: "#/definitions/PaymentSubmission"
      payment:
        $ref: "#/definitions/Payment"

  ReturnSubmittedEvent:
    type: object
    properties:
      payment:
        $ref: "#/definitions/Payment"
      return_payment:
        $ref: "#/definitions/ReturnPayment"
      return_submission:
        $ref: "#/definitions/ReturnSubmission"

  RelationshipData:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
        format: uuid

  RelationshipsResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/Relationship"
      links:
        $ref: "#/definitions/Links"

  Relationship:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
        format: uuid

  PaymentAdmissionStatus:
    type: string
    enum:
      - confirmed
      - failed

  PaymentAdmissionStatusReason:
    type: string
    enum:
      - accepted
      - invalid_beneficiary_details
      - bankid_not_provisioned
      - unknown_accountnumber

  PaymentSubmissionStatus:
    type: string
    enum:
      - accepted
      - limit_check_pending
      - limit_check_failed
      - limit_check_passed
      - released_to_gateway
      - queued_for_delivery
      - delivery_confirmed
      - delivery_failed
      - submitted
      - validation_pending

  ReturnSubmissionStatus:
    type: string
    enum:
      - accepted
      - limit_check_pending
      - limit_check_failed
      - limit_check_passed
      - released_to_gateway
      - delivery_confirmed
      - delivery_failed
      - submitted
      - validation_pending

  ReturnAdmissionStatus:
    type: string
    enum:
      - confirmed
      - failed

  ValidationStatus:
    type: string
    enum:
      - failed
      - passed
      - not_accepted

  ValidationSource:
    type: string
    enum:
      - payment_api
      - payport_interface
      - starling_gateway
      - bacs_gateway

  ChargesInformation:
    type: object
    properties:
      bearer_code:
        type: string
      receiver_charges_amount:
        type: string
      receiver_charges_currency:
        type: string
      sender_charges:
        type: array
        items:
          type: object
          properties:
            amount:
              type: string
            currency:
              type: string

  PositionDetailsListResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/Position"

  Position:
    type: object
    required:
      - id
      - organisation_id
      - attributes
    properties:
      type:
        type: string
        pattern: ^[A-Za-z_]*$
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        type: object
        properties:
          scheme:
            type: string
            pattern: ^[A-Za-z_\-]*$
          limit:
            type: string
            pattern: ^[0-9.]{0,20}$
          position:
            type: string
            pattern: ^[0-9.]{0,20}$
      links:
        $ref: "#/definitions/Self"

  SettlementCycle:
    type: object
    required:
      - id
      - attributes
    properties:
      id:
        type: string
        format: uuid
      attributes:
        type: object
        properties:
          gateway:
            type: string
            pattern: ^[A-Za-z_\-]*$
          settlement_cycle_type:
            type: string
            pattern: ^[A-Za-z_\-]*$
          settlement_cycle_number:
            type: integer
            minimum: 1

  SettlementCycleCreation:
    type: object
    properties:
      data:
        $ref: "#/definitions/SettlementCycle"

  SettlementCycleCreationResponse:
    type: object

  PaymentDefaultsCreate:
    type: object
    properties:
      data:
        $ref: "#/definitions/PaymentDefaults"

  PaymentDefaultsCreateResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/PaymentDefaults"

  PaymentDefaultsResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/PaymentDefaults"

  PaymentDefaultsAmendment:
    type: object
    properties:
      data:
        $ref: "#/definitions/PaymentDefaults"

  PaymentDefaultsListResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/PaymentDefaults"
      links:
        $ref: "#/definitions/Links"
      meta:
        $ref: "#/definitions/RecordCount"

  PaymentDefaults:
    type: object
    properties:
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        type: object
        properties:
          default_payment_scheme:
            type: string

  # paymentapi - end

  # directdebit-api start

  DirectDebitDetailsListResponse:
    type: object
    x-access:
      - Public
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/DirectDebit"
      links:
        $ref: "#/definitions/Links"

  DirectDebit:
    type: object
    x-access:
      - Public
    properties:
      type:
        type: string
        pattern: ^[A-Za-z_]*$
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        type: object
        properties:
          amount:
            type: string
            pattern: ^[0-9.]{0,20}$
          beneficiary_party:
            type: object
            properties:
              account_name:
                type: string
              account_number:
                type: string
              account_number_code:
                $ref: "#/definitions/AccountNumberCode"
              account_type:
                type: integer
              account_with:
                $ref: "#/definitions/AccountHoldingEntity"
              country:
                type: string
              address:
                type: array
                items:
                  type: string
          currency:
            type: string
          debtor_party:
            type: object
            properties:
              account_name:
                type: string
              account_number:
                type: string
              account_number_code:
                $ref: "#/definitions/AccountNumberCode"
              account_with:
                $ref: "#/definitions/AccountHoldingEntity"
              country:
                type: string
              address:
                type: array
                items:
                  type: string
          numeric_reference:
            type: string
          processing_date:
            type: string
            format: date
          scheme_processing_date:
            type: string
            format: date
          reference:
            type: string
          scheme_payment_type:
            type: string
          payment_scheme:
            type: string
          clearing_id:
            type: string
          unique_scheme_id:
            type: string
      relationships:
        $ref: "#/definitions/DirectDebitRelationships"

  DirectDebitRelationships:
    type: object
    x-access:
      - Public
    properties:
      direct_debit_admission:
        type: object
        properties:
          data:
            type: array
            items:
              $ref: "#/definitions/DirectDebitAdmission"

  DirectDebitAdmission:
    type: object
    x-access:
      - Public
    properties:
      type:
        type: string
        pattern: ^[A-Za-z_]*$
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        type: object
        properties:
          admission_datetime:
            type: string
            format: "date-time"
            readOnly: true
          status:
            $ref: "#/definitions/DirectDebitAdmissionStatus"
          scheme_status_code:
            type: string
          scheme_status_code_description:
            type: string
          status_reason:
            $ref: "#/definitions/DirectDebitAdmissionStatusReason"

  DirectDebitAdmissionStatus:
    type: string
    x-access:
      - Public
    enum:
      - confirmed
      - failed

  DirectDebitAdmissionStatusReason:
    type: string
    x-access:
      - Public
    enum:
      - accepted
      - invalid_beneficiary_details
      - bankid_not_provisioned
      - unknown_accountnumber

  # directdebit-api end

  # mandate-api - start

  MandateDetailsListResponse:
    type: object
    x-access:
      - Public
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/Mandate"
      links:
        $ref: "#/definitions/Links"

  Mandate:
    type: object
    x-access:
      - Public
    properties:
      type:
        type: string
        pattern: ^[A-Za-z_]*$
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        $ref: "#/definitions/MandateAttributes"
      relationships:
        $ref: "#/definitions/MandateRelationships"

  MandateAttributes:
    type: object
    x-access:
      - Public
    properties:
      amount:
        type: string
        pattern: ^[0-9.]{0,20}$
      beneficiary_party:
        $ref: "#/definitions/MandateAttributesBeneficiaryParty"
      currency:
        type: string
      debtor_party:
        $ref: "#/definitions/MandateAttributesDebtorParty"
      numeric_reference:
        type: string
      processing_date:
        type: string
        format: date
      scheme_processing_date:
        type: string
        format: date
      reference:
        type: string
      scheme_payment_type:
        type: string
      payment_scheme:
        type: string
      clearing_id:
        type: string
      unique_scheme_id:
        type: string
      frequency:
        $ref: "#/definitions/MandateFrequency"

  MandateAttributesDebtorParty:
    type: object
    x-access:
      - Public
    properties:
      account_name:
        type: string
        pattern: ^[A-Za-z0-9 \/\-?:\(\)\.,’\+\#\=\!\"%&\*\<\>;\{@\r\n]*$
      account_number:
        type: string
        pattern: ^[A-Z0-9]{6,34}$
      account_number_code:
        $ref: "#/definitions/AccountNumberCode"
      account_with:
        $ref: "#/definitions/AccountHoldingEntity"
      country:
        type: string
      address:
        type: array
        items:
          type: string

  MandateAttributesBeneficiaryParty:
    type: object
    x-access:
      - Public
    properties:
      account_name:
        type: string
        pattern: ^[A-Za-z0-9 \/\-?:\(\)\.,’\+\#\=\!\"%&\*\<\>;\{@\r\n]*$
      account_number:
        type: string
        pattern: ^[A-Z0-9]{6,34}$
      account_number_code:
        $ref: "#/definitions/AccountNumberCode"
      account_type:
        type: integer
      account_with:
        $ref: "#/definitions/AccountHoldingEntity"
      country:
        type: string
      address:
        type: array
        items:
          type: string

  MandateRelationships:
    type: object
    x-access:
      - Public
    properties:
      mandate_admission:
        type: object
        properties:
          data:
            type: array
            items:
              $ref: "#/definitions/MandateAdmission"

  MandateAdmission:
    type: object
    x-access:
      - Public
    properties:
      type:
        type: string
        pattern: ^[A-Za-z_]*$
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        type: object
        properties:
          admission_datetime:
            type: string
            format: "date-time"
            readOnly: true
          status:
            $ref: "#/definitions/MandateAdmissionStatus"
          scheme_status_code:
            type: string
          scheme_status_code_description:
            type: string
          status_reason:
            $ref: "#/definitions/MandateAdmissionStatusReason"

  MandateAdmissionStatus:
    type: string
    x-access:
      - Public
    enum:
      - confirmed
      - failed

  MandateAdmissionStatusReason:
    type: string
    x-access:
      - Public
    enum:
      - accepted
      - invalid_beneficiary_details
      - bankid_not_provisioned
      - unknown_accountnumber

  MandateFrequency:
    type: string
    x-access:
      - Public
    enum:
      - daily
      - weekly
      - fortnightly
      - monthly
      - bimonthly
      - quarterly
      - yearly

  # mandate-api - end

  # open banking

  CoPAssociation:
    type: object
    required:
      - id
      - organisation_id
      - attributes
      - relationships
    properties:
      type:
        $ref: "#/definitions/ResourceType"
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      created_on:
        type: string
        format: date-time
      modified_on:
        type: string
        format: date-time
      organisation_id:
        type: string
        format: uuid
      attributes:
        $ref: "#/definitions/CoPAssociationAttributes"
      relationships:
        $ref: "#/definitions/CoPAssociationRelationships"

  CoPAssociationRelationships:
    type: object
    properties:
      signing_certificate:
        $ref: "#/definitions/SigningCertificate"

  SigningCertificate:
    type: object
    properties:
      data:
        type: object
        required:
          - key_id
          - dn
        properties:
          type:
            type: string
            enum:
              - certificates
          id:
            type: string
            format: uuid
            x-nullable: true
          key_id:
            type: string
            format: uuid
          dn:
            type: string

  CoPAssociationAttributes:
    type: object
    required:
      - open_banking_organisation_id
      - public_key_id
      - matching_criteria
    properties:
      open_banking_organisation_id:
        type: string
      public_key_id:
        type: string
      matching_criteria:
        $ref: "#/definitions/MatchingCriteria"

  CoPAssociationCreation:
    type: object
    required:
      - data
    properties:
      data:
        $ref: "#/definitions/CoPAssociation"

  CoPAssociationCreationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/CoPAssociation"
      links:
        $ref: "#/definitions/Links"

  CoPAssociationDetailsResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/CoPAssociation"
      links:
        $ref: "#/definitions/Links"

  CoPAssociationDetailsListResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/CoPAssociation"
      links:
        $ref: "#/definitions/Links"

  MatchingCriteria:
    type: object
    required:
      - exact_match_threshold
      - close_match_threshold
    properties:
      exact_match_threshold:
        type: string
      close_match_threshold:
        type: string

  # open banking - end

  #SsoUser
  SsoUser:
    type: object
    x-access:
      - Public
    properties:
      type:
        type: string
        description: "Name of the resource type"
        example: "PublicKey"
      id:
        type: string
        format: uuid
        example: "7826c3cb-d6fd-41d0-b187-dc23ba928772"
        description: "Unique resource ID"
      version:
        type: integer
        minimum: 0
        description: "Version number"
        example: 0
      organisation_id:
        type: string
        format: uuid
        example: "ee2fb143-6dfe-4787-b183-ca8ddd4164d2"
        description: "Unique ID of the organisation this resource is created by"
      attributes:
        type: object
        properties:
          sso_id:
            type: string
            example: "john.doe@form3.tech"
            description: "Sso user id"
          user_id:
            type: string
            format: uuid
            example: "7826c3cb-d6fd-41d0-b187-dc23ba928772"
            description: "Unique ID of the form3 user"

  SsoUserCreation:
    type: object
    x-access:
      - Public
    properties:
      data:
        $ref: "#/definitions/SsoUser"

  SsoUserCreationResponse:
    type: object
    x-access:
      - Public
    properties:
      data:
        $ref: "#/definitions/SsoUser"
      links:
        $ref: "#/definitions/Links"

  SsoUserDetailsResponse:
    type: object
    x-access:
      - Public
    properties:
      data:
        $ref: "#/definitions/SsoUser"
      links:
        $ref: "#/definitions/Links"

  #PublicKey
  PublicKey:
    type: object
    x-access:
      - Public
    properties:
      type:
        type: string
        description: "Name of the resource type"
        example: "PublicKey"
      id:
        type: string
        format: uuid
        example: "7826c3cb-d6fd-41d0-b187-dc23ba928772"
        description: "Unique resource ID"
      version:
        type: integer
        minimum: 0
        description: "Version number"
        example: 0
      organisation_id:
        type: string
        format: uuid
        example: "ee2fb143-6dfe-4787-b183-ca8ddd4164d2"
        description: "Unique ID of the organisation this resource is created by"
      attributes:
        type: object
        properties:
          public_key:
            type: string

  PublicKeyCreationResponse:
    type: object
    x-access:
      - Public
    properties:
      data:
        $ref: "#/definitions/PublicKey"
      links:
        $ref: "#/definitions/Links"

  UserPublicKeyListResponse:
    type: object
    x-access:
      - Public
    properties:
      data:
        type: array
        items:
          properties:
            public_key_id:
              type: string
              format: uuid
      links:
        $ref: "#/definitions/Links"
  # Signing_keys start
  SigningKeysCreation:
    required:
      - data
    type: object
    properties:
      data:
        $ref: "#/definitions/SigningKeysRequestData"
        x-order: 1
  SigningKeysResponse:
    x-access:
      - Public
    type: object
    required:
      - data
    properties:
      data:
        $ref: '#/definitions/SigningKeysResponseData'
        x-order: 1
  SigningKeysRequestData:
    x-access:
      - Public
    type: object
    required:
      - type
      - id
      - organisation_id
    properties:
      type:
        type: string
        enum:
          - signing_keys
      organisation_id:
        type: string
      id:
        type: string
  SigningKeysResponseData:
    x-access:
      - Public
    type: object
    required:
      - id
      - organisation_id
      - type
      - attributes
      - version
    properties:
      type:
        $ref: '#/definitions/SigningKeysResourceType'
        x-order: 1
      id:
        type: string
        format: uuid
        x-order: 2
      version:
        type: number
        x-order: 3
      organisation_id:
        type: string
        format: uuid
        x-order: 4
      created_on:
        type: string
        format: 'date-time'
        x-order: 5
      modified_on:
        type: string
        format: 'date-time'
        x-order: 6
      attributes:
        $ref: '#/definitions/SigningKeysAttributes'
        x-order: 7
  SigningKeysAttributes:
    x-access:
      - Public
    type: object
    required:
      - public_key
    properties:
      public_key:
        type: string
        x-order: 1

  SigningKeysResourceType:
    x-access:
      - Public
    type: string
    enum:
      - signing_keys
  # Signing_keys end

  #reconciliation_service start
  ReconciliationAssociation:
    type: object
    properties:
      type:
        type: string
        description: "Name of the resource type"
        enum:
          - reconciliation_associations
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      created_on:
        type: string
        format: date-time
        readOnly: true
      modified_on:
        type: string
        format: date-time
        readOnly: true
      attributes:
        $ref: "#/definitions/ReconciliationAssociationAttributes"

  ReconciliationAssociationAttributes:
    type: object
    required:
      - name
      - bank_ids
      - scheme_type
    properties:
      name:
        type: string
        x-nullable: false
        minLength: 1
      bank_ids:
        type: array
        items:
          type: string
          minLength: 1
        minItems: 1
        uniqueItems: true
      scheme_type:
        type: string
        x-nullable: false
        enum:
          - SEPAINSTANT
          - FPS

  ReconciliationNewAssociation:
    type: object
    required:
      - id
      - organisation_id
      - type
      - attributes
    properties:
      type:
        type: string
        enum:
          - reconciliation_associations
        x-nullable: false
      id:
        type: string
        format: uuid
        x-nullable: false
      organisation_id:
        type: string
        format: uuid
        x-nullable: false
      attributes:
        $ref: "#/definitions/ReconciliationAssociationAttributes"

  ReconciliationAssociationCreation:
    type: object
    properties:
      data:
        $ref: '#/definitions/ReconciliationNewAssociation'

  ReconciliationAssociationDetailsResponse:
    type: object
    properties:
      data:
        $ref: '#/definitions/ReconciliationAssociation'
      links:
        $ref: '#/definitions/Links'

  ReconciliationAssociationDetailsListResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/ReconciliationAssociation'
      links:
        $ref: '#/definitions/Links'


  #reconciliation_service stop

  SepaDDAssociation:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        $ref: "#/definitions/SepaDDAssociationAttributes"

  NewSepaDDAssociation:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
        format: uuid
      version:
        type: integer
        minimum: 0
      organisation_id:
        type: string
        format: uuid
      attributes:
        $ref: "#/definitions/SepaDDAssociationAttributes"

  SepaDDAssociationAttributes:
    type: object
    properties:
      bic:
        type: string
      businessUser:
        type: string
      receiverBusinessUser:
        type: string
      localInstrument:
        type: string

  SepaDDAssociationPatch:
    type: object
    properties:
      data:
        $ref: "#/definitions/SepaDDAssociationUpdate"

  SepaDDAssociationUpdate:
    type: object
    required:
      - id
      - version
      - type
      - organisation_id
      - attributes
    properties:
      id:
        type: string
        format: uuid
        x-nullable: false
      type:
        type: string
        x-nullable: false
      version:
        type: integer
        minimum: 0
        x-nullable: true
      organisation_id:
        type: string
        format: uuid
        x-nullable: false
      attributes:
        $ref: "#/definitions/SepaDDAssociationAttributes"

  SepaDDAssociationCreation:
    type: object
    properties:
      data:
        $ref: "#/definitions/NewSepaDDAssociation"

  SepaDDAssociationCreationResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/SepaDDAssociation"
      links:
        $ref: "#/definitions/Links"

  SepaDDAssociationDetailsResponse:
    type: object
    properties:
      data:
        $ref: "#/definitions/SepaDDAssociation"
      links:
        $ref: "#/definitions/Links"

  SepaDDAssociationDetailsListResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/SepaDDAssociation"
      links:
        $ref: "#/definitions/Links"

responses:
  400BadRequest:
    description: Bad Request
    schema:
      $ref: "#/definitions/ApiError"
  401Unauthorized:
    description: Authentication credentials were missing or incorrect
    schema:
      $ref: "#/definitions/ApiError"
  403Forbidden:
    description: Forbidden
    schema:
      $ref: "#/definitions/ApiError"
  404NotFound:
    description: Record not found
    schema:
      $ref: "#/definitions/ApiError"
  409Conflict:
    description: Conflict
    schema:
      $ref: "#/definitions/ApiError"
  429TooManyRequests:
    description: The request cannot be served due to the application’s rate limit
    schema:
      $ref: "#/definitions/ApiError"
  500InternalServerError:
    description: Internal Server Error
    schema:
      $ref: "#/definitions/ApiError"
  503ServiceUnavailable:
    description: The server is up, but overloaded with requests. Try again later.
    schema:
      $ref: "#/definitions/ApiError"
