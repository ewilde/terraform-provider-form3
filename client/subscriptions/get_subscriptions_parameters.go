// Code generated by go-swagger; DO NOT EDIT.

package subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetSubscriptionsParams creates a new GetSubscriptionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetSubscriptionsParams() *GetSubscriptionsParams {
	return &GetSubscriptionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetSubscriptionsParamsWithTimeout creates a new GetSubscriptionsParams object
// with the ability to set a timeout on a request.
func NewGetSubscriptionsParamsWithTimeout(timeout time.Duration) *GetSubscriptionsParams {
	return &GetSubscriptionsParams{
		timeout: timeout,
	}
}

// NewGetSubscriptionsParamsWithContext creates a new GetSubscriptionsParams object
// with the ability to set a context for a request.
func NewGetSubscriptionsParamsWithContext(ctx context.Context) *GetSubscriptionsParams {
	return &GetSubscriptionsParams{
		Context: ctx,
	}
}

// NewGetSubscriptionsParamsWithHTTPClient creates a new GetSubscriptionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetSubscriptionsParamsWithHTTPClient(client *http.Client) *GetSubscriptionsParams {
	return &GetSubscriptionsParams{
		HTTPClient: client,
	}
}

/* GetSubscriptionsParams contains all the parameters to send to the API endpoint
   for the get subscriptions operation.

   Typically these are written to a http.Request.
*/
type GetSubscriptionsParams struct {

	/* FilterEventType.

	   Filter by event type
	*/
	FilterEventType []string

	/* PageNumber.

	   Which page to select
	*/
	PageNumber *int64

	/* PageSize.

	   Number of items to select
	*/
	PageSize *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get subscriptions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSubscriptionsParams) WithDefaults() *GetSubscriptionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get subscriptions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSubscriptionsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get subscriptions params
func (o *GetSubscriptionsParams) WithTimeout(timeout time.Duration) *GetSubscriptionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get subscriptions params
func (o *GetSubscriptionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get subscriptions params
func (o *GetSubscriptionsParams) WithContext(ctx context.Context) *GetSubscriptionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get subscriptions params
func (o *GetSubscriptionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get subscriptions params
func (o *GetSubscriptionsParams) WithHTTPClient(client *http.Client) *GetSubscriptionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get subscriptions params
func (o *GetSubscriptionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilterEventType adds the filterEventType to the get subscriptions params
func (o *GetSubscriptionsParams) WithFilterEventType(filterEventType []string) *GetSubscriptionsParams {
	o.SetFilterEventType(filterEventType)
	return o
}

// SetFilterEventType adds the filterEventType to the get subscriptions params
func (o *GetSubscriptionsParams) SetFilterEventType(filterEventType []string) {
	o.FilterEventType = filterEventType
}

// WithPageNumber adds the pageNumber to the get subscriptions params
func (o *GetSubscriptionsParams) WithPageNumber(pageNumber *int64) *GetSubscriptionsParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the get subscriptions params
func (o *GetSubscriptionsParams) SetPageNumber(pageNumber *int64) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the get subscriptions params
func (o *GetSubscriptionsParams) WithPageSize(pageSize *int64) *GetSubscriptionsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get subscriptions params
func (o *GetSubscriptionsParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WriteToRequest writes these params to a swagger request
func (o *GetSubscriptionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FilterEventType != nil {

		// binding items for filter[event_type]
		joinedFilterEventType := o.bindParamFilterEventType(reg)

		// query array param filter[event_type]
		if err := r.SetQueryParam("filter[event_type]", joinedFilterEventType...); err != nil {
			return err
		}
	}

	if o.PageNumber != nil {

		// query param page[number]
		var qrPageNumber int64

		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt64(qrPageNumber)
		if qPageNumber != "" {

			if err := r.SetQueryParam("page[number]", qPageNumber); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param page[size]
		var qrPageSize int64

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("page[size]", qPageSize); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetSubscriptions binds the parameter filter[event_type]
func (o *GetSubscriptionsParams) bindParamFilterEventType(formats strfmt.Registry) []string {
	filterEventTypeIR := o.FilterEventType

	var filterEventTypeIC []string
	for _, filterEventTypeIIR := range filterEventTypeIR { // explode []string

		filterEventTypeIIV := filterEventTypeIIR // string as string
		filterEventTypeIC = append(filterEventTypeIC, filterEventTypeIIV)
	}

	// items.CollectionFormat: "csv"
	filterEventTypeIS := swag.JoinByFormat(filterEventTypeIC, "csv")

	return filterEventTypeIS
}
