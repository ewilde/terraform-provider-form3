// Code generated by go-swagger; DO NOT EDIT.

package associations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/form3tech-oss/terraform-provider-form3/models"
)

// GetStarlingReader is a Reader for the GetStarling structure.
type GetStarlingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetStarlingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetStarlingOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetStarlingBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetStarlingUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetStarlingForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetStarlingNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGetStarlingConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetStarlingTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetStarlingInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetStarlingServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetStarlingOK creates a GetStarlingOK with default headers values
func NewGetStarlingOK() *GetStarlingOK {
	return &GetStarlingOK{}
}

/*GetStarlingOK handles this case with default header values.

List of associations
*/
type GetStarlingOK struct {
	Payload *models.AssociationDetailsListResponse
}

func (o *GetStarlingOK) Error() string {
	return fmt.Sprintf("[GET /starling][%d] getStarlingOK  %+v", 200, o.Payload)
}

func (o *GetStarlingOK) GetPayload() *models.AssociationDetailsListResponse {
	return o.Payload
}

func (o *GetStarlingOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AssociationDetailsListResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStarlingBadRequest creates a GetStarlingBadRequest with default headers values
func NewGetStarlingBadRequest() *GetStarlingBadRequest {
	return &GetStarlingBadRequest{}
}

/*GetStarlingBadRequest handles this case with default header values.

Bad Request
*/
type GetStarlingBadRequest struct {
	Payload *models.APIError
}

func (o *GetStarlingBadRequest) Error() string {
	return fmt.Sprintf("[GET /starling][%d] getStarlingBadRequest  %+v", 400, o.Payload)
}

func (o *GetStarlingBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetStarlingBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStarlingUnauthorized creates a GetStarlingUnauthorized with default headers values
func NewGetStarlingUnauthorized() *GetStarlingUnauthorized {
	return &GetStarlingUnauthorized{}
}

/*GetStarlingUnauthorized handles this case with default header values.

Authentication credentials were missing or incorrect
*/
type GetStarlingUnauthorized struct {
	Payload *models.APIError
}

func (o *GetStarlingUnauthorized) Error() string {
	return fmt.Sprintf("[GET /starling][%d] getStarlingUnauthorized  %+v", 401, o.Payload)
}

func (o *GetStarlingUnauthorized) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetStarlingUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStarlingForbidden creates a GetStarlingForbidden with default headers values
func NewGetStarlingForbidden() *GetStarlingForbidden {
	return &GetStarlingForbidden{}
}

/*GetStarlingForbidden handles this case with default header values.

Forbidden
*/
type GetStarlingForbidden struct {
	Payload *models.APIError
}

func (o *GetStarlingForbidden) Error() string {
	return fmt.Sprintf("[GET /starling][%d] getStarlingForbidden  %+v", 403, o.Payload)
}

func (o *GetStarlingForbidden) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetStarlingForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStarlingNotFound creates a GetStarlingNotFound with default headers values
func NewGetStarlingNotFound() *GetStarlingNotFound {
	return &GetStarlingNotFound{}
}

/*GetStarlingNotFound handles this case with default header values.

Record not found
*/
type GetStarlingNotFound struct {
	Payload *models.APIError
}

func (o *GetStarlingNotFound) Error() string {
	return fmt.Sprintf("[GET /starling][%d] getStarlingNotFound  %+v", 404, o.Payload)
}

func (o *GetStarlingNotFound) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetStarlingNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStarlingConflict creates a GetStarlingConflict with default headers values
func NewGetStarlingConflict() *GetStarlingConflict {
	return &GetStarlingConflict{}
}

/*GetStarlingConflict handles this case with default header values.

Conflict
*/
type GetStarlingConflict struct {
	Payload *models.APIError
}

func (o *GetStarlingConflict) Error() string {
	return fmt.Sprintf("[GET /starling][%d] getStarlingConflict  %+v", 409, o.Payload)
}

func (o *GetStarlingConflict) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetStarlingConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStarlingTooManyRequests creates a GetStarlingTooManyRequests with default headers values
func NewGetStarlingTooManyRequests() *GetStarlingTooManyRequests {
	return &GetStarlingTooManyRequests{}
}

/*GetStarlingTooManyRequests handles this case with default header values.

The request cannot be served due to the applicationâ€™s rate limit
*/
type GetStarlingTooManyRequests struct {
	Payload *models.APIError
}

func (o *GetStarlingTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /starling][%d] getStarlingTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetStarlingTooManyRequests) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetStarlingTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStarlingInternalServerError creates a GetStarlingInternalServerError with default headers values
func NewGetStarlingInternalServerError() *GetStarlingInternalServerError {
	return &GetStarlingInternalServerError{}
}

/*GetStarlingInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetStarlingInternalServerError struct {
	Payload *models.APIError
}

func (o *GetStarlingInternalServerError) Error() string {
	return fmt.Sprintf("[GET /starling][%d] getStarlingInternalServerError  %+v", 500, o.Payload)
}

func (o *GetStarlingInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetStarlingInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStarlingServiceUnavailable creates a GetStarlingServiceUnavailable with default headers values
func NewGetStarlingServiceUnavailable() *GetStarlingServiceUnavailable {
	return &GetStarlingServiceUnavailable{}
}

/*GetStarlingServiceUnavailable handles this case with default header values.

The server is up, but overloaded with requests. Try again later.
*/
type GetStarlingServiceUnavailable struct {
	Payload *models.APIError
}

func (o *GetStarlingServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /starling][%d] getStarlingServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetStarlingServiceUnavailable) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetStarlingServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
