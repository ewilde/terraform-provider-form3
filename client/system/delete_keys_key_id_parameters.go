// Code generated by go-swagger; DO NOT EDIT.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeleteKeysKeyIDParams creates a new DeleteKeysKeyIDParams object
// with the default values initialized.
func NewDeleteKeysKeyIDParams() *DeleteKeysKeyIDParams {
	var ()
	return &DeleteKeysKeyIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteKeysKeyIDParamsWithTimeout creates a new DeleteKeysKeyIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteKeysKeyIDParamsWithTimeout(timeout time.Duration) *DeleteKeysKeyIDParams {
	var ()
	return &DeleteKeysKeyIDParams{

		timeout: timeout,
	}
}

// NewDeleteKeysKeyIDParamsWithContext creates a new DeleteKeysKeyIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteKeysKeyIDParamsWithContext(ctx context.Context) *DeleteKeysKeyIDParams {
	var ()
	return &DeleteKeysKeyIDParams{

		Context: ctx,
	}
}

// NewDeleteKeysKeyIDParamsWithHTTPClient creates a new DeleteKeysKeyIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteKeysKeyIDParamsWithHTTPClient(client *http.Client) *DeleteKeysKeyIDParams {
	var ()
	return &DeleteKeysKeyIDParams{
		HTTPClient: client,
	}
}

/*DeleteKeysKeyIDParams contains all the parameters to send to the API endpoint
for the delete keys key ID operation typically these are written to a http.Request
*/
type DeleteKeysKeyIDParams struct {

	/*KeyID
	  Key Id

	*/
	KeyID strfmt.UUID
	/*Version
	  Version

	*/
	Version int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete keys key ID params
func (o *DeleteKeysKeyIDParams) WithTimeout(timeout time.Duration) *DeleteKeysKeyIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete keys key ID params
func (o *DeleteKeysKeyIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete keys key ID params
func (o *DeleteKeysKeyIDParams) WithContext(ctx context.Context) *DeleteKeysKeyIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete keys key ID params
func (o *DeleteKeysKeyIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete keys key ID params
func (o *DeleteKeysKeyIDParams) WithHTTPClient(client *http.Client) *DeleteKeysKeyIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete keys key ID params
func (o *DeleteKeysKeyIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithKeyID adds the keyID to the delete keys key ID params
func (o *DeleteKeysKeyIDParams) WithKeyID(keyID strfmt.UUID) *DeleteKeysKeyIDParams {
	o.SetKeyID(keyID)
	return o
}

// SetKeyID adds the keyId to the delete keys key ID params
func (o *DeleteKeysKeyIDParams) SetKeyID(keyID strfmt.UUID) {
	o.KeyID = keyID
}

// WithVersion adds the version to the delete keys key ID params
func (o *DeleteKeysKeyIDParams) WithVersion(version int64) *DeleteKeysKeyIDParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the delete keys key ID params
func (o *DeleteKeysKeyIDParams) SetVersion(version int64) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteKeysKeyIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param key_id
	if err := r.SetPathParam("key_id", o.KeyID.String()); err != nil {
		return err
	}

	// query param version
	qrVersion := o.Version
	qVersion := swag.FormatInt64(qrVersion)
	if qVersion != "" {
		if err := r.SetQueryParam("version", qVersion); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
