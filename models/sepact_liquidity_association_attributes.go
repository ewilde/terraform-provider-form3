// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SepactLiquidityAssociationAttributes sepact liquidity association attributes
//
// swagger:model SepactLiquidityAssociationAttributes
type SepactLiquidityAssociationAttributes struct {

	// address
	// Required: true
	Address SepactLiquidityAddress `json:"address"`

	// Customer Name
	// Required: true
	// Min Length: 1
	Name string `json:"name"`

	// reachable bic
	ReachableBic Bic11 `json:"reachable_bic,omitempty"`

	// settlement bic
	// Required: true
	SettlementBic Bic8 `json:"settlement_bic"`

	// Settlement IBAN
	// Required: true
	SettlementIban string `json:"settlement_iban"`
}

// Validate validates this sepact liquidity association attributes
func (m *SepactLiquidityAssociationAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReachableBic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSettlementBic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSettlementIban(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SepactLiquidityAssociationAttributes) validateAddress(formats strfmt.Registry) error {

	if err := m.Address.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("address")
		}
		return err
	}

	return nil
}

func (m *SepactLiquidityAssociationAttributes) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(m.Name), 1); err != nil {
		return err
	}

	return nil
}

func (m *SepactLiquidityAssociationAttributes) validateReachableBic(formats strfmt.Registry) error {

	if swag.IsZero(m.ReachableBic) { // not required
		return nil
	}

	if err := m.ReachableBic.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("reachable_bic")
		}
		return err
	}

	return nil
}

func (m *SepactLiquidityAssociationAttributes) validateSettlementBic(formats strfmt.Registry) error {

	if err := m.SettlementBic.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("settlement_bic")
		}
		return err
	}

	return nil
}

func (m *SepactLiquidityAssociationAttributes) validateSettlementIban(formats strfmt.Registry) error {

	if err := validate.RequiredString("settlement_iban", "body", string(m.SettlementIban)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SepactLiquidityAssociationAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SepactLiquidityAssociationAttributes) UnmarshalBinary(b []byte) error {
	var res SepactLiquidityAssociationAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
