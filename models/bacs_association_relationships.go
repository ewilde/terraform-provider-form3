// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// BacsAssociationRelationships bacs association relationships
// swagger:model BacsAssociationRelationships
type BacsAssociationRelationships struct {

	// input certificate
	InputCertificate *BacsAssociationCertificateRelationship `json:"input_certificate,omitempty"`

	// messaging certificate
	MessagingCertificate *BacsAssociationCertificateRelationship `json:"messaging_certificate,omitempty"`

	// output certificate
	OutputCertificate *BacsAssociationCertificateRelationship `json:"output_certificate,omitempty"`
}

// Validate validates this bacs association relationships
func (m *BacsAssociationRelationships) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInputCertificate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessagingCertificate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputCertificate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BacsAssociationRelationships) validateInputCertificate(formats strfmt.Registry) error {

	if swag.IsZero(m.InputCertificate) { // not required
		return nil
	}

	if m.InputCertificate != nil {
		if err := m.InputCertificate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("input_certificate")
			}
			return err
		}
	}

	return nil
}

func (m *BacsAssociationRelationships) validateMessagingCertificate(formats strfmt.Registry) error {

	if swag.IsZero(m.MessagingCertificate) { // not required
		return nil
	}

	if m.MessagingCertificate != nil {
		if err := m.MessagingCertificate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("messaging_certificate")
			}
			return err
		}
	}

	return nil
}

func (m *BacsAssociationRelationships) validateOutputCertificate(formats strfmt.Registry) error {

	if swag.IsZero(m.OutputCertificate) { // not required
		return nil
	}

	if m.OutputCertificate != nil {
		if err := m.OutputCertificate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("output_certificate")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BacsAssociationRelationships) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BacsAssociationRelationships) UnmarshalBinary(b []byte) error {
	var res BacsAssociationRelationships
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
