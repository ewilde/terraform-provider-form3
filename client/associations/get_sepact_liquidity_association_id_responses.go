// Code generated by go-swagger; DO NOT EDIT.

package associations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/form3tech-oss/terraform-provider-form3/models"
)

// GetSepactLiquidityAssociationIDReader is a Reader for the GetSepactLiquidityAssociationID structure.
type GetSepactLiquidityAssociationIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSepactLiquidityAssociationIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetSepactLiquidityAssociationIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetSepactLiquidityAssociationIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetSepactLiquidityAssociationIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetSepactLiquidityAssociationIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetSepactLiquidityAssociationIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewGetSepactLiquidityAssociationIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewGetSepactLiquidityAssociationIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetSepactLiquidityAssociationIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewGetSepactLiquidityAssociationIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSepactLiquidityAssociationIDOK creates a GetSepactLiquidityAssociationIDOK with default headers values
func NewGetSepactLiquidityAssociationIDOK() *GetSepactLiquidityAssociationIDOK {
	return &GetSepactLiquidityAssociationIDOK{}
}

/*GetSepactLiquidityAssociationIDOK handles this case with default header values.

Associations details
*/
type GetSepactLiquidityAssociationIDOK struct {
	Payload *models.SepactLiquidityAssociationDetailsResponse
}

func (o *GetSepactLiquidityAssociationIDOK) Error() string {
	return fmt.Sprintf("[GET /sepact-liquidity/{associationId}][%d] getSepactLiquidityAssociationIdOK  %+v", 200, o.Payload)
}

func (o *GetSepactLiquidityAssociationIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SepactLiquidityAssociationDetailsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSepactLiquidityAssociationIDBadRequest creates a GetSepactLiquidityAssociationIDBadRequest with default headers values
func NewGetSepactLiquidityAssociationIDBadRequest() *GetSepactLiquidityAssociationIDBadRequest {
	return &GetSepactLiquidityAssociationIDBadRequest{}
}

/*GetSepactLiquidityAssociationIDBadRequest handles this case with default header values.

Bad Request
*/
type GetSepactLiquidityAssociationIDBadRequest struct {
	Payload *models.APIError
}

func (o *GetSepactLiquidityAssociationIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /sepact-liquidity/{associationId}][%d] getSepactLiquidityAssociationIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetSepactLiquidityAssociationIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSepactLiquidityAssociationIDUnauthorized creates a GetSepactLiquidityAssociationIDUnauthorized with default headers values
func NewGetSepactLiquidityAssociationIDUnauthorized() *GetSepactLiquidityAssociationIDUnauthorized {
	return &GetSepactLiquidityAssociationIDUnauthorized{}
}

/*GetSepactLiquidityAssociationIDUnauthorized handles this case with default header values.

Authentication credentials were missing or incorrect
*/
type GetSepactLiquidityAssociationIDUnauthorized struct {
	Payload *models.APIError
}

func (o *GetSepactLiquidityAssociationIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /sepact-liquidity/{associationId}][%d] getSepactLiquidityAssociationIdUnauthorized  %+v", 401, o.Payload)
}

func (o *GetSepactLiquidityAssociationIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSepactLiquidityAssociationIDForbidden creates a GetSepactLiquidityAssociationIDForbidden with default headers values
func NewGetSepactLiquidityAssociationIDForbidden() *GetSepactLiquidityAssociationIDForbidden {
	return &GetSepactLiquidityAssociationIDForbidden{}
}

/*GetSepactLiquidityAssociationIDForbidden handles this case with default header values.

Forbidden
*/
type GetSepactLiquidityAssociationIDForbidden struct {
	Payload *models.APIError
}

func (o *GetSepactLiquidityAssociationIDForbidden) Error() string {
	return fmt.Sprintf("[GET /sepact-liquidity/{associationId}][%d] getSepactLiquidityAssociationIdForbidden  %+v", 403, o.Payload)
}

func (o *GetSepactLiquidityAssociationIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSepactLiquidityAssociationIDNotFound creates a GetSepactLiquidityAssociationIDNotFound with default headers values
func NewGetSepactLiquidityAssociationIDNotFound() *GetSepactLiquidityAssociationIDNotFound {
	return &GetSepactLiquidityAssociationIDNotFound{}
}

/*GetSepactLiquidityAssociationIDNotFound handles this case with default header values.

Record not found
*/
type GetSepactLiquidityAssociationIDNotFound struct {
	Payload *models.APIError
}

func (o *GetSepactLiquidityAssociationIDNotFound) Error() string {
	return fmt.Sprintf("[GET /sepact-liquidity/{associationId}][%d] getSepactLiquidityAssociationIdNotFound  %+v", 404, o.Payload)
}

func (o *GetSepactLiquidityAssociationIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSepactLiquidityAssociationIDConflict creates a GetSepactLiquidityAssociationIDConflict with default headers values
func NewGetSepactLiquidityAssociationIDConflict() *GetSepactLiquidityAssociationIDConflict {
	return &GetSepactLiquidityAssociationIDConflict{}
}

/*GetSepactLiquidityAssociationIDConflict handles this case with default header values.

Conflict
*/
type GetSepactLiquidityAssociationIDConflict struct {
	Payload *models.APIError
}

func (o *GetSepactLiquidityAssociationIDConflict) Error() string {
	return fmt.Sprintf("[GET /sepact-liquidity/{associationId}][%d] getSepactLiquidityAssociationIdConflict  %+v", 409, o.Payload)
}

func (o *GetSepactLiquidityAssociationIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSepactLiquidityAssociationIDTooManyRequests creates a GetSepactLiquidityAssociationIDTooManyRequests with default headers values
func NewGetSepactLiquidityAssociationIDTooManyRequests() *GetSepactLiquidityAssociationIDTooManyRequests {
	return &GetSepactLiquidityAssociationIDTooManyRequests{}
}

/*GetSepactLiquidityAssociationIDTooManyRequests handles this case with default header values.

The request cannot be served due to the applicationâ€™s rate limit
*/
type GetSepactLiquidityAssociationIDTooManyRequests struct {
	Payload *models.APIError
}

func (o *GetSepactLiquidityAssociationIDTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /sepact-liquidity/{associationId}][%d] getSepactLiquidityAssociationIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetSepactLiquidityAssociationIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSepactLiquidityAssociationIDInternalServerError creates a GetSepactLiquidityAssociationIDInternalServerError with default headers values
func NewGetSepactLiquidityAssociationIDInternalServerError() *GetSepactLiquidityAssociationIDInternalServerError {
	return &GetSepactLiquidityAssociationIDInternalServerError{}
}

/*GetSepactLiquidityAssociationIDInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetSepactLiquidityAssociationIDInternalServerError struct {
	Payload *models.APIError
}

func (o *GetSepactLiquidityAssociationIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /sepact-liquidity/{associationId}][%d] getSepactLiquidityAssociationIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSepactLiquidityAssociationIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSepactLiquidityAssociationIDServiceUnavailable creates a GetSepactLiquidityAssociationIDServiceUnavailable with default headers values
func NewGetSepactLiquidityAssociationIDServiceUnavailable() *GetSepactLiquidityAssociationIDServiceUnavailable {
	return &GetSepactLiquidityAssociationIDServiceUnavailable{}
}

/*GetSepactLiquidityAssociationIDServiceUnavailable handles this case with default header values.

The server is up, but overloaded with requests. Try again later.
*/
type GetSepactLiquidityAssociationIDServiceUnavailable struct {
	Payload *models.APIError
}

func (o *GetSepactLiquidityAssociationIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /sepact-liquidity/{associationId}][%d] getSepactLiquidityAssociationIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetSepactLiquidityAssociationIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
