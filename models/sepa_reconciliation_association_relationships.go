// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SepaReconciliationAssociationRelationships sepa reconciliation association relationships
//
// swagger:model SepaReconciliationAssociationRelationships
type SepaReconciliationAssociationRelationships struct {

	// sponsor
	Sponsor SepaReconciliationAssociationRelationshipsSponsor `json:"sponsor,omitempty"`
}

// Validate validates this sepa reconciliation association relationships
func (m *SepaReconciliationAssociationRelationships) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSponsor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SepaReconciliationAssociationRelationships) validateSponsor(formats strfmt.Registry) error {
	if swag.IsZero(m.Sponsor) { // not required
		return nil
	}

	if err := m.Sponsor.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sponsor")
		}
		return err
	}

	return nil
}

// ContextValidate validate this sepa reconciliation association relationships based on the context it is used
func (m *SepaReconciliationAssociationRelationships) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSponsor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SepaReconciliationAssociationRelationships) contextValidateSponsor(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Sponsor.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sponsor")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SepaReconciliationAssociationRelationships) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SepaReconciliationAssociationRelationships) UnmarshalBinary(b []byte) error {
	var res SepaReconciliationAssociationRelationships
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SepaReconciliationAssociationRelationshipsSponsor sepa reconciliation association relationships sponsor
//
// swagger:model SepaReconciliationAssociationRelationshipsSponsor
type SepaReconciliationAssociationRelationshipsSponsor struct {

	// data
	// Required: true
	Data SepaReconciliationRelationshipData `json:"data"`
}

// Validate validates this sepa reconciliation association relationships sponsor
func (m *SepaReconciliationAssociationRelationshipsSponsor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SepaReconciliationAssociationRelationshipsSponsor) validateData(formats strfmt.Registry) error {

	if err := m.Data.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sponsor" + "." + "data")
		}
		return err
	}

	return nil
}

// ContextValidate validate this sepa reconciliation association relationships sponsor based on the context it is used
func (m *SepaReconciliationAssociationRelationshipsSponsor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SepaReconciliationAssociationRelationshipsSponsor) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Data.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sponsor" + "." + "data")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SepaReconciliationAssociationRelationshipsSponsor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SepaReconciliationAssociationRelationshipsSponsor) UnmarshalBinary(b []byte) error {
	var res SepaReconciliationAssociationRelationshipsSponsor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
