// Code generated by go-swagger; DO NOT EDIT.

package mandates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetMandatesParams creates a new GetMandatesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetMandatesParams() *GetMandatesParams {
	return &GetMandatesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetMandatesParamsWithTimeout creates a new GetMandatesParams object
// with the ability to set a timeout on a request.
func NewGetMandatesParamsWithTimeout(timeout time.Duration) *GetMandatesParams {
	return &GetMandatesParams{
		timeout: timeout,
	}
}

// NewGetMandatesParamsWithContext creates a new GetMandatesParams object
// with the ability to set a context for a request.
func NewGetMandatesParamsWithContext(ctx context.Context) *GetMandatesParams {
	return &GetMandatesParams{
		Context: ctx,
	}
}

// NewGetMandatesParamsWithHTTPClient creates a new GetMandatesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetMandatesParamsWithHTTPClient(client *http.Client) *GetMandatesParams {
	return &GetMandatesParams{
		HTTPClient: client,
	}
}

/* GetMandatesParams contains all the parameters to send to the API endpoint
   for the get mandates operation.

   Typically these are written to a http.Request.
*/
type GetMandatesParams struct {

	// FilterAdmissionAdmissionDateFrom.
	//
	// Format: date-time
	FilterAdmissionAdmissionDateFrom *strfmt.DateTime

	// FilterAdmissionAdmissionDateTo.
	//
	// Format: date-time
	FilterAdmissionAdmissionDateTo *strfmt.DateTime

	/* FilterAdmissionSchemeStatusCode.

	   Filter by admission scheme status code
	*/
	FilterAdmissionSchemeStatusCode *string

	/* FilterAdmissionStatus.

	   Filter by admission status
	*/
	FilterAdmissionStatus *string

	/* FilterAllVersions.

	   Include old versions of mandates
	*/
	FilterAllVersions *bool

	/* FilterAmount.

	   Filter by amount
	*/
	FilterAmount *string

	// FilterBeneficiaryPartyAccountNumber.
	FilterBeneficiaryPartyAccountNumber *string

	// FilterBeneficiaryPartyBankID.
	FilterBeneficiaryPartyBankID *string

	// FilterClearingID.
	FilterClearingID *string

	// FilterCurrency.
	FilterCurrency *string

	// FilterDebtorPartyAccountNumber.
	FilterDebtorPartyAccountNumber *string

	// FilterDebtorPartyBankID.
	FilterDebtorPartyBankID *string

	/* FilterOrganisationID.

	   Filter by organisation id
	*/
	FilterOrganisationID []strfmt.UUID

	// FilterPaymentScheme.
	FilterPaymentScheme *string

	// FilterPaymentType.
	FilterPaymentType *string

	// FilterProcessingDateFrom.
	//
	// Format: date
	FilterProcessingDateFrom *strfmt.Date

	// FilterProcessingDateTo.
	//
	// Format: date
	FilterProcessingDateTo *strfmt.Date

	/* FilterReference.

	   Filter by reference
	*/
	FilterReference *string

	// FilterSchemeProcessingDateFrom.
	//
	// Format: date
	FilterSchemeProcessingDateFrom *strfmt.Date

	// FilterSchemeProcessingDateTo.
	//
	// Format: date
	FilterSchemeProcessingDateTo *strfmt.Date

	// FilterSubmissionSubmissionDateFrom.
	//
	// Format: date-time
	FilterSubmissionSubmissionDateFrom *strfmt.DateTime

	// FilterSubmissionSubmissionDateTo.
	//
	// Format: date-time
	FilterSubmissionSubmissionDateTo *strfmt.DateTime

	/* FilterUniqueSchemeID.

	   Filter by unique scheme id
	*/
	FilterUniqueSchemeID *string

	/* PageNumber.

	   Which page to select
	*/
	PageNumber *string

	/* PageSize.

	   Number of items to select
	*/
	PageSize *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get mandates params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetMandatesParams) WithDefaults() *GetMandatesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get mandates params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetMandatesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get mandates params
func (o *GetMandatesParams) WithTimeout(timeout time.Duration) *GetMandatesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get mandates params
func (o *GetMandatesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get mandates params
func (o *GetMandatesParams) WithContext(ctx context.Context) *GetMandatesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get mandates params
func (o *GetMandatesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get mandates params
func (o *GetMandatesParams) WithHTTPClient(client *http.Client) *GetMandatesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get mandates params
func (o *GetMandatesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilterAdmissionAdmissionDateFrom adds the filterAdmissionAdmissionDateFrom to the get mandates params
func (o *GetMandatesParams) WithFilterAdmissionAdmissionDateFrom(filterAdmissionAdmissionDateFrom *strfmt.DateTime) *GetMandatesParams {
	o.SetFilterAdmissionAdmissionDateFrom(filterAdmissionAdmissionDateFrom)
	return o
}

// SetFilterAdmissionAdmissionDateFrom adds the filterAdmissionAdmissionDateFrom to the get mandates params
func (o *GetMandatesParams) SetFilterAdmissionAdmissionDateFrom(filterAdmissionAdmissionDateFrom *strfmt.DateTime) {
	o.FilterAdmissionAdmissionDateFrom = filterAdmissionAdmissionDateFrom
}

// WithFilterAdmissionAdmissionDateTo adds the filterAdmissionAdmissionDateTo to the get mandates params
func (o *GetMandatesParams) WithFilterAdmissionAdmissionDateTo(filterAdmissionAdmissionDateTo *strfmt.DateTime) *GetMandatesParams {
	o.SetFilterAdmissionAdmissionDateTo(filterAdmissionAdmissionDateTo)
	return o
}

// SetFilterAdmissionAdmissionDateTo adds the filterAdmissionAdmissionDateTo to the get mandates params
func (o *GetMandatesParams) SetFilterAdmissionAdmissionDateTo(filterAdmissionAdmissionDateTo *strfmt.DateTime) {
	o.FilterAdmissionAdmissionDateTo = filterAdmissionAdmissionDateTo
}

// WithFilterAdmissionSchemeStatusCode adds the filterAdmissionSchemeStatusCode to the get mandates params
func (o *GetMandatesParams) WithFilterAdmissionSchemeStatusCode(filterAdmissionSchemeStatusCode *string) *GetMandatesParams {
	o.SetFilterAdmissionSchemeStatusCode(filterAdmissionSchemeStatusCode)
	return o
}

// SetFilterAdmissionSchemeStatusCode adds the filterAdmissionSchemeStatusCode to the get mandates params
func (o *GetMandatesParams) SetFilterAdmissionSchemeStatusCode(filterAdmissionSchemeStatusCode *string) {
	o.FilterAdmissionSchemeStatusCode = filterAdmissionSchemeStatusCode
}

// WithFilterAdmissionStatus adds the filterAdmissionStatus to the get mandates params
func (o *GetMandatesParams) WithFilterAdmissionStatus(filterAdmissionStatus *string) *GetMandatesParams {
	o.SetFilterAdmissionStatus(filterAdmissionStatus)
	return o
}

// SetFilterAdmissionStatus adds the filterAdmissionStatus to the get mandates params
func (o *GetMandatesParams) SetFilterAdmissionStatus(filterAdmissionStatus *string) {
	o.FilterAdmissionStatus = filterAdmissionStatus
}

// WithFilterAllVersions adds the filterAllVersions to the get mandates params
func (o *GetMandatesParams) WithFilterAllVersions(filterAllVersions *bool) *GetMandatesParams {
	o.SetFilterAllVersions(filterAllVersions)
	return o
}

// SetFilterAllVersions adds the filterAllVersions to the get mandates params
func (o *GetMandatesParams) SetFilterAllVersions(filterAllVersions *bool) {
	o.FilterAllVersions = filterAllVersions
}

// WithFilterAmount adds the filterAmount to the get mandates params
func (o *GetMandatesParams) WithFilterAmount(filterAmount *string) *GetMandatesParams {
	o.SetFilterAmount(filterAmount)
	return o
}

// SetFilterAmount adds the filterAmount to the get mandates params
func (o *GetMandatesParams) SetFilterAmount(filterAmount *string) {
	o.FilterAmount = filterAmount
}

// WithFilterBeneficiaryPartyAccountNumber adds the filterBeneficiaryPartyAccountNumber to the get mandates params
func (o *GetMandatesParams) WithFilterBeneficiaryPartyAccountNumber(filterBeneficiaryPartyAccountNumber *string) *GetMandatesParams {
	o.SetFilterBeneficiaryPartyAccountNumber(filterBeneficiaryPartyAccountNumber)
	return o
}

// SetFilterBeneficiaryPartyAccountNumber adds the filterBeneficiaryPartyAccountNumber to the get mandates params
func (o *GetMandatesParams) SetFilterBeneficiaryPartyAccountNumber(filterBeneficiaryPartyAccountNumber *string) {
	o.FilterBeneficiaryPartyAccountNumber = filterBeneficiaryPartyAccountNumber
}

// WithFilterBeneficiaryPartyBankID adds the filterBeneficiaryPartyBankID to the get mandates params
func (o *GetMandatesParams) WithFilterBeneficiaryPartyBankID(filterBeneficiaryPartyBankID *string) *GetMandatesParams {
	o.SetFilterBeneficiaryPartyBankID(filterBeneficiaryPartyBankID)
	return o
}

// SetFilterBeneficiaryPartyBankID adds the filterBeneficiaryPartyBankId to the get mandates params
func (o *GetMandatesParams) SetFilterBeneficiaryPartyBankID(filterBeneficiaryPartyBankID *string) {
	o.FilterBeneficiaryPartyBankID = filterBeneficiaryPartyBankID
}

// WithFilterClearingID adds the filterClearingID to the get mandates params
func (o *GetMandatesParams) WithFilterClearingID(filterClearingID *string) *GetMandatesParams {
	o.SetFilterClearingID(filterClearingID)
	return o
}

// SetFilterClearingID adds the filterClearingId to the get mandates params
func (o *GetMandatesParams) SetFilterClearingID(filterClearingID *string) {
	o.FilterClearingID = filterClearingID
}

// WithFilterCurrency adds the filterCurrency to the get mandates params
func (o *GetMandatesParams) WithFilterCurrency(filterCurrency *string) *GetMandatesParams {
	o.SetFilterCurrency(filterCurrency)
	return o
}

// SetFilterCurrency adds the filterCurrency to the get mandates params
func (o *GetMandatesParams) SetFilterCurrency(filterCurrency *string) {
	o.FilterCurrency = filterCurrency
}

// WithFilterDebtorPartyAccountNumber adds the filterDebtorPartyAccountNumber to the get mandates params
func (o *GetMandatesParams) WithFilterDebtorPartyAccountNumber(filterDebtorPartyAccountNumber *string) *GetMandatesParams {
	o.SetFilterDebtorPartyAccountNumber(filterDebtorPartyAccountNumber)
	return o
}

// SetFilterDebtorPartyAccountNumber adds the filterDebtorPartyAccountNumber to the get mandates params
func (o *GetMandatesParams) SetFilterDebtorPartyAccountNumber(filterDebtorPartyAccountNumber *string) {
	o.FilterDebtorPartyAccountNumber = filterDebtorPartyAccountNumber
}

// WithFilterDebtorPartyBankID adds the filterDebtorPartyBankID to the get mandates params
func (o *GetMandatesParams) WithFilterDebtorPartyBankID(filterDebtorPartyBankID *string) *GetMandatesParams {
	o.SetFilterDebtorPartyBankID(filterDebtorPartyBankID)
	return o
}

// SetFilterDebtorPartyBankID adds the filterDebtorPartyBankId to the get mandates params
func (o *GetMandatesParams) SetFilterDebtorPartyBankID(filterDebtorPartyBankID *string) {
	o.FilterDebtorPartyBankID = filterDebtorPartyBankID
}

// WithFilterOrganisationID adds the filterOrganisationID to the get mandates params
func (o *GetMandatesParams) WithFilterOrganisationID(filterOrganisationID []strfmt.UUID) *GetMandatesParams {
	o.SetFilterOrganisationID(filterOrganisationID)
	return o
}

// SetFilterOrganisationID adds the filterOrganisationId to the get mandates params
func (o *GetMandatesParams) SetFilterOrganisationID(filterOrganisationID []strfmt.UUID) {
	o.FilterOrganisationID = filterOrganisationID
}

// WithFilterPaymentScheme adds the filterPaymentScheme to the get mandates params
func (o *GetMandatesParams) WithFilterPaymentScheme(filterPaymentScheme *string) *GetMandatesParams {
	o.SetFilterPaymentScheme(filterPaymentScheme)
	return o
}

// SetFilterPaymentScheme adds the filterPaymentScheme to the get mandates params
func (o *GetMandatesParams) SetFilterPaymentScheme(filterPaymentScheme *string) {
	o.FilterPaymentScheme = filterPaymentScheme
}

// WithFilterPaymentType adds the filterPaymentType to the get mandates params
func (o *GetMandatesParams) WithFilterPaymentType(filterPaymentType *string) *GetMandatesParams {
	o.SetFilterPaymentType(filterPaymentType)
	return o
}

// SetFilterPaymentType adds the filterPaymentType to the get mandates params
func (o *GetMandatesParams) SetFilterPaymentType(filterPaymentType *string) {
	o.FilterPaymentType = filterPaymentType
}

// WithFilterProcessingDateFrom adds the filterProcessingDateFrom to the get mandates params
func (o *GetMandatesParams) WithFilterProcessingDateFrom(filterProcessingDateFrom *strfmt.Date) *GetMandatesParams {
	o.SetFilterProcessingDateFrom(filterProcessingDateFrom)
	return o
}

// SetFilterProcessingDateFrom adds the filterProcessingDateFrom to the get mandates params
func (o *GetMandatesParams) SetFilterProcessingDateFrom(filterProcessingDateFrom *strfmt.Date) {
	o.FilterProcessingDateFrom = filterProcessingDateFrom
}

// WithFilterProcessingDateTo adds the filterProcessingDateTo to the get mandates params
func (o *GetMandatesParams) WithFilterProcessingDateTo(filterProcessingDateTo *strfmt.Date) *GetMandatesParams {
	o.SetFilterProcessingDateTo(filterProcessingDateTo)
	return o
}

// SetFilterProcessingDateTo adds the filterProcessingDateTo to the get mandates params
func (o *GetMandatesParams) SetFilterProcessingDateTo(filterProcessingDateTo *strfmt.Date) {
	o.FilterProcessingDateTo = filterProcessingDateTo
}

// WithFilterReference adds the filterReference to the get mandates params
func (o *GetMandatesParams) WithFilterReference(filterReference *string) *GetMandatesParams {
	o.SetFilterReference(filterReference)
	return o
}

// SetFilterReference adds the filterReference to the get mandates params
func (o *GetMandatesParams) SetFilterReference(filterReference *string) {
	o.FilterReference = filterReference
}

// WithFilterSchemeProcessingDateFrom adds the filterSchemeProcessingDateFrom to the get mandates params
func (o *GetMandatesParams) WithFilterSchemeProcessingDateFrom(filterSchemeProcessingDateFrom *strfmt.Date) *GetMandatesParams {
	o.SetFilterSchemeProcessingDateFrom(filterSchemeProcessingDateFrom)
	return o
}

// SetFilterSchemeProcessingDateFrom adds the filterSchemeProcessingDateFrom to the get mandates params
func (o *GetMandatesParams) SetFilterSchemeProcessingDateFrom(filterSchemeProcessingDateFrom *strfmt.Date) {
	o.FilterSchemeProcessingDateFrom = filterSchemeProcessingDateFrom
}

// WithFilterSchemeProcessingDateTo adds the filterSchemeProcessingDateTo to the get mandates params
func (o *GetMandatesParams) WithFilterSchemeProcessingDateTo(filterSchemeProcessingDateTo *strfmt.Date) *GetMandatesParams {
	o.SetFilterSchemeProcessingDateTo(filterSchemeProcessingDateTo)
	return o
}

// SetFilterSchemeProcessingDateTo adds the filterSchemeProcessingDateTo to the get mandates params
func (o *GetMandatesParams) SetFilterSchemeProcessingDateTo(filterSchemeProcessingDateTo *strfmt.Date) {
	o.FilterSchemeProcessingDateTo = filterSchemeProcessingDateTo
}

// WithFilterSubmissionSubmissionDateFrom adds the filterSubmissionSubmissionDateFrom to the get mandates params
func (o *GetMandatesParams) WithFilterSubmissionSubmissionDateFrom(filterSubmissionSubmissionDateFrom *strfmt.DateTime) *GetMandatesParams {
	o.SetFilterSubmissionSubmissionDateFrom(filterSubmissionSubmissionDateFrom)
	return o
}

// SetFilterSubmissionSubmissionDateFrom adds the filterSubmissionSubmissionDateFrom to the get mandates params
func (o *GetMandatesParams) SetFilterSubmissionSubmissionDateFrom(filterSubmissionSubmissionDateFrom *strfmt.DateTime) {
	o.FilterSubmissionSubmissionDateFrom = filterSubmissionSubmissionDateFrom
}

// WithFilterSubmissionSubmissionDateTo adds the filterSubmissionSubmissionDateTo to the get mandates params
func (o *GetMandatesParams) WithFilterSubmissionSubmissionDateTo(filterSubmissionSubmissionDateTo *strfmt.DateTime) *GetMandatesParams {
	o.SetFilterSubmissionSubmissionDateTo(filterSubmissionSubmissionDateTo)
	return o
}

// SetFilterSubmissionSubmissionDateTo adds the filterSubmissionSubmissionDateTo to the get mandates params
func (o *GetMandatesParams) SetFilterSubmissionSubmissionDateTo(filterSubmissionSubmissionDateTo *strfmt.DateTime) {
	o.FilterSubmissionSubmissionDateTo = filterSubmissionSubmissionDateTo
}

// WithFilterUniqueSchemeID adds the filterUniqueSchemeID to the get mandates params
func (o *GetMandatesParams) WithFilterUniqueSchemeID(filterUniqueSchemeID *string) *GetMandatesParams {
	o.SetFilterUniqueSchemeID(filterUniqueSchemeID)
	return o
}

// SetFilterUniqueSchemeID adds the filterUniqueSchemeId to the get mandates params
func (o *GetMandatesParams) SetFilterUniqueSchemeID(filterUniqueSchemeID *string) {
	o.FilterUniqueSchemeID = filterUniqueSchemeID
}

// WithPageNumber adds the pageNumber to the get mandates params
func (o *GetMandatesParams) WithPageNumber(pageNumber *string) *GetMandatesParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the get mandates params
func (o *GetMandatesParams) SetPageNumber(pageNumber *string) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the get mandates params
func (o *GetMandatesParams) WithPageSize(pageSize *int64) *GetMandatesParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get mandates params
func (o *GetMandatesParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WriteToRequest writes these params to a swagger request
func (o *GetMandatesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FilterAdmissionAdmissionDateFrom != nil {

		// query param filter[admission.admission_date_from]
		var qrFilterAdmissionAdmissionDateFrom strfmt.DateTime

		if o.FilterAdmissionAdmissionDateFrom != nil {
			qrFilterAdmissionAdmissionDateFrom = *o.FilterAdmissionAdmissionDateFrom
		}
		qFilterAdmissionAdmissionDateFrom := qrFilterAdmissionAdmissionDateFrom.String()
		if qFilterAdmissionAdmissionDateFrom != "" {

			if err := r.SetQueryParam("filter[admission.admission_date_from]", qFilterAdmissionAdmissionDateFrom); err != nil {
				return err
			}
		}
	}

	if o.FilterAdmissionAdmissionDateTo != nil {

		// query param filter[admission.admission_date_to]
		var qrFilterAdmissionAdmissionDateTo strfmt.DateTime

		if o.FilterAdmissionAdmissionDateTo != nil {
			qrFilterAdmissionAdmissionDateTo = *o.FilterAdmissionAdmissionDateTo
		}
		qFilterAdmissionAdmissionDateTo := qrFilterAdmissionAdmissionDateTo.String()
		if qFilterAdmissionAdmissionDateTo != "" {

			if err := r.SetQueryParam("filter[admission.admission_date_to]", qFilterAdmissionAdmissionDateTo); err != nil {
				return err
			}
		}
	}

	if o.FilterAdmissionSchemeStatusCode != nil {

		// query param filter[admission.scheme_status_code]
		var qrFilterAdmissionSchemeStatusCode string

		if o.FilterAdmissionSchemeStatusCode != nil {
			qrFilterAdmissionSchemeStatusCode = *o.FilterAdmissionSchemeStatusCode
		}
		qFilterAdmissionSchemeStatusCode := qrFilterAdmissionSchemeStatusCode
		if qFilterAdmissionSchemeStatusCode != "" {

			if err := r.SetQueryParam("filter[admission.scheme_status_code]", qFilterAdmissionSchemeStatusCode); err != nil {
				return err
			}
		}
	}

	if o.FilterAdmissionStatus != nil {

		// query param filter[admission.status]
		var qrFilterAdmissionStatus string

		if o.FilterAdmissionStatus != nil {
			qrFilterAdmissionStatus = *o.FilterAdmissionStatus
		}
		qFilterAdmissionStatus := qrFilterAdmissionStatus
		if qFilterAdmissionStatus != "" {

			if err := r.SetQueryParam("filter[admission.status]", qFilterAdmissionStatus); err != nil {
				return err
			}
		}
	}

	if o.FilterAllVersions != nil {

		// query param filter[all_versions]
		var qrFilterAllVersions bool

		if o.FilterAllVersions != nil {
			qrFilterAllVersions = *o.FilterAllVersions
		}
		qFilterAllVersions := swag.FormatBool(qrFilterAllVersions)
		if qFilterAllVersions != "" {

			if err := r.SetQueryParam("filter[all_versions]", qFilterAllVersions); err != nil {
				return err
			}
		}
	}

	if o.FilterAmount != nil {

		// query param filter[amount]
		var qrFilterAmount string

		if o.FilterAmount != nil {
			qrFilterAmount = *o.FilterAmount
		}
		qFilterAmount := qrFilterAmount
		if qFilterAmount != "" {

			if err := r.SetQueryParam("filter[amount]", qFilterAmount); err != nil {
				return err
			}
		}
	}

	if o.FilterBeneficiaryPartyAccountNumber != nil {

		// query param filter[beneficiary_party.account_number]
		var qrFilterBeneficiaryPartyAccountNumber string

		if o.FilterBeneficiaryPartyAccountNumber != nil {
			qrFilterBeneficiaryPartyAccountNumber = *o.FilterBeneficiaryPartyAccountNumber
		}
		qFilterBeneficiaryPartyAccountNumber := qrFilterBeneficiaryPartyAccountNumber
		if qFilterBeneficiaryPartyAccountNumber != "" {

			if err := r.SetQueryParam("filter[beneficiary_party.account_number]", qFilterBeneficiaryPartyAccountNumber); err != nil {
				return err
			}
		}
	}

	if o.FilterBeneficiaryPartyBankID != nil {

		// query param filter[beneficiary_party.bank_id]
		var qrFilterBeneficiaryPartyBankID string

		if o.FilterBeneficiaryPartyBankID != nil {
			qrFilterBeneficiaryPartyBankID = *o.FilterBeneficiaryPartyBankID
		}
		qFilterBeneficiaryPartyBankID := qrFilterBeneficiaryPartyBankID
		if qFilterBeneficiaryPartyBankID != "" {

			if err := r.SetQueryParam("filter[beneficiary_party.bank_id]", qFilterBeneficiaryPartyBankID); err != nil {
				return err
			}
		}
	}

	if o.FilterClearingID != nil {

		// query param filter[clearing_id]
		var qrFilterClearingID string

		if o.FilterClearingID != nil {
			qrFilterClearingID = *o.FilterClearingID
		}
		qFilterClearingID := qrFilterClearingID
		if qFilterClearingID != "" {

			if err := r.SetQueryParam("filter[clearing_id]", qFilterClearingID); err != nil {
				return err
			}
		}
	}

	if o.FilterCurrency != nil {

		// query param filter[currency]
		var qrFilterCurrency string

		if o.FilterCurrency != nil {
			qrFilterCurrency = *o.FilterCurrency
		}
		qFilterCurrency := qrFilterCurrency
		if qFilterCurrency != "" {

			if err := r.SetQueryParam("filter[currency]", qFilterCurrency); err != nil {
				return err
			}
		}
	}

	if o.FilterDebtorPartyAccountNumber != nil {

		// query param filter[debtor_party.account_number]
		var qrFilterDebtorPartyAccountNumber string

		if o.FilterDebtorPartyAccountNumber != nil {
			qrFilterDebtorPartyAccountNumber = *o.FilterDebtorPartyAccountNumber
		}
		qFilterDebtorPartyAccountNumber := qrFilterDebtorPartyAccountNumber
		if qFilterDebtorPartyAccountNumber != "" {

			if err := r.SetQueryParam("filter[debtor_party.account_number]", qFilterDebtorPartyAccountNumber); err != nil {
				return err
			}
		}
	}

	if o.FilterDebtorPartyBankID != nil {

		// query param filter[debtor_party.bank_id]
		var qrFilterDebtorPartyBankID string

		if o.FilterDebtorPartyBankID != nil {
			qrFilterDebtorPartyBankID = *o.FilterDebtorPartyBankID
		}
		qFilterDebtorPartyBankID := qrFilterDebtorPartyBankID
		if qFilterDebtorPartyBankID != "" {

			if err := r.SetQueryParam("filter[debtor_party.bank_id]", qFilterDebtorPartyBankID); err != nil {
				return err
			}
		}
	}

	if o.FilterOrganisationID != nil {

		// binding items for filter[organisation_id]
		joinedFilterOrganisationID := o.bindParamFilterOrganisationID(reg)

		// query array param filter[organisation_id]
		if err := r.SetQueryParam("filter[organisation_id]", joinedFilterOrganisationID...); err != nil {
			return err
		}
	}

	if o.FilterPaymentScheme != nil {

		// query param filter[payment_scheme]
		var qrFilterPaymentScheme string

		if o.FilterPaymentScheme != nil {
			qrFilterPaymentScheme = *o.FilterPaymentScheme
		}
		qFilterPaymentScheme := qrFilterPaymentScheme
		if qFilterPaymentScheme != "" {

			if err := r.SetQueryParam("filter[payment_scheme]", qFilterPaymentScheme); err != nil {
				return err
			}
		}
	}

	if o.FilterPaymentType != nil {

		// query param filter[payment_type]
		var qrFilterPaymentType string

		if o.FilterPaymentType != nil {
			qrFilterPaymentType = *o.FilterPaymentType
		}
		qFilterPaymentType := qrFilterPaymentType
		if qFilterPaymentType != "" {

			if err := r.SetQueryParam("filter[payment_type]", qFilterPaymentType); err != nil {
				return err
			}
		}
	}

	if o.FilterProcessingDateFrom != nil {

		// query param filter[processing_date_from]
		var qrFilterProcessingDateFrom strfmt.Date

		if o.FilterProcessingDateFrom != nil {
			qrFilterProcessingDateFrom = *o.FilterProcessingDateFrom
		}
		qFilterProcessingDateFrom := qrFilterProcessingDateFrom.String()
		if qFilterProcessingDateFrom != "" {

			if err := r.SetQueryParam("filter[processing_date_from]", qFilterProcessingDateFrom); err != nil {
				return err
			}
		}
	}

	if o.FilterProcessingDateTo != nil {

		// query param filter[processing_date_to]
		var qrFilterProcessingDateTo strfmt.Date

		if o.FilterProcessingDateTo != nil {
			qrFilterProcessingDateTo = *o.FilterProcessingDateTo
		}
		qFilterProcessingDateTo := qrFilterProcessingDateTo.String()
		if qFilterProcessingDateTo != "" {

			if err := r.SetQueryParam("filter[processing_date_to]", qFilterProcessingDateTo); err != nil {
				return err
			}
		}
	}

	if o.FilterReference != nil {

		// query param filter[reference]
		var qrFilterReference string

		if o.FilterReference != nil {
			qrFilterReference = *o.FilterReference
		}
		qFilterReference := qrFilterReference
		if qFilterReference != "" {

			if err := r.SetQueryParam("filter[reference]", qFilterReference); err != nil {
				return err
			}
		}
	}

	if o.FilterSchemeProcessingDateFrom != nil {

		// query param filter[scheme_processing_date_from]
		var qrFilterSchemeProcessingDateFrom strfmt.Date

		if o.FilterSchemeProcessingDateFrom != nil {
			qrFilterSchemeProcessingDateFrom = *o.FilterSchemeProcessingDateFrom
		}
		qFilterSchemeProcessingDateFrom := qrFilterSchemeProcessingDateFrom.String()
		if qFilterSchemeProcessingDateFrom != "" {

			if err := r.SetQueryParam("filter[scheme_processing_date_from]", qFilterSchemeProcessingDateFrom); err != nil {
				return err
			}
		}
	}

	if o.FilterSchemeProcessingDateTo != nil {

		// query param filter[scheme_processing_date_to]
		var qrFilterSchemeProcessingDateTo strfmt.Date

		if o.FilterSchemeProcessingDateTo != nil {
			qrFilterSchemeProcessingDateTo = *o.FilterSchemeProcessingDateTo
		}
		qFilterSchemeProcessingDateTo := qrFilterSchemeProcessingDateTo.String()
		if qFilterSchemeProcessingDateTo != "" {

			if err := r.SetQueryParam("filter[scheme_processing_date_to]", qFilterSchemeProcessingDateTo); err != nil {
				return err
			}
		}
	}

	if o.FilterSubmissionSubmissionDateFrom != nil {

		// query param filter[submission.submission_date_from]
		var qrFilterSubmissionSubmissionDateFrom strfmt.DateTime

		if o.FilterSubmissionSubmissionDateFrom != nil {
			qrFilterSubmissionSubmissionDateFrom = *o.FilterSubmissionSubmissionDateFrom
		}
		qFilterSubmissionSubmissionDateFrom := qrFilterSubmissionSubmissionDateFrom.String()
		if qFilterSubmissionSubmissionDateFrom != "" {

			if err := r.SetQueryParam("filter[submission.submission_date_from]", qFilterSubmissionSubmissionDateFrom); err != nil {
				return err
			}
		}
	}

	if o.FilterSubmissionSubmissionDateTo != nil {

		// query param filter[submission.submission_date_to]
		var qrFilterSubmissionSubmissionDateTo strfmt.DateTime

		if o.FilterSubmissionSubmissionDateTo != nil {
			qrFilterSubmissionSubmissionDateTo = *o.FilterSubmissionSubmissionDateTo
		}
		qFilterSubmissionSubmissionDateTo := qrFilterSubmissionSubmissionDateTo.String()
		if qFilterSubmissionSubmissionDateTo != "" {

			if err := r.SetQueryParam("filter[submission.submission_date_to]", qFilterSubmissionSubmissionDateTo); err != nil {
				return err
			}
		}
	}

	if o.FilterUniqueSchemeID != nil {

		// query param filter[unique_scheme_id]
		var qrFilterUniqueSchemeID string

		if o.FilterUniqueSchemeID != nil {
			qrFilterUniqueSchemeID = *o.FilterUniqueSchemeID
		}
		qFilterUniqueSchemeID := qrFilterUniqueSchemeID
		if qFilterUniqueSchemeID != "" {

			if err := r.SetQueryParam("filter[unique_scheme_id]", qFilterUniqueSchemeID); err != nil {
				return err
			}
		}
	}

	if o.PageNumber != nil {

		// query param page[number]
		var qrPageNumber string

		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := qrPageNumber
		if qPageNumber != "" {

			if err := r.SetQueryParam("page[number]", qPageNumber); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param page[size]
		var qrPageSize int64

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("page[size]", qPageSize); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetMandates binds the parameter filter[organisation_id]
func (o *GetMandatesParams) bindParamFilterOrganisationID(formats strfmt.Registry) []string {
	filterOrganisationIDIR := o.FilterOrganisationID

	var filterOrganisationIDIC []string
	for _, filterOrganisationIDIIR := range filterOrganisationIDIR { // explode []strfmt.UUID

		filterOrganisationIDIIV := filterOrganisationIDIIR.String() // strfmt.UUID as string
		filterOrganisationIDIC = append(filterOrganisationIDIC, filterOrganisationIDIIV)
	}

	// items.CollectionFormat: ""
	filterOrganisationIDIS := swag.JoinByFormat(filterOrganisationIDIC, "")

	return filterOrganisationIDIS
}
