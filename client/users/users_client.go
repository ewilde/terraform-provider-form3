// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new users API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for users API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteUsersUserID deletes user
*/
func (a *Client) DeleteUsersUserID(params *DeleteUsersUserIDParams) (*DeleteUsersUserIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsersUserIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteUsersUserID",
		Method:             "DELETE",
		PathPattern:        "/users/{user_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUsersUserIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUsersUserIDNoContent), nil

}

/*
DeleteUsersUserIDCredentialsClientID deletes credential for user
*/
func (a *Client) DeleteUsersUserIDCredentialsClientID(params *DeleteUsersUserIDCredentialsClientIDParams) (*DeleteUsersUserIDCredentialsClientIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsersUserIDCredentialsClientIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteUsersUserIDCredentialsClientID",
		Method:             "DELETE",
		PathPattern:        "/users/{user_id}/credentials/{client_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUsersUserIDCredentialsClientIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUsersUserIDCredentialsClientIDNoContent), nil

}

/*
DeleteUsersUserIDCredentialsPublicKeyPublicKeyID deletes public key credential for user
*/
func (a *Client) DeleteUsersUserIDCredentialsPublicKeyPublicKeyID(params *DeleteUsersUserIDCredentialsPublicKeyPublicKeyIDParams) (*DeleteUsersUserIDCredentialsPublicKeyPublicKeyIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsersUserIDCredentialsPublicKeyPublicKeyIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteUsersUserIDCredentialsPublicKeyPublicKeyID",
		Method:             "DELETE",
		PathPattern:        "/users/{user_id}/credentials/public_key/{public_key_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUsersUserIDCredentialsPublicKeyPublicKeyIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUsersUserIDCredentialsPublicKeyPublicKeyIDNoContent), nil

}

/*
DeleteUsersUserIDCredentialsSsoSsoUserID deletes sso user credential
*/
func (a *Client) DeleteUsersUserIDCredentialsSsoSsoUserID(params *DeleteUsersUserIDCredentialsSsoSsoUserIDParams) (*DeleteUsersUserIDCredentialsSsoSsoUserIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsersUserIDCredentialsSsoSsoUserIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteUsersUserIDCredentialsSsoSsoUserID",
		Method:             "DELETE",
		PathPattern:        "/users/{user_id}/credentials/sso/{sso_user_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUsersUserIDCredentialsSsoSsoUserIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUsersUserIDCredentialsSsoSsoUserIDNoContent), nil

}

/*
DeleteUsersUserIDRolesRoleID removes role from user
*/
func (a *Client) DeleteUsersUserIDRolesRoleID(params *DeleteUsersUserIDRolesRoleIDParams) (*DeleteUsersUserIDRolesRoleIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsersUserIDRolesRoleIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteUsersUserIDRolesRoleID",
		Method:             "DELETE",
		PathPattern:        "/users/{user_id}/roles/{role_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUsersUserIDRolesRoleIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUsersUserIDRolesRoleIDNoContent), nil

}

/*
GetUsers lists all users
*/
func (a *Client) GetUsers(params *GetUsersParams) (*GetUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUsers",
		Method:             "GET",
		PathPattern:        "/users",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersOK), nil

}

/*
GetUsersUserID fetches user
*/
func (a *Client) GetUsersUserID(params *GetUsersUserIDParams) (*GetUsersUserIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersUserIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUsersUserID",
		Method:             "GET",
		PathPattern:        "/users/{user_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersUserIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersUserIDOK), nil

}

/*
GetUsersUserIDAces gets access control list for user
*/
func (a *Client) GetUsersUserIDAces(params *GetUsersUserIDAcesParams) (*GetUsersUserIDAcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersUserIDAcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUsersUserIDAces",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/aces",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersUserIDAcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersUserIDAcesOK), nil

}

/*
GetUsersUserIDCredentials gets all credentials for user
*/
func (a *Client) GetUsersUserIDCredentials(params *GetUsersUserIDCredentialsParams) (*GetUsersUserIDCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersUserIDCredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUsersUserIDCredentials",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/credentials",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersUserIDCredentialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersUserIDCredentialsOK), nil

}

/*
GetUsersUserIDCredentialsPublicKey fetches public key credentials
*/
func (a *Client) GetUsersUserIDCredentialsPublicKey(params *GetUsersUserIDCredentialsPublicKeyParams) (*GetUsersUserIDCredentialsPublicKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersUserIDCredentialsPublicKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUsersUserIDCredentialsPublicKey",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/credentials/public_key",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersUserIDCredentialsPublicKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersUserIDCredentialsPublicKeyOK), nil

}

/*
GetUsersUserIDCredentialsPublicKeyPublicKeyID fetches public key credential
*/
func (a *Client) GetUsersUserIDCredentialsPublicKeyPublicKeyID(params *GetUsersUserIDCredentialsPublicKeyPublicKeyIDParams) (*GetUsersUserIDCredentialsPublicKeyPublicKeyIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersUserIDCredentialsPublicKeyPublicKeyIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUsersUserIDCredentialsPublicKeyPublicKeyID",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/credentials/public_key/{public_key_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersUserIDCredentialsPublicKeyPublicKeyIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersUserIDCredentialsPublicKeyPublicKeyIDOK), nil

}

/*
GetUsersUserIDCredentialsSsoSsoUserID fetches sso credential
*/
func (a *Client) GetUsersUserIDCredentialsSsoSsoUserID(params *GetUsersUserIDCredentialsSsoSsoUserIDParams) (*GetUsersUserIDCredentialsSsoSsoUserIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersUserIDCredentialsSsoSsoUserIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUsersUserIDCredentialsSsoSsoUserID",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/credentials/sso/{sso_user_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersUserIDCredentialsSsoSsoUserIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersUserIDCredentialsSsoSsoUserIDOK), nil

}

/*
GetUsersUserIDRoles gets all roles for user
*/
func (a *Client) GetUsersUserIDRoles(params *GetUsersUserIDRolesParams) (*GetUsersUserIDRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersUserIDRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUsersUserIDRoles",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/roles",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersUserIDRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersUserIDRolesOK), nil

}

/*
PatchUsersUserID edits user details
*/
func (a *Client) PatchUsersUserID(params *PatchUsersUserIDParams) (*PatchUsersUserIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchUsersUserIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchUsersUserID",
		Method:             "PATCH",
		PathPattern:        "/users/{user_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchUsersUserIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchUsersUserIDOK), nil

}

/*
PostUsers creates user
*/
func (a *Client) PostUsers(params *PostUsersParams) (*PostUsersCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostUsers",
		Method:             "POST",
		PathPattern:        "/users",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUsersCreated), nil

}

/*
PostUsersUserIDCredentials adds credentials to user
*/
func (a *Client) PostUsersUserIDCredentials(params *PostUsersUserIDCredentialsParams) (*PostUsersUserIDCredentialsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUsersUserIDCredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostUsersUserIDCredentials",
		Method:             "POST",
		PathPattern:        "/users/{user_id}/credentials",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUsersUserIDCredentialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUsersUserIDCredentialsCreated), nil

}

/*
PostUsersUserIDCredentialsPublicKey generates new public key credential for a user
*/
func (a *Client) PostUsersUserIDCredentialsPublicKey(params *PostUsersUserIDCredentialsPublicKeyParams) (*PostUsersUserIDCredentialsPublicKeyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUsersUserIDCredentialsPublicKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostUsersUserIDCredentialsPublicKey",
		Method:             "POST",
		PathPattern:        "/users/{user_id}/credentials/public_key",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUsersUserIDCredentialsPublicKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUsersUserIDCredentialsPublicKeyCreated), nil

}

/*
PostUsersUserIDCredentialsSso creates new sso credential for a user
*/
func (a *Client) PostUsersUserIDCredentialsSso(params *PostUsersUserIDCredentialsSsoParams) (*PostUsersUserIDCredentialsSsoCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUsersUserIDCredentialsSsoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostUsersUserIDCredentialsSso",
		Method:             "POST",
		PathPattern:        "/users/{user_id}/credentials/sso",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUsersUserIDCredentialsSsoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUsersUserIDCredentialsSsoCreated), nil

}

/*
PostUsersUserIDRolesRoleID adds role to user
*/
func (a *Client) PostUsersUserIDRolesRoleID(params *PostUsersUserIDRolesRoleIDParams) (*PostUsersUserIDRolesRoleIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUsersUserIDRolesRoleIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostUsersUserIDRolesRoleID",
		Method:             "POST",
		PathPattern:        "/users/{user_id}/roles/{role_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUsersUserIDRolesRoleIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUsersUserIDRolesRoleIDCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
