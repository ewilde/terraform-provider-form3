// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SepactLiquidityAssociationRelationships sepact liquidity association relationships
//
// swagger:model SepactLiquidityAssociationRelationships
type SepactLiquidityAssociationRelationships struct {

	// direct participant
	DirectParticipant SepactLiquidityAssociationRelationshipsDirectParticipant `json:"direct_participant,omitempty"`
}

// Validate validates this sepact liquidity association relationships
func (m *SepactLiquidityAssociationRelationships) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirectParticipant(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SepactLiquidityAssociationRelationships) validateDirectParticipant(formats strfmt.Registry) error {
	if swag.IsZero(m.DirectParticipant) { // not required
		return nil
	}

	if err := m.DirectParticipant.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("direct_participant")
		}
		return err
	}

	return nil
}

// ContextValidate validate this sepact liquidity association relationships based on the context it is used
func (m *SepactLiquidityAssociationRelationships) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDirectParticipant(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SepactLiquidityAssociationRelationships) contextValidateDirectParticipant(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DirectParticipant.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("direct_participant")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SepactLiquidityAssociationRelationships) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SepactLiquidityAssociationRelationships) UnmarshalBinary(b []byte) error {
	var res SepactLiquidityAssociationRelationships
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SepactLiquidityAssociationRelationshipsDirectParticipant sepact liquidity association relationships direct participant
//
// swagger:model SepactLiquidityAssociationRelationshipsDirectParticipant
type SepactLiquidityAssociationRelationshipsDirectParticipant struct {

	// data
	// Required: true
	Data SepactLiquidityRelationshipData `json:"data"`
}

// Validate validates this sepact liquidity association relationships direct participant
func (m *SepactLiquidityAssociationRelationshipsDirectParticipant) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SepactLiquidityAssociationRelationshipsDirectParticipant) validateData(formats strfmt.Registry) error {

	if err := m.Data.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("direct_participant" + "." + "data")
		}
		return err
	}

	return nil
}

// ContextValidate validate this sepact liquidity association relationships direct participant based on the context it is used
func (m *SepactLiquidityAssociationRelationshipsDirectParticipant) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SepactLiquidityAssociationRelationshipsDirectParticipant) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Data.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("direct_participant" + "." + "data")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SepactLiquidityAssociationRelationshipsDirectParticipant) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SepactLiquidityAssociationRelationshipsDirectParticipant) UnmarshalBinary(b []byte) error {
	var res SepactLiquidityAssociationRelationshipsDirectParticipant
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
