// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PayportParticipantType payport participant type
//
// swagger:model PayportParticipantType
type PayportParticipantType string

func NewPayportParticipantType(value PayportParticipantType) *PayportParticipantType {
	v := value
	return &v
}

const (

	// PayportParticipantTypeSettling captures enum value "settling"
	PayportParticipantTypeSettling PayportParticipantType = "settling"

	// PayportParticipantTypeNonSettling captures enum value "non_settling"
	PayportParticipantTypeNonSettling PayportParticipantType = "non_settling"
)

// for schema
var payportParticipantTypeEnum []interface{}

func init() {
	var res []PayportParticipantType
	if err := json.Unmarshal([]byte(`["settling","non_settling"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		payportParticipantTypeEnum = append(payportParticipantTypeEnum, v)
	}
}

func (m PayportParticipantType) validatePayportParticipantTypeEnum(path, location string, value PayportParticipantType) error {
	if err := validate.EnumCase(path, location, value, payportParticipantTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this payport participant type
func (m PayportParticipantType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePayportParticipantTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this payport participant type based on context it is used
func (m PayportParticipantType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
