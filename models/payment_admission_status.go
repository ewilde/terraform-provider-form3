// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PaymentAdmissionStatus payment admission status
//
// swagger:model PaymentAdmissionStatus
type PaymentAdmissionStatus string

func NewPaymentAdmissionStatus(value PaymentAdmissionStatus) *PaymentAdmissionStatus {
	v := value
	return &v
}

const (

	// PaymentAdmissionStatusConfirmed captures enum value "confirmed"
	PaymentAdmissionStatusConfirmed PaymentAdmissionStatus = "confirmed"

	// PaymentAdmissionStatusFailed captures enum value "failed"
	PaymentAdmissionStatusFailed PaymentAdmissionStatus = "failed"
)

// for schema
var paymentAdmissionStatusEnum []interface{}

func init() {
	var res []PaymentAdmissionStatus
	if err := json.Unmarshal([]byte(`["confirmed","failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentAdmissionStatusEnum = append(paymentAdmissionStatusEnum, v)
	}
}

func (m PaymentAdmissionStatus) validatePaymentAdmissionStatusEnum(path, location string, value PaymentAdmissionStatus) error {
	if err := validate.EnumCase(path, location, value, paymentAdmissionStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this payment admission status
func (m PaymentAdmissionStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePaymentAdmissionStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this payment admission status based on context it is used
func (m PaymentAdmissionStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
