// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SigningCertificate signing certificate
//
// swagger:model SigningCertificate
type SigningCertificate struct {

	// data
	Data *SigningCertificateData `json:"data,omitempty"`
}

// Validate validates this signing certificate
func (m *SigningCertificate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SigningCertificate) validateData(formats strfmt.Registry) error {
	if swag.IsZero(m.Data) { // not required
		return nil
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this signing certificate based on the context it is used
func (m *SigningCertificate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SigningCertificate) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if m.Data != nil {
		if err := m.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SigningCertificate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SigningCertificate) UnmarshalBinary(b []byte) error {
	var res SigningCertificate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SigningCertificateData signing certificate data
//
// swagger:model SigningCertificateData
type SigningCertificateData struct {

	// dn
	// Required: true
	Dn *string `json:"dn"`

	// id
	// Format: uuid
	ID *strfmt.UUID `json:"id,omitempty"`

	// key id
	// Required: true
	// Format: uuid
	KeyID *strfmt.UUID `json:"key_id"`

	// type
	// Enum: [certificates]
	Type string `json:"type,omitempty"`
}

// Validate validates this signing certificate data
func (m *SigningCertificateData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SigningCertificateData) validateDn(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"dn", "body", m.Dn); err != nil {
		return err
	}

	return nil
}

func (m *SigningCertificateData) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("data"+"."+"id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SigningCertificateData) validateKeyID(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"key_id", "body", m.KeyID); err != nil {
		return err
	}

	if err := validate.FormatOf("data"+"."+"key_id", "body", "uuid", m.KeyID.String(), formats); err != nil {
		return err
	}

	return nil
}

var signingCertificateDataTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["certificates"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		signingCertificateDataTypeTypePropEnum = append(signingCertificateDataTypeTypePropEnum, v)
	}
}

const (

	// SigningCertificateDataTypeCertificates captures enum value "certificates"
	SigningCertificateDataTypeCertificates string = "certificates"
)

// prop value enum
func (m *SigningCertificateData) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, signingCertificateDataTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SigningCertificateData) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("data"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this signing certificate data based on context it is used
func (m *SigningCertificateData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SigningCertificateData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SigningCertificateData) UnmarshalBinary(b []byte) error {
	var res SigningCertificateData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
