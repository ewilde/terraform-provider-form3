// Code generated by go-swagger; DO NOT EDIT.

package associations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/form3tech-oss/terraform-provider-form3/models"
)

// GetSepactLiquidityReader is a Reader for the GetSepactLiquidity structure.
type GetSepactLiquidityReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSepactLiquidityReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSepactLiquidityOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSepactLiquidityBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetSepactLiquidityUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSepactLiquidityForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSepactLiquidityNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGetSepactLiquidityConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetSepactLiquidityTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSepactLiquidityInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetSepactLiquidityServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetSepactLiquidityOK creates a GetSepactLiquidityOK with default headers values
func NewGetSepactLiquidityOK() *GetSepactLiquidityOK {
	return &GetSepactLiquidityOK{}
}

/*GetSepactLiquidityOK handles this case with default header values.

List of associations
*/
type GetSepactLiquidityOK struct {
	Payload *models.SepactLiquidityAssociationDetailsListResponse
}

func (o *GetSepactLiquidityOK) Error() string {
	return fmt.Sprintf("[GET /sepact-liquidity][%d] getSepactLiquidityOK  %+v", 200, o.Payload)
}

func (o *GetSepactLiquidityOK) GetPayload() *models.SepactLiquidityAssociationDetailsListResponse {
	return o.Payload
}

func (o *GetSepactLiquidityOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SepactLiquidityAssociationDetailsListResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSepactLiquidityBadRequest creates a GetSepactLiquidityBadRequest with default headers values
func NewGetSepactLiquidityBadRequest() *GetSepactLiquidityBadRequest {
	return &GetSepactLiquidityBadRequest{}
}

/*GetSepactLiquidityBadRequest handles this case with default header values.

Bad Request
*/
type GetSepactLiquidityBadRequest struct {
	Payload *models.APIError
}

func (o *GetSepactLiquidityBadRequest) Error() string {
	return fmt.Sprintf("[GET /sepact-liquidity][%d] getSepactLiquidityBadRequest  %+v", 400, o.Payload)
}

func (o *GetSepactLiquidityBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetSepactLiquidityBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSepactLiquidityUnauthorized creates a GetSepactLiquidityUnauthorized with default headers values
func NewGetSepactLiquidityUnauthorized() *GetSepactLiquidityUnauthorized {
	return &GetSepactLiquidityUnauthorized{}
}

/*GetSepactLiquidityUnauthorized handles this case with default header values.

Authentication credentials were missing or incorrect
*/
type GetSepactLiquidityUnauthorized struct {
	Payload *models.APIError
}

func (o *GetSepactLiquidityUnauthorized) Error() string {
	return fmt.Sprintf("[GET /sepact-liquidity][%d] getSepactLiquidityUnauthorized  %+v", 401, o.Payload)
}

func (o *GetSepactLiquidityUnauthorized) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetSepactLiquidityUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSepactLiquidityForbidden creates a GetSepactLiquidityForbidden with default headers values
func NewGetSepactLiquidityForbidden() *GetSepactLiquidityForbidden {
	return &GetSepactLiquidityForbidden{}
}

/*GetSepactLiquidityForbidden handles this case with default header values.

Forbidden
*/
type GetSepactLiquidityForbidden struct {
	Payload *models.APIError
}

func (o *GetSepactLiquidityForbidden) Error() string {
	return fmt.Sprintf("[GET /sepact-liquidity][%d] getSepactLiquidityForbidden  %+v", 403, o.Payload)
}

func (o *GetSepactLiquidityForbidden) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetSepactLiquidityForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSepactLiquidityNotFound creates a GetSepactLiquidityNotFound with default headers values
func NewGetSepactLiquidityNotFound() *GetSepactLiquidityNotFound {
	return &GetSepactLiquidityNotFound{}
}

/*GetSepactLiquidityNotFound handles this case with default header values.

Record not found
*/
type GetSepactLiquidityNotFound struct {
	Payload *models.APIError
}

func (o *GetSepactLiquidityNotFound) Error() string {
	return fmt.Sprintf("[GET /sepact-liquidity][%d] getSepactLiquidityNotFound  %+v", 404, o.Payload)
}

func (o *GetSepactLiquidityNotFound) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetSepactLiquidityNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSepactLiquidityConflict creates a GetSepactLiquidityConflict with default headers values
func NewGetSepactLiquidityConflict() *GetSepactLiquidityConflict {
	return &GetSepactLiquidityConflict{}
}

/*GetSepactLiquidityConflict handles this case with default header values.

Conflict
*/
type GetSepactLiquidityConflict struct {
	Payload *models.APIError
}

func (o *GetSepactLiquidityConflict) Error() string {
	return fmt.Sprintf("[GET /sepact-liquidity][%d] getSepactLiquidityConflict  %+v", 409, o.Payload)
}

func (o *GetSepactLiquidityConflict) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetSepactLiquidityConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSepactLiquidityTooManyRequests creates a GetSepactLiquidityTooManyRequests with default headers values
func NewGetSepactLiquidityTooManyRequests() *GetSepactLiquidityTooManyRequests {
	return &GetSepactLiquidityTooManyRequests{}
}

/*GetSepactLiquidityTooManyRequests handles this case with default header values.

The request cannot be served due to the applicationâ€™s rate limit
*/
type GetSepactLiquidityTooManyRequests struct {
	Payload *models.APIError
}

func (o *GetSepactLiquidityTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /sepact-liquidity][%d] getSepactLiquidityTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetSepactLiquidityTooManyRequests) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetSepactLiquidityTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSepactLiquidityInternalServerError creates a GetSepactLiquidityInternalServerError with default headers values
func NewGetSepactLiquidityInternalServerError() *GetSepactLiquidityInternalServerError {
	return &GetSepactLiquidityInternalServerError{}
}

/*GetSepactLiquidityInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetSepactLiquidityInternalServerError struct {
	Payload *models.APIError
}

func (o *GetSepactLiquidityInternalServerError) Error() string {
	return fmt.Sprintf("[GET /sepact-liquidity][%d] getSepactLiquidityInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSepactLiquidityInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetSepactLiquidityInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSepactLiquidityServiceUnavailable creates a GetSepactLiquidityServiceUnavailable with default headers values
func NewGetSepactLiquidityServiceUnavailable() *GetSepactLiquidityServiceUnavailable {
	return &GetSepactLiquidityServiceUnavailable{}
}

/*GetSepactLiquidityServiceUnavailable handles this case with default header values.

The server is up, but overloaded with requests. Try again later.
*/
type GetSepactLiquidityServiceUnavailable struct {
	Payload *models.APIError
}

func (o *GetSepactLiquidityServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /sepact-liquidity][%d] getSepactLiquidityServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetSepactLiquidityServiceUnavailable) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetSepactLiquidityServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
