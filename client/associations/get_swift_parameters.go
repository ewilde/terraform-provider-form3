// Code generated by go-swagger; DO NOT EDIT.

package associations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetSwiftParams creates a new GetSwiftParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetSwiftParams() *GetSwiftParams {
	return &GetSwiftParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetSwiftParamsWithTimeout creates a new GetSwiftParams object
// with the ability to set a timeout on a request.
func NewGetSwiftParamsWithTimeout(timeout time.Duration) *GetSwiftParams {
	return &GetSwiftParams{
		timeout: timeout,
	}
}

// NewGetSwiftParamsWithContext creates a new GetSwiftParams object
// with the ability to set a context for a request.
func NewGetSwiftParamsWithContext(ctx context.Context) *GetSwiftParams {
	return &GetSwiftParams{
		Context: ctx,
	}
}

// NewGetSwiftParamsWithHTTPClient creates a new GetSwiftParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetSwiftParamsWithHTTPClient(client *http.Client) *GetSwiftParams {
	return &GetSwiftParams{
		HTTPClient: client,
	}
}

/* GetSwiftParams contains all the parameters to send to the API endpoint
   for the get swift operation.

   Typically these are written to a http.Request.
*/
type GetSwiftParams struct {

	/* FilterOrganisationID.

	   Organisation id
	*/
	FilterOrganisationID []strfmt.UUID

	/* PageNumber.

	   Which page to select
	*/
	PageNumber *string

	/* PageSize.

	   Number of items to select
	*/
	PageSize *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get swift params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSwiftParams) WithDefaults() *GetSwiftParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get swift params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSwiftParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get swift params
func (o *GetSwiftParams) WithTimeout(timeout time.Duration) *GetSwiftParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get swift params
func (o *GetSwiftParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get swift params
func (o *GetSwiftParams) WithContext(ctx context.Context) *GetSwiftParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get swift params
func (o *GetSwiftParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get swift params
func (o *GetSwiftParams) WithHTTPClient(client *http.Client) *GetSwiftParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get swift params
func (o *GetSwiftParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilterOrganisationID adds the filterOrganisationID to the get swift params
func (o *GetSwiftParams) WithFilterOrganisationID(filterOrganisationID []strfmt.UUID) *GetSwiftParams {
	o.SetFilterOrganisationID(filterOrganisationID)
	return o
}

// SetFilterOrganisationID adds the filterOrganisationId to the get swift params
func (o *GetSwiftParams) SetFilterOrganisationID(filterOrganisationID []strfmt.UUID) {
	o.FilterOrganisationID = filterOrganisationID
}

// WithPageNumber adds the pageNumber to the get swift params
func (o *GetSwiftParams) WithPageNumber(pageNumber *string) *GetSwiftParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the get swift params
func (o *GetSwiftParams) SetPageNumber(pageNumber *string) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the get swift params
func (o *GetSwiftParams) WithPageSize(pageSize *int64) *GetSwiftParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get swift params
func (o *GetSwiftParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WriteToRequest writes these params to a swagger request
func (o *GetSwiftParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FilterOrganisationID != nil {

		// binding items for filter[organisation_id]
		joinedFilterOrganisationID := o.bindParamFilterOrganisationID(reg)

		// query array param filter[organisation_id]
		if err := r.SetQueryParam("filter[organisation_id]", joinedFilterOrganisationID...); err != nil {
			return err
		}
	}

	if o.PageNumber != nil {

		// query param page[number]
		var qrPageNumber string

		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := qrPageNumber
		if qPageNumber != "" {

			if err := r.SetQueryParam("page[number]", qPageNumber); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param page[size]
		var qrPageSize int64

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("page[size]", qPageSize); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetSwift binds the parameter filter[organisation_id]
func (o *GetSwiftParams) bindParamFilterOrganisationID(formats strfmt.Registry) []string {
	filterOrganisationIDIR := o.FilterOrganisationID

	var filterOrganisationIDIC []string
	for _, filterOrganisationIDIIR := range filterOrganisationIDIR { // explode []strfmt.UUID

		filterOrganisationIDIIV := filterOrganisationIDIIR.String() // strfmt.UUID as string
		filterOrganisationIDIC = append(filterOrganisationIDIC, filterOrganisationIDIIV)
	}

	// items.CollectionFormat: ""
	filterOrganisationIDIS := swag.JoinByFormat(filterOrganisationIDIC, "")

	return filterOrganisationIDIS
}
