// Code generated by go-swagger; DO NOT EDIT.

package payments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new payments API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for payments API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetPayments(params *GetPaymentsParams) (*GetPaymentsOK, error)

	GetPaymentsIDAdmissionsAdmissionID(params *GetPaymentsIDAdmissionsAdmissionIDParams) (*GetPaymentsIDAdmissionsAdmissionIDOK, error)

	GetPaymentsIDReturnsReturnID(params *GetPaymentsIDReturnsReturnIDParams) (*GetPaymentsIDReturnsReturnIDOK, error)

	GetPaymentsIDReturnsReturnIDAdmissionsAdmissionID(params *GetPaymentsIDReturnsReturnIDAdmissionsAdmissionIDParams) (*GetPaymentsIDReturnsReturnIDAdmissionsAdmissionIDOK, error)

	GetPaymentsIDReturnsReturnIDReversalsReversalID(params *GetPaymentsIDReturnsReturnIDReversalsReversalIDParams) (*GetPaymentsIDReturnsReturnIDReversalsReversalIDOK, error)

	GetPaymentsIDReturnsReturnIDReversalsReversalIDAdmissionsAdmissionID(params *GetPaymentsIDReturnsReturnIDReversalsReversalIDAdmissionsAdmissionIDParams) (*GetPaymentsIDReturnsReturnIDReversalsReversalIDAdmissionsAdmissionIDOK, error)

	GetPaymentsIDReturnsReturnIDSubmissionsSubmissionID(params *GetPaymentsIDReturnsReturnIDSubmissionsSubmissionIDParams) (*GetPaymentsIDReturnsReturnIDSubmissionsSubmissionIDOK, error)

	GetPaymentsIDReversalsReversalID(params *GetPaymentsIDReversalsReversalIDParams) (*GetPaymentsIDReversalsReversalIDOK, error)

	GetPaymentsIDReversalsReversalIDAdmissionsAdmissionID(params *GetPaymentsIDReversalsReversalIDAdmissionsAdmissionIDParams) (*GetPaymentsIDReversalsReversalIDAdmissionsAdmissionIDOK, error)

	GetPaymentsIDSubmissionsSubmissionID(params *GetPaymentsIDSubmissionsSubmissionIDParams) (*GetPaymentsIDSubmissionsSubmissionIDOK, error)

	GetPositions(params *GetPositionsParams) (*GetPositionsOK, error)

	PatchPaymentsIDReturnsReturnIDSubmissionsSubmissionID(params *PatchPaymentsIDReturnsReturnIDSubmissionsSubmissionIDParams) (*PatchPaymentsIDReturnsReturnIDSubmissionsSubmissionIDOK, error)

	PatchPaymentsIDSubmissionsSubmissionID(params *PatchPaymentsIDSubmissionsSubmissionIDParams) (*PatchPaymentsIDSubmissionsSubmissionIDOK, error)

	PostPayments(params *PostPaymentsParams) (*PostPaymentsCreated, error)

	PostPaymentsIDAdmissions(params *PostPaymentsIDAdmissionsParams) (*PostPaymentsIDAdmissionsCreated, error)

	PostPaymentsIDReturns(params *PostPaymentsIDReturnsParams) (*PostPaymentsIDReturnsCreated, error)

	PostPaymentsIDReturnsReturnIDAdmissions(params *PostPaymentsIDReturnsReturnIDAdmissionsParams) (*PostPaymentsIDReturnsReturnIDAdmissionsCreated, error)

	PostPaymentsIDReturnsReturnIDReversals(params *PostPaymentsIDReturnsReturnIDReversalsParams) (*PostPaymentsIDReturnsReturnIDReversalsCreated, error)

	PostPaymentsIDReturnsReturnIDReversalsReversalIDAdmissions(params *PostPaymentsIDReturnsReturnIDReversalsReversalIDAdmissionsParams) (*PostPaymentsIDReturnsReturnIDReversalsReversalIDAdmissionsCreated, error)

	PostPaymentsIDReturnsReturnIDSubmissions(params *PostPaymentsIDReturnsReturnIDSubmissionsParams) (*PostPaymentsIDReturnsReturnIDSubmissionsCreated, error)

	PostPaymentsIDReturnsReturnIDSubmissionsReturnSubmissionIDValidations(params *PostPaymentsIDReturnsReturnIDSubmissionsReturnSubmissionIDValidationsParams) (*PostPaymentsIDReturnsReturnIDSubmissionsReturnSubmissionIDValidationsCreated, error)

	PostPaymentsIDReversals(params *PostPaymentsIDReversalsParams) (*PostPaymentsIDReversalsCreated, error)

	PostPaymentsIDReversalsReversalIDAdmissions(params *PostPaymentsIDReversalsReversalIDAdmissionsParams) (*PostPaymentsIDReversalsReversalIDAdmissionsCreated, error)

	PostPaymentsIDSubmissions(params *PostPaymentsIDSubmissionsParams) (*PostPaymentsIDSubmissionsCreated, error)

	PostPaymentsIDSubmissionsSubmissionIDValidations(params *PostPaymentsIDSubmissionsSubmissionIDValidationsParams) (*PostPaymentsIDSubmissionsSubmissionIDValidationsCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetPayments lists payments
*/
func (a *Client) GetPayments(params *GetPaymentsParams) (*GetPaymentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPayments",
		Method:             "GET",
		PathPattern:        "/payments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPaymentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPaymentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPayments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPaymentsIDAdmissionsAdmissionID fetches admission
*/
func (a *Client) GetPaymentsIDAdmissionsAdmissionID(params *GetPaymentsIDAdmissionsAdmissionIDParams) (*GetPaymentsIDAdmissionsAdmissionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentsIDAdmissionsAdmissionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPaymentsIDAdmissionsAdmissionID",
		Method:             "GET",
		PathPattern:        "/payments/{id}/admissions/{admissionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPaymentsIDAdmissionsAdmissionIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPaymentsIDAdmissionsAdmissionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPaymentsIDAdmissionsAdmissionID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPaymentsIDReturnsReturnID fetches return
*/
func (a *Client) GetPaymentsIDReturnsReturnID(params *GetPaymentsIDReturnsReturnIDParams) (*GetPaymentsIDReturnsReturnIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentsIDReturnsReturnIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPaymentsIDReturnsReturnID",
		Method:             "GET",
		PathPattern:        "/payments/{id}/returns/{returnId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPaymentsIDReturnsReturnIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPaymentsIDReturnsReturnIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPaymentsIDReturnsReturnID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPaymentsIDReturnsReturnIDAdmissionsAdmissionID fetches return admission
*/
func (a *Client) GetPaymentsIDReturnsReturnIDAdmissionsAdmissionID(params *GetPaymentsIDReturnsReturnIDAdmissionsAdmissionIDParams) (*GetPaymentsIDReturnsReturnIDAdmissionsAdmissionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentsIDReturnsReturnIDAdmissionsAdmissionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPaymentsIDReturnsReturnIDAdmissionsAdmissionID",
		Method:             "GET",
		PathPattern:        "/payments/{id}/returns/{returnId}/admissions/{admissionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPaymentsIDReturnsReturnIDAdmissionsAdmissionIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPaymentsIDReturnsReturnIDAdmissionsAdmissionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPaymentsIDReturnsReturnIDAdmissionsAdmissionID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPaymentsIDReturnsReturnIDReversalsReversalID fetches return reversal
*/
func (a *Client) GetPaymentsIDReturnsReturnIDReversalsReversalID(params *GetPaymentsIDReturnsReturnIDReversalsReversalIDParams) (*GetPaymentsIDReturnsReturnIDReversalsReversalIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentsIDReturnsReturnIDReversalsReversalIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPaymentsIDReturnsReturnIDReversalsReversalID",
		Method:             "GET",
		PathPattern:        "/payments/{id}/returns/{returnId}/reversals/{reversalId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPaymentsIDReturnsReturnIDReversalsReversalIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPaymentsIDReturnsReturnIDReversalsReversalIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPaymentsIDReturnsReturnIDReversalsReversalID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPaymentsIDReturnsReturnIDReversalsReversalIDAdmissionsAdmissionID fetches return reversal admission
*/
func (a *Client) GetPaymentsIDReturnsReturnIDReversalsReversalIDAdmissionsAdmissionID(params *GetPaymentsIDReturnsReturnIDReversalsReversalIDAdmissionsAdmissionIDParams) (*GetPaymentsIDReturnsReturnIDReversalsReversalIDAdmissionsAdmissionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentsIDReturnsReturnIDReversalsReversalIDAdmissionsAdmissionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPaymentsIDReturnsReturnIDReversalsReversalIDAdmissionsAdmissionID",
		Method:             "GET",
		PathPattern:        "/payments/{id}/returns/{returnId}/reversals/{reversalId}/admissions/{admissionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPaymentsIDReturnsReturnIDReversalsReversalIDAdmissionsAdmissionIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPaymentsIDReturnsReturnIDReversalsReversalIDAdmissionsAdmissionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPaymentsIDReturnsReturnIDReversalsReversalIDAdmissionsAdmissionID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPaymentsIDReturnsReturnIDSubmissionsSubmissionID fetches return submission
*/
func (a *Client) GetPaymentsIDReturnsReturnIDSubmissionsSubmissionID(params *GetPaymentsIDReturnsReturnIDSubmissionsSubmissionIDParams) (*GetPaymentsIDReturnsReturnIDSubmissionsSubmissionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentsIDReturnsReturnIDSubmissionsSubmissionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPaymentsIDReturnsReturnIDSubmissionsSubmissionID",
		Method:             "GET",
		PathPattern:        "/payments/{id}/returns/{returnId}/submissions/{submissionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPaymentsIDReturnsReturnIDSubmissionsSubmissionIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPaymentsIDReturnsReturnIDSubmissionsSubmissionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPaymentsIDReturnsReturnIDSubmissionsSubmissionID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPaymentsIDReversalsReversalID fetches reversal
*/
func (a *Client) GetPaymentsIDReversalsReversalID(params *GetPaymentsIDReversalsReversalIDParams) (*GetPaymentsIDReversalsReversalIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentsIDReversalsReversalIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPaymentsIDReversalsReversalID",
		Method:             "GET",
		PathPattern:        "/payments/{id}/reversals/{reversalId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPaymentsIDReversalsReversalIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPaymentsIDReversalsReversalIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPaymentsIDReversalsReversalID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPaymentsIDReversalsReversalIDAdmissionsAdmissionID fetches reversal admission
*/
func (a *Client) GetPaymentsIDReversalsReversalIDAdmissionsAdmissionID(params *GetPaymentsIDReversalsReversalIDAdmissionsAdmissionIDParams) (*GetPaymentsIDReversalsReversalIDAdmissionsAdmissionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentsIDReversalsReversalIDAdmissionsAdmissionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPaymentsIDReversalsReversalIDAdmissionsAdmissionID",
		Method:             "GET",
		PathPattern:        "/payments/{id}/reversals/{reversalId}/admissions/{admissionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPaymentsIDReversalsReversalIDAdmissionsAdmissionIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPaymentsIDReversalsReversalIDAdmissionsAdmissionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPaymentsIDReversalsReversalIDAdmissionsAdmissionID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPaymentsIDSubmissionsSubmissionID fetches submission
*/
func (a *Client) GetPaymentsIDSubmissionsSubmissionID(params *GetPaymentsIDSubmissionsSubmissionIDParams) (*GetPaymentsIDSubmissionsSubmissionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentsIDSubmissionsSubmissionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPaymentsIDSubmissionsSubmissionID",
		Method:             "GET",
		PathPattern:        "/payments/{id}/submissions/{submissionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPaymentsIDSubmissionsSubmissionIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPaymentsIDSubmissionsSubmissionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPaymentsIDSubmissionsSubmissionID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPositions lists positions
*/
func (a *Client) GetPositions(params *GetPositionsParams) (*GetPositionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPositionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPositions",
		Method:             "GET",
		PathPattern:        "/positions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPositionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPositionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPositions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchPaymentsIDReturnsReturnIDSubmissionsSubmissionID updates return submission
*/
func (a *Client) PatchPaymentsIDReturnsReturnIDSubmissionsSubmissionID(params *PatchPaymentsIDReturnsReturnIDSubmissionsSubmissionIDParams) (*PatchPaymentsIDReturnsReturnIDSubmissionsSubmissionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchPaymentsIDReturnsReturnIDSubmissionsSubmissionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchPaymentsIDReturnsReturnIDSubmissionsSubmissionID",
		Method:             "PATCH",
		PathPattern:        "/payments/{id}/returns/{returnId}/submissions/{submissionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchPaymentsIDReturnsReturnIDSubmissionsSubmissionIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchPaymentsIDReturnsReturnIDSubmissionsSubmissionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchPaymentsIDReturnsReturnIDSubmissionsSubmissionID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchPaymentsIDSubmissionsSubmissionID updates submission
*/
func (a *Client) PatchPaymentsIDSubmissionsSubmissionID(params *PatchPaymentsIDSubmissionsSubmissionIDParams) (*PatchPaymentsIDSubmissionsSubmissionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchPaymentsIDSubmissionsSubmissionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchPaymentsIDSubmissionsSubmissionID",
		Method:             "PATCH",
		PathPattern:        "/payments/{id}/submissions/{submissionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchPaymentsIDSubmissionsSubmissionIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchPaymentsIDSubmissionsSubmissionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchPaymentsIDSubmissionsSubmissionID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostPayments creates payment
*/
func (a *Client) PostPayments(params *PostPaymentsParams) (*PostPaymentsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPaymentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPayments",
		Method:             "POST",
		PathPattern:        "/payments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPaymentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPaymentsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPayments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostPaymentsIDAdmissions creates admission
*/
func (a *Client) PostPaymentsIDAdmissions(params *PostPaymentsIDAdmissionsParams) (*PostPaymentsIDAdmissionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPaymentsIDAdmissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPaymentsIDAdmissions",
		Method:             "POST",
		PathPattern:        "/payments/{id}/admissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPaymentsIDAdmissionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPaymentsIDAdmissionsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPaymentsIDAdmissions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostPaymentsIDReturns creates return
*/
func (a *Client) PostPaymentsIDReturns(params *PostPaymentsIDReturnsParams) (*PostPaymentsIDReturnsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPaymentsIDReturnsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPaymentsIDReturns",
		Method:             "POST",
		PathPattern:        "/payments/{id}/returns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPaymentsIDReturnsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPaymentsIDReturnsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPaymentsIDReturns: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostPaymentsIDReturnsReturnIDAdmissions creates return admission
*/
func (a *Client) PostPaymentsIDReturnsReturnIDAdmissions(params *PostPaymentsIDReturnsReturnIDAdmissionsParams) (*PostPaymentsIDReturnsReturnIDAdmissionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPaymentsIDReturnsReturnIDAdmissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPaymentsIDReturnsReturnIDAdmissions",
		Method:             "POST",
		PathPattern:        "/payments/{id}/returns/{returnId}/admissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPaymentsIDReturnsReturnIDAdmissionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPaymentsIDReturnsReturnIDAdmissionsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPaymentsIDReturnsReturnIDAdmissions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostPaymentsIDReturnsReturnIDReversals creates return reversal
*/
func (a *Client) PostPaymentsIDReturnsReturnIDReversals(params *PostPaymentsIDReturnsReturnIDReversalsParams) (*PostPaymentsIDReturnsReturnIDReversalsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPaymentsIDReturnsReturnIDReversalsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPaymentsIDReturnsReturnIDReversals",
		Method:             "POST",
		PathPattern:        "/payments/{id}/returns/{returnId}/reversals",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPaymentsIDReturnsReturnIDReversalsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPaymentsIDReturnsReturnIDReversalsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPaymentsIDReturnsReturnIDReversals: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostPaymentsIDReturnsReturnIDReversalsReversalIDAdmissions creates return reversal admission
*/
func (a *Client) PostPaymentsIDReturnsReturnIDReversalsReversalIDAdmissions(params *PostPaymentsIDReturnsReturnIDReversalsReversalIDAdmissionsParams) (*PostPaymentsIDReturnsReturnIDReversalsReversalIDAdmissionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPaymentsIDReturnsReturnIDReversalsReversalIDAdmissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPaymentsIDReturnsReturnIDReversalsReversalIDAdmissions",
		Method:             "POST",
		PathPattern:        "/payments/{id}/returns/{returnId}/reversals/{reversalId}/admissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPaymentsIDReturnsReturnIDReversalsReversalIDAdmissionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPaymentsIDReturnsReturnIDReversalsReversalIDAdmissionsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPaymentsIDReturnsReturnIDReversalsReversalIDAdmissions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostPaymentsIDReturnsReturnIDSubmissions creates return submission
*/
func (a *Client) PostPaymentsIDReturnsReturnIDSubmissions(params *PostPaymentsIDReturnsReturnIDSubmissionsParams) (*PostPaymentsIDReturnsReturnIDSubmissionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPaymentsIDReturnsReturnIDSubmissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPaymentsIDReturnsReturnIDSubmissions",
		Method:             "POST",
		PathPattern:        "/payments/{id}/returns/{returnId}/submissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPaymentsIDReturnsReturnIDSubmissionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPaymentsIDReturnsReturnIDSubmissionsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPaymentsIDReturnsReturnIDSubmissions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostPaymentsIDReturnsReturnIDSubmissionsReturnSubmissionIDValidations creates return submission validation
*/
func (a *Client) PostPaymentsIDReturnsReturnIDSubmissionsReturnSubmissionIDValidations(params *PostPaymentsIDReturnsReturnIDSubmissionsReturnSubmissionIDValidationsParams) (*PostPaymentsIDReturnsReturnIDSubmissionsReturnSubmissionIDValidationsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPaymentsIDReturnsReturnIDSubmissionsReturnSubmissionIDValidationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPaymentsIDReturnsReturnIDSubmissionsReturnSubmissionIDValidations",
		Method:             "POST",
		PathPattern:        "/payments/{id}/returns/{returnId}/submissions/{returnSubmissionId}/validations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPaymentsIDReturnsReturnIDSubmissionsReturnSubmissionIDValidationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPaymentsIDReturnsReturnIDSubmissionsReturnSubmissionIDValidationsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPaymentsIDReturnsReturnIDSubmissionsReturnSubmissionIDValidations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostPaymentsIDReversals creates reversal
*/
func (a *Client) PostPaymentsIDReversals(params *PostPaymentsIDReversalsParams) (*PostPaymentsIDReversalsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPaymentsIDReversalsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPaymentsIDReversals",
		Method:             "POST",
		PathPattern:        "/payments/{id}/reversals",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPaymentsIDReversalsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPaymentsIDReversalsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPaymentsIDReversals: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostPaymentsIDReversalsReversalIDAdmissions creates reversal admission
*/
func (a *Client) PostPaymentsIDReversalsReversalIDAdmissions(params *PostPaymentsIDReversalsReversalIDAdmissionsParams) (*PostPaymentsIDReversalsReversalIDAdmissionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPaymentsIDReversalsReversalIDAdmissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPaymentsIDReversalsReversalIDAdmissions",
		Method:             "POST",
		PathPattern:        "/payments/{id}/reversals/{reversalId}/admissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPaymentsIDReversalsReversalIDAdmissionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPaymentsIDReversalsReversalIDAdmissionsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPaymentsIDReversalsReversalIDAdmissions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostPaymentsIDSubmissions creates submission
*/
func (a *Client) PostPaymentsIDSubmissions(params *PostPaymentsIDSubmissionsParams) (*PostPaymentsIDSubmissionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPaymentsIDSubmissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPaymentsIDSubmissions",
		Method:             "POST",
		PathPattern:        "/payments/{id}/submissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPaymentsIDSubmissionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPaymentsIDSubmissionsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPaymentsIDSubmissions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostPaymentsIDSubmissionsSubmissionIDValidations creates payment submission validation
*/
func (a *Client) PostPaymentsIDSubmissionsSubmissionIDValidations(params *PostPaymentsIDSubmissionsSubmissionIDValidationsParams) (*PostPaymentsIDSubmissionsSubmissionIDValidationsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPaymentsIDSubmissionsSubmissionIDValidationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPaymentsIDSubmissionsSubmissionIDValidations",
		Method:             "POST",
		PathPattern:        "/payments/{id}/submissions/{submissionId}/validations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPaymentsIDSubmissionsSubmissionIDValidationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPaymentsIDSubmissionsSubmissionIDValidationsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPaymentsIDSubmissionsSubmissionIDValidations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
