// Code generated by go-swagger; DO NOT EDIT.

package organisations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new organisations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for organisations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteUnitsID(params *DeleteUnitsIDParams, opts ...ClientOption) (*DeleteUnitsIDNoContent, error)

	GetUnits(params *GetUnitsParams, opts ...ClientOption) (*GetUnitsOK, error)

	GetUnitsID(params *GetUnitsIDParams, opts ...ClientOption) (*GetUnitsIDOK, error)

	PatchUnitsID(params *PatchUnitsIDParams, opts ...ClientOption) (*PatchUnitsIDOK, error)

	PostUnits(params *PostUnitsParams, opts ...ClientOption) (*PostUnitsCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteUnitsID deletes organisation
*/
func (a *Client) DeleteUnitsID(params *DeleteUnitsIDParams, opts ...ClientOption) (*DeleteUnitsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUnitsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteUnitsID",
		Method:             "DELETE",
		PathPattern:        "/units/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUnitsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUnitsIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteUnitsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUnits lists all organisations
*/
func (a *Client) GetUnits(params *GetUnitsParams, opts ...ClientOption) (*GetUnitsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUnitsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUnits",
		Method:             "GET",
		PathPattern:        "/units",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUnitsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUnitsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUnits: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUnitsID fetches organisation
*/
func (a *Client) GetUnitsID(params *GetUnitsIDParams, opts ...ClientOption) (*GetUnitsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUnitsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUnitsID",
		Method:             "GET",
		PathPattern:        "/units/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUnitsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUnitsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUnitsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchUnitsID updates organisation
*/
func (a *Client) PatchUnitsID(params *PatchUnitsIDParams, opts ...ClientOption) (*PatchUnitsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchUnitsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchUnitsID",
		Method:             "PATCH",
		PathPattern:        "/units/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchUnitsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchUnitsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchUnitsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostUnits creates organisation
*/
func (a *Client) PostUnits(params *PostUnitsParams, opts ...ClientOption) (*PostUnitsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUnitsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostUnits",
		Method:             "POST",
		PathPattern:        "/units",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUnitsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUnitsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostUnits: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
