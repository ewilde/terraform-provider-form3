// Code generated by go-swagger; DO NOT EDIT.

package associations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/form3tech-oss/terraform-provider-form3/models"
)

// PostSepactLiquidityReader is a Reader for the PostSepactLiquidity structure.
type PostSepactLiquidityReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostSepactLiquidityReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPostSepactLiquidityCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostSepactLiquidityBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPostSepactLiquidityUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPostSepactLiquidityForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPostSepactLiquidityNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewPostSepactLiquidityConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewPostSepactLiquidityTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewPostSepactLiquidityInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewPostSepactLiquidityServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostSepactLiquidityCreated creates a PostSepactLiquidityCreated with default headers values
func NewPostSepactLiquidityCreated() *PostSepactLiquidityCreated {
	return &PostSepactLiquidityCreated{}
}

/*PostSepactLiquidityCreated handles this case with default header values.

creation response
*/
type PostSepactLiquidityCreated struct {
	Payload *models.SepactLiquidityAssociationDetailsResponse
}

func (o *PostSepactLiquidityCreated) Error() string {
	return fmt.Sprintf("[POST /sepact-liquidity][%d] postSepactLiquidityCreated  %+v", 201, o.Payload)
}

func (o *PostSepactLiquidityCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SepactLiquidityAssociationDetailsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSepactLiquidityBadRequest creates a PostSepactLiquidityBadRequest with default headers values
func NewPostSepactLiquidityBadRequest() *PostSepactLiquidityBadRequest {
	return &PostSepactLiquidityBadRequest{}
}

/*PostSepactLiquidityBadRequest handles this case with default header values.

Bad Request
*/
type PostSepactLiquidityBadRequest struct {
	Payload *models.APIError
}

func (o *PostSepactLiquidityBadRequest) Error() string {
	return fmt.Sprintf("[POST /sepact-liquidity][%d] postSepactLiquidityBadRequest  %+v", 400, o.Payload)
}

func (o *PostSepactLiquidityBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSepactLiquidityUnauthorized creates a PostSepactLiquidityUnauthorized with default headers values
func NewPostSepactLiquidityUnauthorized() *PostSepactLiquidityUnauthorized {
	return &PostSepactLiquidityUnauthorized{}
}

/*PostSepactLiquidityUnauthorized handles this case with default header values.

Authentication credentials were missing or incorrect
*/
type PostSepactLiquidityUnauthorized struct {
	Payload *models.APIError
}

func (o *PostSepactLiquidityUnauthorized) Error() string {
	return fmt.Sprintf("[POST /sepact-liquidity][%d] postSepactLiquidityUnauthorized  %+v", 401, o.Payload)
}

func (o *PostSepactLiquidityUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSepactLiquidityForbidden creates a PostSepactLiquidityForbidden with default headers values
func NewPostSepactLiquidityForbidden() *PostSepactLiquidityForbidden {
	return &PostSepactLiquidityForbidden{}
}

/*PostSepactLiquidityForbidden handles this case with default header values.

Forbidden
*/
type PostSepactLiquidityForbidden struct {
	Payload *models.APIError
}

func (o *PostSepactLiquidityForbidden) Error() string {
	return fmt.Sprintf("[POST /sepact-liquidity][%d] postSepactLiquidityForbidden  %+v", 403, o.Payload)
}

func (o *PostSepactLiquidityForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSepactLiquidityNotFound creates a PostSepactLiquidityNotFound with default headers values
func NewPostSepactLiquidityNotFound() *PostSepactLiquidityNotFound {
	return &PostSepactLiquidityNotFound{}
}

/*PostSepactLiquidityNotFound handles this case with default header values.

Record not found
*/
type PostSepactLiquidityNotFound struct {
	Payload *models.APIError
}

func (o *PostSepactLiquidityNotFound) Error() string {
	return fmt.Sprintf("[POST /sepact-liquidity][%d] postSepactLiquidityNotFound  %+v", 404, o.Payload)
}

func (o *PostSepactLiquidityNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSepactLiquidityConflict creates a PostSepactLiquidityConflict with default headers values
func NewPostSepactLiquidityConflict() *PostSepactLiquidityConflict {
	return &PostSepactLiquidityConflict{}
}

/*PostSepactLiquidityConflict handles this case with default header values.

Conflict
*/
type PostSepactLiquidityConflict struct {
	Payload *models.APIError
}

func (o *PostSepactLiquidityConflict) Error() string {
	return fmt.Sprintf("[POST /sepact-liquidity][%d] postSepactLiquidityConflict  %+v", 409, o.Payload)
}

func (o *PostSepactLiquidityConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSepactLiquidityTooManyRequests creates a PostSepactLiquidityTooManyRequests with default headers values
func NewPostSepactLiquidityTooManyRequests() *PostSepactLiquidityTooManyRequests {
	return &PostSepactLiquidityTooManyRequests{}
}

/*PostSepactLiquidityTooManyRequests handles this case with default header values.

The request cannot be served due to the applicationâ€™s rate limit
*/
type PostSepactLiquidityTooManyRequests struct {
	Payload *models.APIError
}

func (o *PostSepactLiquidityTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /sepact-liquidity][%d] postSepactLiquidityTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostSepactLiquidityTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSepactLiquidityInternalServerError creates a PostSepactLiquidityInternalServerError with default headers values
func NewPostSepactLiquidityInternalServerError() *PostSepactLiquidityInternalServerError {
	return &PostSepactLiquidityInternalServerError{}
}

/*PostSepactLiquidityInternalServerError handles this case with default header values.

Internal Server Error
*/
type PostSepactLiquidityInternalServerError struct {
	Payload *models.APIError
}

func (o *PostSepactLiquidityInternalServerError) Error() string {
	return fmt.Sprintf("[POST /sepact-liquidity][%d] postSepactLiquidityInternalServerError  %+v", 500, o.Payload)
}

func (o *PostSepactLiquidityInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSepactLiquidityServiceUnavailable creates a PostSepactLiquidityServiceUnavailable with default headers values
func NewPostSepactLiquidityServiceUnavailable() *PostSepactLiquidityServiceUnavailable {
	return &PostSepactLiquidityServiceUnavailable{}
}

/*PostSepactLiquidityServiceUnavailable handles this case with default header values.

The server is up, but overloaded with requests. Try again later.
*/
type PostSepactLiquidityServiceUnavailable struct {
	Payload *models.APIError
}

func (o *PostSepactLiquidityServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /sepact-liquidity][%d] postSepactLiquidityServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostSepactLiquidityServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
