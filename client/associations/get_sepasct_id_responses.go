// Code generated by go-swagger; DO NOT EDIT.

package associations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/form3tech-oss/terraform-provider-form3/models"
)

// GetSepasctIDReader is a Reader for the GetSepasctID structure.
type GetSepasctIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSepasctIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSepasctIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSepasctIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetSepasctIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSepasctIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSepasctIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGetSepasctIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetSepasctIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSepasctIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetSepasctIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetSepasctIDOK creates a GetSepasctIDOK with default headers values
func NewGetSepasctIDOK() *GetSepasctIDOK {
	return &GetSepasctIDOK{}
}

/*GetSepasctIDOK handles this case with default header values.

Associations details
*/
type GetSepasctIDOK struct {
	Payload *models.SepaSctAssociationDetailsResponse
}

func (o *GetSepasctIDOK) Error() string {
	return fmt.Sprintf("[GET /sepasct/{id}][%d] getSepasctIdOK  %+v", 200, o.Payload)
}

func (o *GetSepasctIDOK) GetPayload() *models.SepaSctAssociationDetailsResponse {
	return o.Payload
}

func (o *GetSepasctIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SepaSctAssociationDetailsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSepasctIDBadRequest creates a GetSepasctIDBadRequest with default headers values
func NewGetSepasctIDBadRequest() *GetSepasctIDBadRequest {
	return &GetSepasctIDBadRequest{}
}

/*GetSepasctIDBadRequest handles this case with default header values.

Bad Request
*/
type GetSepasctIDBadRequest struct {
	Payload *models.APIError
}

func (o *GetSepasctIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /sepasct/{id}][%d] getSepasctIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetSepasctIDBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetSepasctIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSepasctIDUnauthorized creates a GetSepasctIDUnauthorized with default headers values
func NewGetSepasctIDUnauthorized() *GetSepasctIDUnauthorized {
	return &GetSepasctIDUnauthorized{}
}

/*GetSepasctIDUnauthorized handles this case with default header values.

Authentication credentials were missing or incorrect
*/
type GetSepasctIDUnauthorized struct {
	Payload *models.APIError
}

func (o *GetSepasctIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /sepasct/{id}][%d] getSepasctIdUnauthorized  %+v", 401, o.Payload)
}

func (o *GetSepasctIDUnauthorized) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetSepasctIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSepasctIDForbidden creates a GetSepasctIDForbidden with default headers values
func NewGetSepasctIDForbidden() *GetSepasctIDForbidden {
	return &GetSepasctIDForbidden{}
}

/*GetSepasctIDForbidden handles this case with default header values.

Forbidden
*/
type GetSepasctIDForbidden struct {
	Payload *models.APIError
}

func (o *GetSepasctIDForbidden) Error() string {
	return fmt.Sprintf("[GET /sepasct/{id}][%d] getSepasctIdForbidden  %+v", 403, o.Payload)
}

func (o *GetSepasctIDForbidden) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetSepasctIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSepasctIDNotFound creates a GetSepasctIDNotFound with default headers values
func NewGetSepasctIDNotFound() *GetSepasctIDNotFound {
	return &GetSepasctIDNotFound{}
}

/*GetSepasctIDNotFound handles this case with default header values.

Record not found
*/
type GetSepasctIDNotFound struct {
	Payload *models.APIError
}

func (o *GetSepasctIDNotFound) Error() string {
	return fmt.Sprintf("[GET /sepasct/{id}][%d] getSepasctIdNotFound  %+v", 404, o.Payload)
}

func (o *GetSepasctIDNotFound) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetSepasctIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSepasctIDConflict creates a GetSepasctIDConflict with default headers values
func NewGetSepasctIDConflict() *GetSepasctIDConflict {
	return &GetSepasctIDConflict{}
}

/*GetSepasctIDConflict handles this case with default header values.

Conflict
*/
type GetSepasctIDConflict struct {
	Payload *models.APIError
}

func (o *GetSepasctIDConflict) Error() string {
	return fmt.Sprintf("[GET /sepasct/{id}][%d] getSepasctIdConflict  %+v", 409, o.Payload)
}

func (o *GetSepasctIDConflict) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetSepasctIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSepasctIDTooManyRequests creates a GetSepasctIDTooManyRequests with default headers values
func NewGetSepasctIDTooManyRequests() *GetSepasctIDTooManyRequests {
	return &GetSepasctIDTooManyRequests{}
}

/*GetSepasctIDTooManyRequests handles this case with default header values.

The request cannot be served due to the applicationâ€™s rate limit
*/
type GetSepasctIDTooManyRequests struct {
	Payload *models.APIError
}

func (o *GetSepasctIDTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /sepasct/{id}][%d] getSepasctIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetSepasctIDTooManyRequests) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetSepasctIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSepasctIDInternalServerError creates a GetSepasctIDInternalServerError with default headers values
func NewGetSepasctIDInternalServerError() *GetSepasctIDInternalServerError {
	return &GetSepasctIDInternalServerError{}
}

/*GetSepasctIDInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetSepasctIDInternalServerError struct {
	Payload *models.APIError
}

func (o *GetSepasctIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /sepasct/{id}][%d] getSepasctIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSepasctIDInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetSepasctIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSepasctIDServiceUnavailable creates a GetSepasctIDServiceUnavailable with default headers values
func NewGetSepasctIDServiceUnavailable() *GetSepasctIDServiceUnavailable {
	return &GetSepasctIDServiceUnavailable{}
}

/*GetSepasctIDServiceUnavailable handles this case with default header values.

The server is up, but overloaded with requests. Try again later.
*/
type GetSepasctIDServiceUnavailable struct {
	Payload *models.APIError
}

func (o *GetSepasctIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /sepasct/{id}][%d] getSepasctIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetSepasctIDServiceUnavailable) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetSepasctIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
