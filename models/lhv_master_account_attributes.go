// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LhvMasterAccountAttributes lhv master account attributes
// swagger:model LhvMasterAccountAttributes
type LhvMasterAccountAttributes struct {

	// Local country bank identifier. In the UK this is the sort code.
	// Pattern: ^[A-Z0-9]{0,16}$
	BankID string `json:"bank_id,omitempty"`

	// SWIFT BIC in either 8 or 11 character format
	// Required: true
	// Pattern: ^([A-Z]{6}[A-Z0-9]{2}|[A-Z]{6}[A-Z0-9]{5})$
	Bic string `json:"bic"`

	// country
	// Required: true
	// Pattern: ^[A-Z]{2}$
	Country string `json:"country"`

	// master account iban.
	// Required: true
	// Pattern: ^[A-Z]{2}[0-9]{2}[A-Z0-9]{0,64}$
	Iban string `json:"iban"`

	// requires a direct account preprovisioned under LHV organisation.
	RequiresDirectAccount *bool `json:"requires_direct_account,omitempty"`
}

// Validate validates this lhv master account attributes
func (m *LhvMasterAccountAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBankID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIban(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LhvMasterAccountAttributes) validateBankID(formats strfmt.Registry) error {

	if swag.IsZero(m.BankID) { // not required
		return nil
	}

	if err := validate.Pattern("bank_id", "body", string(m.BankID), `^[A-Z0-9]{0,16}$`); err != nil {
		return err
	}

	return nil
}

func (m *LhvMasterAccountAttributes) validateBic(formats strfmt.Registry) error {

	if err := validate.RequiredString("bic", "body", string(m.Bic)); err != nil {
		return err
	}

	if err := validate.Pattern("bic", "body", string(m.Bic), `^([A-Z]{6}[A-Z0-9]{2}|[A-Z]{6}[A-Z0-9]{5})$`); err != nil {
		return err
	}

	return nil
}

func (m *LhvMasterAccountAttributes) validateCountry(formats strfmt.Registry) error {

	if err := validate.RequiredString("country", "body", string(m.Country)); err != nil {
		return err
	}

	if err := validate.Pattern("country", "body", string(m.Country), `^[A-Z]{2}$`); err != nil {
		return err
	}

	return nil
}

func (m *LhvMasterAccountAttributes) validateIban(formats strfmt.Registry) error {

	if err := validate.RequiredString("iban", "body", string(m.Iban)); err != nil {
		return err
	}

	if err := validate.Pattern("iban", "body", string(m.Iban), `^[A-Z]{2}[0-9]{2}[A-Z0-9]{0,64}$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LhvMasterAccountAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LhvMasterAccountAttributes) UnmarshalBinary(b []byte) error {
	var res LhvMasterAccountAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
