// Code generated by go-swagger; DO NOT EDIT.

package associations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/form3tech-oss/terraform-provider-form3/models"
)

// PatchSepaddIDReader is a Reader for the PatchSepaddID structure.
type PatchSepaddIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchSepaddIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchSepaddIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchSepaddIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchSepaddIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchSepaddIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchSepaddIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPatchSepaddIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchSepaddIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchSepaddIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchSepaddIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchSepaddIDOK creates a PatchSepaddIDOK with default headers values
func NewPatchSepaddIDOK() *PatchSepaddIDOK {
	return &PatchSepaddIDOK{}
}

/*PatchSepaddIDOK handles this case with default header values.

creation response
*/
type PatchSepaddIDOK struct {
	Payload *models.SepaDDAssociationDetailsResponse
}

func (o *PatchSepaddIDOK) Error() string {
	return fmt.Sprintf("[PATCH /sepadd/{id}][%d] patchSepaddIdOK  %+v", 200, o.Payload)
}

func (o *PatchSepaddIDOK) GetPayload() *models.SepaDDAssociationDetailsResponse {
	return o.Payload
}

func (o *PatchSepaddIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SepaDDAssociationDetailsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSepaddIDBadRequest creates a PatchSepaddIDBadRequest with default headers values
func NewPatchSepaddIDBadRequest() *PatchSepaddIDBadRequest {
	return &PatchSepaddIDBadRequest{}
}

/*PatchSepaddIDBadRequest handles this case with default header values.

Bad Request
*/
type PatchSepaddIDBadRequest struct {
	Payload *models.APIError
}

func (o *PatchSepaddIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /sepadd/{id}][%d] patchSepaddIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchSepaddIDBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *PatchSepaddIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSepaddIDUnauthorized creates a PatchSepaddIDUnauthorized with default headers values
func NewPatchSepaddIDUnauthorized() *PatchSepaddIDUnauthorized {
	return &PatchSepaddIDUnauthorized{}
}

/*PatchSepaddIDUnauthorized handles this case with default header values.

Authentication credentials were missing or incorrect
*/
type PatchSepaddIDUnauthorized struct {
	Payload *models.APIError
}

func (o *PatchSepaddIDUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /sepadd/{id}][%d] patchSepaddIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchSepaddIDUnauthorized) GetPayload() *models.APIError {
	return o.Payload
}

func (o *PatchSepaddIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSepaddIDForbidden creates a PatchSepaddIDForbidden with default headers values
func NewPatchSepaddIDForbidden() *PatchSepaddIDForbidden {
	return &PatchSepaddIDForbidden{}
}

/*PatchSepaddIDForbidden handles this case with default header values.

Forbidden
*/
type PatchSepaddIDForbidden struct {
	Payload *models.APIError
}

func (o *PatchSepaddIDForbidden) Error() string {
	return fmt.Sprintf("[PATCH /sepadd/{id}][%d] patchSepaddIdForbidden  %+v", 403, o.Payload)
}

func (o *PatchSepaddIDForbidden) GetPayload() *models.APIError {
	return o.Payload
}

func (o *PatchSepaddIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSepaddIDNotFound creates a PatchSepaddIDNotFound with default headers values
func NewPatchSepaddIDNotFound() *PatchSepaddIDNotFound {
	return &PatchSepaddIDNotFound{}
}

/*PatchSepaddIDNotFound handles this case with default header values.

Record not found
*/
type PatchSepaddIDNotFound struct {
	Payload *models.APIError
}

func (o *PatchSepaddIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /sepadd/{id}][%d] patchSepaddIdNotFound  %+v", 404, o.Payload)
}

func (o *PatchSepaddIDNotFound) GetPayload() *models.APIError {
	return o.Payload
}

func (o *PatchSepaddIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSepaddIDConflict creates a PatchSepaddIDConflict with default headers values
func NewPatchSepaddIDConflict() *PatchSepaddIDConflict {
	return &PatchSepaddIDConflict{}
}

/*PatchSepaddIDConflict handles this case with default header values.

Conflict
*/
type PatchSepaddIDConflict struct {
	Payload *models.APIError
}

func (o *PatchSepaddIDConflict) Error() string {
	return fmt.Sprintf("[PATCH /sepadd/{id}][%d] patchSepaddIdConflict  %+v", 409, o.Payload)
}

func (o *PatchSepaddIDConflict) GetPayload() *models.APIError {
	return o.Payload
}

func (o *PatchSepaddIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSepaddIDTooManyRequests creates a PatchSepaddIDTooManyRequests with default headers values
func NewPatchSepaddIDTooManyRequests() *PatchSepaddIDTooManyRequests {
	return &PatchSepaddIDTooManyRequests{}
}

/*PatchSepaddIDTooManyRequests handles this case with default header values.

The request cannot be served due to the applicationâ€™s rate limit
*/
type PatchSepaddIDTooManyRequests struct {
	Payload *models.APIError
}

func (o *PatchSepaddIDTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /sepadd/{id}][%d] patchSepaddIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchSepaddIDTooManyRequests) GetPayload() *models.APIError {
	return o.Payload
}

func (o *PatchSepaddIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSepaddIDInternalServerError creates a PatchSepaddIDInternalServerError with default headers values
func NewPatchSepaddIDInternalServerError() *PatchSepaddIDInternalServerError {
	return &PatchSepaddIDInternalServerError{}
}

/*PatchSepaddIDInternalServerError handles this case with default header values.

Internal Server Error
*/
type PatchSepaddIDInternalServerError struct {
	Payload *models.APIError
}

func (o *PatchSepaddIDInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /sepadd/{id}][%d] patchSepaddIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchSepaddIDInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *PatchSepaddIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSepaddIDServiceUnavailable creates a PatchSepaddIDServiceUnavailable with default headers values
func NewPatchSepaddIDServiceUnavailable() *PatchSepaddIDServiceUnavailable {
	return &PatchSepaddIDServiceUnavailable{}
}

/*PatchSepaddIDServiceUnavailable handles this case with default header values.

The server is up, but overloaded with requests. Try again later.
*/
type PatchSepaddIDServiceUnavailable struct {
	Payload *models.APIError
}

func (o *PatchSepaddIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /sepadd/{id}][%d] patchSepaddIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchSepaddIDServiceUnavailable) GetPayload() *models.APIError {
	return o.Payload
}

func (o *PatchSepaddIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
