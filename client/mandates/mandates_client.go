// Code generated by go-swagger; DO NOT EDIT.

package mandates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new mandates API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for mandates API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteMandatemanagementID(params *DeleteMandatemanagementIDParams) (*DeleteMandatemanagementIDNoContent, error)

	GetMandatemanagementID(params *GetMandatemanagementIDParams) (*GetMandatemanagementIDOK, error)

	GetMandates(params *GetMandatesParams) (*GetMandatesOK, error)

	PostMandatemanagement(params *PostMandatemanagementParams) (*PostMandatemanagementCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteMandatemanagementID deletes mandate management
*/
func (a *Client) DeleteMandatemanagementID(params *DeleteMandatemanagementIDParams) (*DeleteMandatemanagementIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMandatemanagementIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteMandatemanagementID",
		Method:             "DELETE",
		PathPattern:        "/mandatemanagement/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMandatemanagementIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMandatemanagementIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteMandatemanagementID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetMandatemanagementID fetches mandate management
*/
func (a *Client) GetMandatemanagementID(params *GetMandatemanagementIDParams) (*GetMandatemanagementIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMandatemanagementIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMandatemanagementID",
		Method:             "GET",
		PathPattern:        "/mandatemanagement/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMandatemanagementIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMandatemanagementIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetMandatemanagementID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetMandates lists mandates
*/
func (a *Client) GetMandates(params *GetMandatesParams) (*GetMandatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMandatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMandates",
		Method:             "GET",
		PathPattern:        "/mandates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMandatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMandatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetMandates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostMandatemanagement creates mandate management for organisation
*/
func (a *Client) PostMandatemanagement(params *PostMandatemanagementParams) (*PostMandatemanagementCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMandatemanagementParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMandatemanagement",
		Method:             "POST",
		PathPattern:        "/mandatemanagement",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMandatemanagementReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostMandatemanagementCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostMandatemanagement: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
