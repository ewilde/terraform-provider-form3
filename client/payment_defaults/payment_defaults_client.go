// Code generated by go-swagger; DO NOT EDIT.

package payment_defaults

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new payment defaults API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for payment defaults API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeletePaymentdefaultsID(params *DeletePaymentdefaultsIDParams, opts ...ClientOption) (*DeletePaymentdefaultsIDNoContent, error)

	GetPaymentdefaults(params *GetPaymentdefaultsParams, opts ...ClientOption) (*GetPaymentdefaultsOK, error)

	GetPaymentdefaultsID(params *GetPaymentdefaultsIDParams, opts ...ClientOption) (*GetPaymentdefaultsIDOK, error)

	PatchPaymentdefaultsID(params *PatchPaymentdefaultsIDParams, opts ...ClientOption) (*PatchPaymentdefaultsIDOK, error)

	PostPaymentdefaults(params *PostPaymentdefaultsParams, opts ...ClientOption) (*PostPaymentdefaultsCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeletePaymentdefaultsID deletes payment defaults
*/
func (a *Client) DeletePaymentdefaultsID(params *DeletePaymentdefaultsIDParams, opts ...ClientOption) (*DeletePaymentdefaultsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePaymentdefaultsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeletePaymentdefaultsID",
		Method:             "DELETE",
		PathPattern:        "/paymentdefaults/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePaymentdefaultsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePaymentdefaultsIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeletePaymentdefaultsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPaymentdefaults lists default settings for payments
*/
func (a *Client) GetPaymentdefaults(params *GetPaymentdefaultsParams, opts ...ClientOption) (*GetPaymentdefaultsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentdefaultsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPaymentdefaults",
		Method:             "GET",
		PathPattern:        "/paymentdefaults",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPaymentdefaultsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPaymentdefaultsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPaymentdefaults: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPaymentdefaultsID fetches payment defaults
*/
func (a *Client) GetPaymentdefaultsID(params *GetPaymentdefaultsIDParams, opts ...ClientOption) (*GetPaymentdefaultsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentdefaultsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPaymentdefaultsID",
		Method:             "GET",
		PathPattern:        "/paymentdefaults/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPaymentdefaultsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPaymentdefaultsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPaymentdefaultsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchPaymentdefaultsID updates payment defaults
*/
func (a *Client) PatchPaymentdefaultsID(params *PatchPaymentdefaultsIDParams, opts ...ClientOption) (*PatchPaymentdefaultsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchPaymentdefaultsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchPaymentdefaultsID",
		Method:             "PATCH",
		PathPattern:        "/paymentdefaults/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchPaymentdefaultsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchPaymentdefaultsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchPaymentdefaultsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostPaymentdefaults creates the default settings for a payment
*/
func (a *Client) PostPaymentdefaults(params *PostPaymentdefaultsParams, opts ...ClientOption) (*PostPaymentdefaultsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPaymentdefaultsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostPaymentdefaults",
		Method:             "POST",
		PathPattern:        "/paymentdefaults",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPaymentdefaultsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPaymentdefaultsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPaymentdefaults: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
